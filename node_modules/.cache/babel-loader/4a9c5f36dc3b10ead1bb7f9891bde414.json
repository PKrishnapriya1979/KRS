{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport Divider from '@mui/material/Divider';\nimport { GridEvents, useGridApiEventHandler, useGridApiMethod, gridFilteredDescendantCountLookupSelector } from '@mui/x-data-grid';\nimport { useGridRegisterPreProcessor, isDeepEqual } from '@mui/x-data-grid/internals';\nimport { gridRowGroupingModelSelector, gridRowGroupingSanitizedModelSelector, gridRowGroupingStateSelector } from './gridRowGroupingSelector';\nimport { getRowGroupingFieldFromGroupingCriteria, ROW_GROUPING_STRATEGY, isGroupingColumn, mergeStateWithRowGroupingModel, setStrategyAvailability } from './gridRowGroupingUtils';\nimport { GridRowGroupableColumnMenuItems } from '../../../components/GridRowGroupableColumnMenuItems';\nimport { GridRowGroupingColumnMenuItems } from '../../../components/GridRowGroupingColumnMenuItems';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport const rowGroupingStateInitializer = (state, props) => {\n  var _ref, _props$rowGroupingMod, _props$initialState, _props$initialState$r;\n\n  return _extends({}, state, {\n    rowGrouping: {\n      model: (_ref = (_props$rowGroupingMod = props.rowGroupingModel) != null ? _props$rowGroupingMod : (_props$initialState = props.initialState) == null ? void 0 : (_props$initialState$r = _props$initialState.rowGrouping) == null ? void 0 : _props$initialState$r.model) != null ? _ref : [],\n      unstable_sanitizedModelOnLastRowTreeCreation: []\n    }\n  });\n};\n/**\n * Only available in DataGridPro\n * @requires useGridColumns (state, method) - can be after, async only\n * @requires useGridRows (state, method) - can be after, async only\n * @requires useGridParamsApi (method) - can be after, async only\n * TODO: Move the the Premium plan once available and remove the `experimentalFeatures.rowGrouping` flag\n */\n\nexport const useGridRowGrouping = (apiRef, props) => {\n  apiRef.current.unstable_updateControlState({\n    stateId: 'rowGrouping',\n    propModel: props.rowGroupingModel,\n    propOnChange: props.onRowGroupingModelChange,\n    stateSelector: gridRowGroupingModelSelector,\n    changeEvent: GridEvents.rowGroupingModelChange\n  });\n  /**\n   * API METHODS\n   */\n\n  const setRowGroupingModel = React.useCallback(model => {\n    const currentModel = gridRowGroupingModelSelector(apiRef);\n\n    if (currentModel !== model) {\n      apiRef.current.setState(mergeStateWithRowGroupingModel(model));\n      setStrategyAvailability(apiRef, props.disableRowGrouping);\n      apiRef.current.forceUpdate();\n    }\n  }, [apiRef, props.disableRowGrouping]);\n  const addRowGroupingCriteria = React.useCallback((field, groupingIndex) => {\n    const currentModel = gridRowGroupingModelSelector(apiRef);\n\n    if (currentModel.includes(field)) {\n      return;\n    }\n\n    const cleanGroupingIndex = groupingIndex != null ? groupingIndex : currentModel.length;\n    const updatedModel = [...currentModel.slice(0, cleanGroupingIndex), field, ...currentModel.slice(cleanGroupingIndex)];\n    apiRef.current.setRowGroupingModel(updatedModel);\n  }, [apiRef]);\n  const removeRowGroupingCriteria = React.useCallback(field => {\n    const currentModel = gridRowGroupingModelSelector(apiRef);\n\n    if (!currentModel.includes(field)) {\n      return;\n    }\n\n    apiRef.current.setRowGroupingModel(currentModel.filter(el => el !== field));\n  }, [apiRef]);\n  const setRowGroupingCriteriaIndex = React.useCallback((field, targetIndex) => {\n    const currentModel = gridRowGroupingModelSelector(apiRef);\n    const currentTargetIndex = currentModel.indexOf(field);\n\n    if (currentTargetIndex === -1) {\n      return;\n    }\n\n    const updatedModel = [...currentModel];\n    updatedModel.splice(targetIndex, 0, updatedModel.splice(currentTargetIndex, 1)[0]);\n    apiRef.current.setRowGroupingModel(updatedModel);\n  }, [apiRef]);\n  const rowGroupingApi = {\n    setRowGroupingModel,\n    addRowGroupingCriteria,\n    removeRowGroupingCriteria,\n    setRowGroupingCriteriaIndex\n  };\n  useGridApiMethod(apiRef, rowGroupingApi, 'GridRowGroupingApi');\n  /**\n   * PRE-PROCESSING\n   */\n\n  const addColumnMenuButtons = React.useCallback((initialValue, columns) => {\n    if (props.disableRowGrouping) {\n      return initialValue;\n    }\n\n    let menuItems;\n\n    if (isGroupingColumn(columns.field)) {\n      menuItems = /*#__PURE__*/_jsx(GridRowGroupingColumnMenuItems, {});\n    } else if (columns.groupable) {\n      menuItems = /*#__PURE__*/_jsx(GridRowGroupableColumnMenuItems, {});\n    } else {\n      menuItems = null;\n    }\n\n    if (menuItems == null) {\n      return initialValue;\n    }\n\n    return [...initialValue, /*#__PURE__*/_jsx(Divider, {}), menuItems];\n  }, [props.disableRowGrouping]);\n  const stateExportPreProcessing = React.useCallback(prevState => {\n    if (props.disableRowGrouping) {\n      return prevState;\n    }\n\n    const rowGroupingModelToExport = gridRowGroupingModelSelector(apiRef);\n\n    if (rowGroupingModelToExport.length === 0) {\n      return prevState;\n    }\n\n    return _extends({}, prevState, {\n      rowGrouping: {\n        model: rowGroupingModelToExport\n      }\n    });\n  }, [apiRef, props.disableRowGrouping]);\n  const stateRestorePreProcessing = React.useCallback((params, context) => {\n    var _context$stateToResto;\n\n    if (props.disableRowGrouping) {\n      return params;\n    }\n\n    const rowGroupingModel = (_context$stateToResto = context.stateToRestore.rowGrouping) == null ? void 0 : _context$stateToResto.model;\n\n    if (rowGroupingModel != null) {\n      apiRef.current.setState(mergeStateWithRowGroupingModel(rowGroupingModel));\n    }\n\n    return params;\n  }, [apiRef, props.disableRowGrouping]);\n  useGridRegisterPreProcessor(apiRef, 'columnMenu', addColumnMenuButtons);\n  useGridRegisterPreProcessor(apiRef, 'exportState', stateExportPreProcessing);\n  useGridRegisterPreProcessor(apiRef, 'restoreState', stateRestorePreProcessing);\n  /**\n   * EVENTS\n   */\n\n  const handleCellKeyDown = React.useCallback((params, event) => {\n    const cellParams = apiRef.current.getCellParams(params.id, params.field);\n\n    if (isGroupingColumn(cellParams.field) && event.key === ' ' && !event.shiftKey) {\n      var _gridFilteredDescenda;\n\n      event.stopPropagation();\n      event.preventDefault();\n      const filteredDescendantCount = (_gridFilteredDescenda = gridFilteredDescendantCountLookupSelector(apiRef)[params.id]) != null ? _gridFilteredDescenda : 0;\n      const isOnGroupingCell = props.rowGroupingColumnMode === 'single' || getRowGroupingFieldFromGroupingCriteria(params.rowNode.groupingField) === params.field;\n\n      if (!isOnGroupingCell || filteredDescendantCount === 0) {\n        return;\n      }\n\n      apiRef.current.setRowChildrenExpansion(params.id, !params.rowNode.childrenExpanded);\n    }\n  }, [apiRef, props.rowGroupingColumnMode]);\n  const checkGroupingColumnsModelDiff = React.useCallback(() => {\n    const rowGroupingModel = gridRowGroupingSanitizedModelSelector(apiRef);\n    const lastGroupingColumnsModelApplied = gridRowGroupingStateSelector(apiRef.current.state).unstable_sanitizedModelOnLastRowTreeCreation;\n\n    if (!isDeepEqual(lastGroupingColumnsModelApplied, rowGroupingModel)) {\n      apiRef.current.setState(state => _extends({}, state, {\n        rowGrouping: _extends({}, state.rowGrouping, {\n          unstable_sanitizedModelOnLastRowTreeCreation: rowGroupingModel\n        })\n      })); // Refresh the column pre-processing\n      // TODO: Add a clean way to re-run a pipe processing without faking a change\n\n      apiRef.current.updateColumns([]);\n      setStrategyAvailability(apiRef, props.disableRowGrouping); // Refresh the row tree creation strategy processing\n      // TODO: Add a clean way to re-run a strategy processing without publishing a private event\n\n      if (apiRef.current.unstable_getActiveStrategy('rowTree') === ROW_GROUPING_STRATEGY) {\n        apiRef.current.publishEvent(GridEvents.activeStrategyProcessorChange, 'rowTreeCreation');\n      }\n    }\n  }, [apiRef, props.disableRowGrouping]);\n  useGridApiEventHandler(apiRef, GridEvents.cellKeyDown, handleCellKeyDown);\n  useGridApiEventHandler(apiRef, GridEvents.columnsChange, checkGroupingColumnsModelDiff);\n  useGridApiEventHandler(apiRef, GridEvents.rowGroupingModelChange, checkGroupingColumnsModelDiff);\n  /**\n   * EFFECTS\n   */\n\n  React.useEffect(() => {\n    if (props.rowGroupingModel !== undefined) {\n      apiRef.current.setRowGroupingModel(props.rowGroupingModel);\n    }\n  }, [apiRef, props.rowGroupingModel]);\n};","map":{"version":3,"sources":["C:/Users/Admin/Documents/KRS/Application1/client/node_modules/@mui/x-data-grid-pro/hooks/features/rowGrouping/useGridRowGrouping.js"],"names":["_extends","React","Divider","GridEvents","useGridApiEventHandler","useGridApiMethod","gridFilteredDescendantCountLookupSelector","useGridRegisterPreProcessor","isDeepEqual","gridRowGroupingModelSelector","gridRowGroupingSanitizedModelSelector","gridRowGroupingStateSelector","getRowGroupingFieldFromGroupingCriteria","ROW_GROUPING_STRATEGY","isGroupingColumn","mergeStateWithRowGroupingModel","setStrategyAvailability","GridRowGroupableColumnMenuItems","GridRowGroupingColumnMenuItems","jsx","_jsx","rowGroupingStateInitializer","state","props","_ref","_props$rowGroupingMod","_props$initialState","_props$initialState$r","rowGrouping","model","rowGroupingModel","initialState","unstable_sanitizedModelOnLastRowTreeCreation","useGridRowGrouping","apiRef","current","unstable_updateControlState","stateId","propModel","propOnChange","onRowGroupingModelChange","stateSelector","changeEvent","rowGroupingModelChange","setRowGroupingModel","useCallback","currentModel","setState","disableRowGrouping","forceUpdate","addRowGroupingCriteria","field","groupingIndex","includes","cleanGroupingIndex","length","updatedModel","slice","removeRowGroupingCriteria","filter","el","setRowGroupingCriteriaIndex","targetIndex","currentTargetIndex","indexOf","splice","rowGroupingApi","addColumnMenuButtons","initialValue","columns","menuItems","groupable","stateExportPreProcessing","prevState","rowGroupingModelToExport","stateRestorePreProcessing","params","context","_context$stateToResto","stateToRestore","handleCellKeyDown","event","cellParams","getCellParams","id","key","shiftKey","_gridFilteredDescenda","stopPropagation","preventDefault","filteredDescendantCount","isOnGroupingCell","rowGroupingColumnMode","rowNode","groupingField","setRowChildrenExpansion","childrenExpanded","checkGroupingColumnsModelDiff","lastGroupingColumnsModelApplied","updateColumns","unstable_getActiveStrategy","publishEvent","activeStrategyProcessorChange","cellKeyDown","columnsChange","useEffect","undefined"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport Divider from '@mui/material/Divider';\nimport { GridEvents, useGridApiEventHandler, useGridApiMethod, gridFilteredDescendantCountLookupSelector } from '@mui/x-data-grid';\nimport { useGridRegisterPreProcessor, isDeepEqual } from '@mui/x-data-grid/internals';\nimport { gridRowGroupingModelSelector, gridRowGroupingSanitizedModelSelector, gridRowGroupingStateSelector } from './gridRowGroupingSelector';\nimport { getRowGroupingFieldFromGroupingCriteria, ROW_GROUPING_STRATEGY, isGroupingColumn, mergeStateWithRowGroupingModel, setStrategyAvailability } from './gridRowGroupingUtils';\nimport { GridRowGroupableColumnMenuItems } from '../../../components/GridRowGroupableColumnMenuItems';\nimport { GridRowGroupingColumnMenuItems } from '../../../components/GridRowGroupingColumnMenuItems';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport const rowGroupingStateInitializer = (state, props) => {\n  var _ref, _props$rowGroupingMod, _props$initialState, _props$initialState$r;\n\n  return _extends({}, state, {\n    rowGrouping: {\n      model: (_ref = (_props$rowGroupingMod = props.rowGroupingModel) != null ? _props$rowGroupingMod : (_props$initialState = props.initialState) == null ? void 0 : (_props$initialState$r = _props$initialState.rowGrouping) == null ? void 0 : _props$initialState$r.model) != null ? _ref : [],\n      unstable_sanitizedModelOnLastRowTreeCreation: []\n    }\n  });\n};\n/**\n * Only available in DataGridPro\n * @requires useGridColumns (state, method) - can be after, async only\n * @requires useGridRows (state, method) - can be after, async only\n * @requires useGridParamsApi (method) - can be after, async only\n * TODO: Move the the Premium plan once available and remove the `experimentalFeatures.rowGrouping` flag\n */\n\nexport const useGridRowGrouping = (apiRef, props) => {\n  apiRef.current.unstable_updateControlState({\n    stateId: 'rowGrouping',\n    propModel: props.rowGroupingModel,\n    propOnChange: props.onRowGroupingModelChange,\n    stateSelector: gridRowGroupingModelSelector,\n    changeEvent: GridEvents.rowGroupingModelChange\n  });\n  /**\n   * API METHODS\n   */\n\n  const setRowGroupingModel = React.useCallback(model => {\n    const currentModel = gridRowGroupingModelSelector(apiRef);\n\n    if (currentModel !== model) {\n      apiRef.current.setState(mergeStateWithRowGroupingModel(model));\n      setStrategyAvailability(apiRef, props.disableRowGrouping);\n      apiRef.current.forceUpdate();\n    }\n  }, [apiRef, props.disableRowGrouping]);\n  const addRowGroupingCriteria = React.useCallback((field, groupingIndex) => {\n    const currentModel = gridRowGroupingModelSelector(apiRef);\n\n    if (currentModel.includes(field)) {\n      return;\n    }\n\n    const cleanGroupingIndex = groupingIndex != null ? groupingIndex : currentModel.length;\n    const updatedModel = [...currentModel.slice(0, cleanGroupingIndex), field, ...currentModel.slice(cleanGroupingIndex)];\n    apiRef.current.setRowGroupingModel(updatedModel);\n  }, [apiRef]);\n  const removeRowGroupingCriteria = React.useCallback(field => {\n    const currentModel = gridRowGroupingModelSelector(apiRef);\n\n    if (!currentModel.includes(field)) {\n      return;\n    }\n\n    apiRef.current.setRowGroupingModel(currentModel.filter(el => el !== field));\n  }, [apiRef]);\n  const setRowGroupingCriteriaIndex = React.useCallback((field, targetIndex) => {\n    const currentModel = gridRowGroupingModelSelector(apiRef);\n    const currentTargetIndex = currentModel.indexOf(field);\n\n    if (currentTargetIndex === -1) {\n      return;\n    }\n\n    const updatedModel = [...currentModel];\n    updatedModel.splice(targetIndex, 0, updatedModel.splice(currentTargetIndex, 1)[0]);\n    apiRef.current.setRowGroupingModel(updatedModel);\n  }, [apiRef]);\n  const rowGroupingApi = {\n    setRowGroupingModel,\n    addRowGroupingCriteria,\n    removeRowGroupingCriteria,\n    setRowGroupingCriteriaIndex\n  };\n  useGridApiMethod(apiRef, rowGroupingApi, 'GridRowGroupingApi');\n  /**\n   * PRE-PROCESSING\n   */\n\n  const addColumnMenuButtons = React.useCallback((initialValue, columns) => {\n    if (props.disableRowGrouping) {\n      return initialValue;\n    }\n\n    let menuItems;\n\n    if (isGroupingColumn(columns.field)) {\n      menuItems = /*#__PURE__*/_jsx(GridRowGroupingColumnMenuItems, {});\n    } else if (columns.groupable) {\n      menuItems = /*#__PURE__*/_jsx(GridRowGroupableColumnMenuItems, {});\n    } else {\n      menuItems = null;\n    }\n\n    if (menuItems == null) {\n      return initialValue;\n    }\n\n    return [...initialValue, /*#__PURE__*/_jsx(Divider, {}), menuItems];\n  }, [props.disableRowGrouping]);\n  const stateExportPreProcessing = React.useCallback(prevState => {\n    if (props.disableRowGrouping) {\n      return prevState;\n    }\n\n    const rowGroupingModelToExport = gridRowGroupingModelSelector(apiRef);\n\n    if (rowGroupingModelToExport.length === 0) {\n      return prevState;\n    }\n\n    return _extends({}, prevState, {\n      rowGrouping: {\n        model: rowGroupingModelToExport\n      }\n    });\n  }, [apiRef, props.disableRowGrouping]);\n  const stateRestorePreProcessing = React.useCallback((params, context) => {\n    var _context$stateToResto;\n\n    if (props.disableRowGrouping) {\n      return params;\n    }\n\n    const rowGroupingModel = (_context$stateToResto = context.stateToRestore.rowGrouping) == null ? void 0 : _context$stateToResto.model;\n\n    if (rowGroupingModel != null) {\n      apiRef.current.setState(mergeStateWithRowGroupingModel(rowGroupingModel));\n    }\n\n    return params;\n  }, [apiRef, props.disableRowGrouping]);\n  useGridRegisterPreProcessor(apiRef, 'columnMenu', addColumnMenuButtons);\n  useGridRegisterPreProcessor(apiRef, 'exportState', stateExportPreProcessing);\n  useGridRegisterPreProcessor(apiRef, 'restoreState', stateRestorePreProcessing);\n  /**\n   * EVENTS\n   */\n\n  const handleCellKeyDown = React.useCallback((params, event) => {\n    const cellParams = apiRef.current.getCellParams(params.id, params.field);\n\n    if (isGroupingColumn(cellParams.field) && event.key === ' ' && !event.shiftKey) {\n      var _gridFilteredDescenda;\n\n      event.stopPropagation();\n      event.preventDefault();\n      const filteredDescendantCount = (_gridFilteredDescenda = gridFilteredDescendantCountLookupSelector(apiRef)[params.id]) != null ? _gridFilteredDescenda : 0;\n      const isOnGroupingCell = props.rowGroupingColumnMode === 'single' || getRowGroupingFieldFromGroupingCriteria(params.rowNode.groupingField) === params.field;\n\n      if (!isOnGroupingCell || filteredDescendantCount === 0) {\n        return;\n      }\n\n      apiRef.current.setRowChildrenExpansion(params.id, !params.rowNode.childrenExpanded);\n    }\n  }, [apiRef, props.rowGroupingColumnMode]);\n  const checkGroupingColumnsModelDiff = React.useCallback(() => {\n    const rowGroupingModel = gridRowGroupingSanitizedModelSelector(apiRef);\n    const lastGroupingColumnsModelApplied = gridRowGroupingStateSelector(apiRef.current.state).unstable_sanitizedModelOnLastRowTreeCreation;\n\n    if (!isDeepEqual(lastGroupingColumnsModelApplied, rowGroupingModel)) {\n      apiRef.current.setState(state => _extends({}, state, {\n        rowGrouping: _extends({}, state.rowGrouping, {\n          unstable_sanitizedModelOnLastRowTreeCreation: rowGroupingModel\n        })\n      })); // Refresh the column pre-processing\n      // TODO: Add a clean way to re-run a pipe processing without faking a change\n\n      apiRef.current.updateColumns([]);\n      setStrategyAvailability(apiRef, props.disableRowGrouping); // Refresh the row tree creation strategy processing\n      // TODO: Add a clean way to re-run a strategy processing without publishing a private event\n\n      if (apiRef.current.unstable_getActiveStrategy('rowTree') === ROW_GROUPING_STRATEGY) {\n        apiRef.current.publishEvent(GridEvents.activeStrategyProcessorChange, 'rowTreeCreation');\n      }\n    }\n  }, [apiRef, props.disableRowGrouping]);\n  useGridApiEventHandler(apiRef, GridEvents.cellKeyDown, handleCellKeyDown);\n  useGridApiEventHandler(apiRef, GridEvents.columnsChange, checkGroupingColumnsModelDiff);\n  useGridApiEventHandler(apiRef, GridEvents.rowGroupingModelChange, checkGroupingColumnsModelDiff);\n  /**\n   * EFFECTS\n   */\n\n  React.useEffect(() => {\n    if (props.rowGroupingModel !== undefined) {\n      apiRef.current.setRowGroupingModel(props.rowGroupingModel);\n    }\n  }, [apiRef, props.rowGroupingModel]);\n};"]},"metadata":{},"sourceType":"module"}