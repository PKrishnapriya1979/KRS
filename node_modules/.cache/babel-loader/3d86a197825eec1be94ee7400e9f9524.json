{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { ownerDocument, useEventCallback } from '@mui/material/utils';\nimport { GridEvents, gridClasses, GridColumnHeaderSeparatorSides, useGridApiEventHandler, useGridApiOptionHandler, useGridNativeEventListener, useGridLogger } from '@mui/x-data-grid';\nimport { clamp, findParentElementFromClassName } from '@mui/x-data-grid/internals';\nimport { findGridCellElementsFromCol, getFieldFromHeaderElem, findHeaderElementFromField } from '../../../utils/domUtils'; // TODO: remove support for Safari < 13.\n// https://caniuse.com/#search=touch-action\n//\n// Safari, on iOS, supports touch action since v13.\n// Over 80% of the iOS phones are compatible\n// in August 2020.\n// Utilizing the CSS.supports method to check if touch-action is supported.\n// Since CSS.supports is supported on all but Edge@12 and IE and touch-action\n// is supported on both Edge@12 and IE if CSS.supports is not available that means that\n// touch-action will be supported\n\nlet cachedSupportsTouchActionNone = false;\n\nfunction doesSupportTouchActionNone() {\n  if (cachedSupportsTouchActionNone === undefined) {\n    if (typeof CSS !== 'undefined' && typeof CSS.supports === 'function') {\n      cachedSupportsTouchActionNone = CSS.supports('touch-action', 'none');\n    } else {\n      cachedSupportsTouchActionNone = true;\n    }\n  }\n\n  return cachedSupportsTouchActionNone;\n}\n\nfunction trackFinger(event, currentTouchId) {\n  if (currentTouchId !== undefined && event.changedTouches) {\n    for (let i = 0; i < event.changedTouches.length; i += 1) {\n      const touch = event.changedTouches[i];\n\n      if (touch.identifier === currentTouchId) {\n        return {\n          x: touch.clientX,\n          y: touch.clientY\n        };\n      }\n    }\n\n    return false;\n  }\n\n  return {\n    x: event.clientX,\n    y: event.clientY\n  };\n}\n\nfunction computeNewWidth(initialOffsetToSeparator, clickX, columnBounds, separatorSide) {\n  let newWidth = initialOffsetToSeparator;\n\n  if (separatorSide === GridColumnHeaderSeparatorSides.Right) {\n    newWidth += clickX - columnBounds.left;\n  } else {\n    newWidth += columnBounds.right - clickX;\n  }\n\n  return newWidth;\n}\n\nfunction computeOffsetToSeparator(clickX, columnBounds, separatorSide) {\n  if (separatorSide === GridColumnHeaderSeparatorSides.Left) {\n    return clickX - columnBounds.left;\n  }\n\n  return columnBounds.right - clickX;\n}\n\nfunction getSeparatorSide(element) {\n  return element.classList.contains(gridClasses['columnSeparator--sideRight']) ? GridColumnHeaderSeparatorSides.Right : GridColumnHeaderSeparatorSides.Left;\n}\n\nexport const columnResizeStateInitializer = state => _extends({}, state, {\n  columnResize: {\n    resizingColumnField: ''\n  }\n});\n/**\n * Only available in DataGridPro\n * @requires useGridColumns (method, event)\n * TODO: improve experience for last column\n */\n\nexport const useGridColumnResize = (apiRef, props) => {\n  const logger = useGridLogger(apiRef, 'useGridColumnResize');\n  const colDefRef = React.useRef();\n  const colElementRef = React.useRef();\n  const colCellElementsRef = React.useRef(); // To improve accessibility, the separator has padding on both sides.\n  // Clicking inside the padding area should be treated as a click in the separator.\n  // This ref stores the offset between the click and the separator.\n\n  const initialOffsetToSeparator = React.useRef();\n  const separatorSide = React.useRef();\n  const stopResizeEventTimeout = React.useRef();\n  const touchId = React.useRef();\n\n  const updateWidth = newWidth => {\n    logger.debug(`Updating width to ${newWidth} for col ${colDefRef.current.field}`);\n    colDefRef.current.computedWidth = newWidth;\n    colDefRef.current.width = newWidth;\n    colDefRef.current.flex = undefined;\n    colElementRef.current.style.width = `${newWidth}px`;\n    colElementRef.current.style.minWidth = `${newWidth}px`;\n    colElementRef.current.style.maxWidth = `${newWidth}px`;\n    colCellElementsRef.current.forEach(element => {\n      const div = element;\n      div.style.width = `${newWidth}px`;\n      div.style.minWidth = `${newWidth}px`;\n      div.style.maxWidth = `${newWidth}px`;\n    });\n  };\n\n  const handleResizeMouseUp = useEventCallback(nativeEvent => {\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    stopListening();\n    apiRef.current.updateColumn(colDefRef.current);\n    clearTimeout(stopResizeEventTimeout.current);\n    stopResizeEventTimeout.current = setTimeout(() => {\n      apiRef.current.publishEvent(GridEvents.columnResizeStop, null, nativeEvent);\n\n      if (colDefRef.current) {\n        var _colDefRef$current;\n\n        apiRef.current.publishEvent(GridEvents.columnWidthChange, {\n          element: colElementRef.current,\n          colDef: colDefRef.current,\n          width: (_colDefRef$current = colDefRef.current) == null ? void 0 : _colDefRef$current.computedWidth\n        }, nativeEvent);\n      }\n    });\n    logger.debug(`Updating col ${colDefRef.current.field} with new width: ${colDefRef.current.width}`);\n  });\n  const handleResizeMouseMove = useEventCallback(nativeEvent => {\n    // Cancel move in case some other element consumed a mouseup event and it was not fired.\n    if (nativeEvent.buttons === 0) {\n      handleResizeMouseUp(nativeEvent);\n      return;\n    }\n\n    let newWidth = computeNewWidth(initialOffsetToSeparator.current, nativeEvent.clientX, colElementRef.current.getBoundingClientRect(), separatorSide.current);\n    newWidth = clamp(newWidth, colDefRef.current.minWidth, colDefRef.current.maxWidth);\n    updateWidth(newWidth);\n    const params = {\n      element: colElementRef.current,\n      colDef: colDefRef.current,\n      width: newWidth\n    };\n    apiRef.current.publishEvent(GridEvents.columnResize, params, nativeEvent);\n  });\n  const handleColumnResizeMouseDown = useEventCallback((_ref, event) => {\n    let {\n      colDef\n    } = _ref;\n\n    var _apiRef$current$colum; // Only handle left clicks\n\n\n    if (event.button !== 0) {\n      return;\n    } // Skip if the column isn't resizable\n\n\n    if (!event.currentTarget.classList.contains(gridClasses['columnSeparator--resizable'])) {\n      return;\n    } // Avoid text selection\n\n\n    event.preventDefault();\n    logger.debug(`Start Resize on col ${colDef.field}`);\n    apiRef.current.publishEvent(GridEvents.columnResizeStart, {\n      field: colDef.field\n    }, event);\n    colDefRef.current = colDef;\n    colElementRef.current = (_apiRef$current$colum = apiRef.current.columnHeadersContainerElementRef) == null ? void 0 : _apiRef$current$colum.current.querySelector(`[data-field=\"${colDef.field}\"]`);\n    colCellElementsRef.current = findGridCellElementsFromCol(colElementRef.current);\n    const doc = ownerDocument(apiRef.current.rootElementRef.current);\n    doc.body.style.cursor = 'col-resize';\n    separatorSide.current = getSeparatorSide(event.currentTarget);\n    initialOffsetToSeparator.current = computeOffsetToSeparator(event.clientX, colElementRef.current.getBoundingClientRect(), separatorSide.current);\n    doc.addEventListener('mousemove', handleResizeMouseMove);\n    doc.addEventListener('mouseup', handleResizeMouseUp);\n  });\n  const handleTouchEnd = useEventCallback(nativeEvent => {\n    const finger = trackFinger(nativeEvent, touchId.current);\n\n    if (!finger) {\n      return;\n    } // eslint-disable-next-line @typescript-eslint/no-use-before-define\n\n\n    stopListening();\n    apiRef.current.updateColumn(colDefRef.current);\n    clearTimeout(stopResizeEventTimeout.current);\n    stopResizeEventTimeout.current = setTimeout(() => {\n      apiRef.current.publishEvent(GridEvents.columnResizeStop, null, nativeEvent);\n    });\n    logger.debug(`Updating col ${colDefRef.current.field} with new width: ${colDefRef.current.width}`);\n  });\n  const handleTouchMove = useEventCallback(nativeEvent => {\n    const finger = trackFinger(nativeEvent, touchId.current);\n\n    if (!finger) {\n      return;\n    } // Cancel move in case some other element consumed a touchmove event and it was not fired.\n\n\n    if (nativeEvent.type === 'mousemove' && nativeEvent.buttons === 0) {\n      handleTouchEnd(nativeEvent);\n      return;\n    }\n\n    let newWidth = computeNewWidth(initialOffsetToSeparator.current, finger.x, colElementRef.current.getBoundingClientRect(), separatorSide.current);\n    newWidth = clamp(newWidth, colDefRef.current.minWidth, colDefRef.current.maxWidth);\n    updateWidth(newWidth);\n    const params = {\n      element: colElementRef.current,\n      colDef: colDefRef.current,\n      width: newWidth\n    };\n    apiRef.current.publishEvent(GridEvents.columnResize, params, nativeEvent);\n  });\n  const handleTouchStart = useEventCallback(event => {\n    var _apiRef$current$colum2;\n\n    const cellSeparator = findParentElementFromClassName(event.target, gridClasses['columnSeparator--resizable']); // Let the event bubble if the target is not a col separator\n\n    if (!cellSeparator) {\n      return;\n    } // If touch-action: none; is not supported we need to prevent the scroll manually.\n\n\n    if (!doesSupportTouchActionNone()) {\n      event.preventDefault();\n    }\n\n    const touch = event.changedTouches[0];\n\n    if (touch != null) {\n      // A number that uniquely identifies the current finger in the touch session.\n      touchId.current = touch.identifier;\n    }\n\n    colElementRef.current = findParentElementFromClassName(event.target, gridClasses.columnHeader);\n    const field = getFieldFromHeaderElem(colElementRef.current);\n    const colDef = apiRef.current.getColumn(field);\n    logger.debug(`Start Resize on col ${colDef.field}`);\n    apiRef.current.publishEvent(GridEvents.columnResizeStart, {\n      field\n    }, event);\n    colDefRef.current = colDef;\n    colElementRef.current = findHeaderElementFromField((_apiRef$current$colum2 = apiRef.current.columnHeadersElementRef) == null ? void 0 : _apiRef$current$colum2.current, colDef.field);\n    colCellElementsRef.current = findGridCellElementsFromCol(colElementRef.current);\n    separatorSide.current = getSeparatorSide(event.target);\n    initialOffsetToSeparator.current = computeOffsetToSeparator(touch.clientX, colElementRef.current.getBoundingClientRect(), separatorSide.current);\n    const doc = ownerDocument(event.currentTarget);\n    doc.addEventListener('touchmove', handleTouchMove);\n    doc.addEventListener('touchend', handleTouchEnd);\n  });\n  const stopListening = React.useCallback(() => {\n    const doc = ownerDocument(apiRef.current.rootElementRef.current);\n    doc.body.style.removeProperty('cursor');\n    doc.removeEventListener('mousemove', handleResizeMouseMove);\n    doc.removeEventListener('mouseup', handleResizeMouseUp);\n    doc.removeEventListener('touchmove', handleTouchMove);\n    doc.removeEventListener('touchend', handleTouchEnd);\n  }, [apiRef, handleResizeMouseMove, handleResizeMouseUp, handleTouchMove, handleTouchEnd]);\n  const handleResizeStart = React.useCallback(_ref2 => {\n    let {\n      field\n    } = _ref2;\n    apiRef.current.setState(state => _extends({}, state, {\n      columnResize: _extends({}, state.columnResize, {\n        resizingColumnField: field\n      })\n    }));\n    apiRef.current.forceUpdate();\n  }, [apiRef]);\n  const handleResizeStop = React.useCallback(() => {\n    apiRef.current.setState(state => _extends({}, state, {\n      columnResize: _extends({}, state.columnResize, {\n        resizingColumnField: ''\n      })\n    }));\n    apiRef.current.forceUpdate();\n  }, [apiRef]);\n  React.useEffect(() => {\n    return () => {\n      clearTimeout(stopResizeEventTimeout.current);\n      stopListening();\n    };\n  }, [apiRef, handleTouchStart, stopListening]);\n  useGridNativeEventListener(apiRef, () => {\n    var _apiRef$current$colum3;\n\n    return (_apiRef$current$colum3 = apiRef.current.columnHeadersElementRef) == null ? void 0 : _apiRef$current$colum3.current;\n  }, 'touchstart', handleTouchStart, {\n    passive: doesSupportTouchActionNone()\n  });\n  useGridApiEventHandler(apiRef, GridEvents.columnSeparatorMouseDown, handleColumnResizeMouseDown);\n  useGridApiEventHandler(apiRef, GridEvents.columnResizeStart, handleResizeStart);\n  useGridApiEventHandler(apiRef, GridEvents.columnResizeStop, handleResizeStop);\n  useGridApiOptionHandler(apiRef, GridEvents.columnResize, props.onColumnResize);\n  useGridApiOptionHandler(apiRef, GridEvents.columnWidthChange, props.onColumnWidthChange);\n};","map":{"version":3,"sources":["C:/Users/Admin/Documents/KRS/Application1/client/node_modules/@mui/x-data-grid-pro/hooks/features/columnResize/useGridColumnResize.js"],"names":["_extends","React","ownerDocument","useEventCallback","GridEvents","gridClasses","GridColumnHeaderSeparatorSides","useGridApiEventHandler","useGridApiOptionHandler","useGridNativeEventListener","useGridLogger","clamp","findParentElementFromClassName","findGridCellElementsFromCol","getFieldFromHeaderElem","findHeaderElementFromField","cachedSupportsTouchActionNone","doesSupportTouchActionNone","undefined","CSS","supports","trackFinger","event","currentTouchId","changedTouches","i","length","touch","identifier","x","clientX","y","clientY","computeNewWidth","initialOffsetToSeparator","clickX","columnBounds","separatorSide","newWidth","Right","left","right","computeOffsetToSeparator","Left","getSeparatorSide","element","classList","contains","columnResizeStateInitializer","state","columnResize","resizingColumnField","useGridColumnResize","apiRef","props","logger","colDefRef","useRef","colElementRef","colCellElementsRef","stopResizeEventTimeout","touchId","updateWidth","debug","current","field","computedWidth","width","flex","style","minWidth","maxWidth","forEach","div","handleResizeMouseUp","nativeEvent","stopListening","updateColumn","clearTimeout","setTimeout","publishEvent","columnResizeStop","_colDefRef$current","columnWidthChange","colDef","handleResizeMouseMove","buttons","getBoundingClientRect","params","handleColumnResizeMouseDown","_apiRef$current$colum","button","currentTarget","preventDefault","columnResizeStart","columnHeadersContainerElementRef","querySelector","doc","rootElementRef","body","cursor","addEventListener","handleTouchEnd","finger","handleTouchMove","type","handleTouchStart","_apiRef$current$colum2","cellSeparator","target","columnHeader","getColumn","columnHeadersElementRef","useCallback","removeProperty","removeEventListener","handleResizeStart","setState","forceUpdate","handleResizeStop","useEffect","_apiRef$current$colum3","passive","columnSeparatorMouseDown","onColumnResize","onColumnWidthChange"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { ownerDocument, useEventCallback } from '@mui/material/utils';\nimport { GridEvents, gridClasses, GridColumnHeaderSeparatorSides, useGridApiEventHandler, useGridApiOptionHandler, useGridNativeEventListener, useGridLogger } from '@mui/x-data-grid';\nimport { clamp, findParentElementFromClassName } from '@mui/x-data-grid/internals';\nimport { findGridCellElementsFromCol, getFieldFromHeaderElem, findHeaderElementFromField } from '../../../utils/domUtils';\n// TODO: remove support for Safari < 13.\n// https://caniuse.com/#search=touch-action\n//\n// Safari, on iOS, supports touch action since v13.\n// Over 80% of the iOS phones are compatible\n// in August 2020.\n// Utilizing the CSS.supports method to check if touch-action is supported.\n// Since CSS.supports is supported on all but Edge@12 and IE and touch-action\n// is supported on both Edge@12 and IE if CSS.supports is not available that means that\n// touch-action will be supported\nlet cachedSupportsTouchActionNone = false;\n\nfunction doesSupportTouchActionNone() {\n  if (cachedSupportsTouchActionNone === undefined) {\n    if (typeof CSS !== 'undefined' && typeof CSS.supports === 'function') {\n      cachedSupportsTouchActionNone = CSS.supports('touch-action', 'none');\n    } else {\n      cachedSupportsTouchActionNone = true;\n    }\n  }\n\n  return cachedSupportsTouchActionNone;\n}\n\nfunction trackFinger(event, currentTouchId) {\n  if (currentTouchId !== undefined && event.changedTouches) {\n    for (let i = 0; i < event.changedTouches.length; i += 1) {\n      const touch = event.changedTouches[i];\n\n      if (touch.identifier === currentTouchId) {\n        return {\n          x: touch.clientX,\n          y: touch.clientY\n        };\n      }\n    }\n\n    return false;\n  }\n\n  return {\n    x: event.clientX,\n    y: event.clientY\n  };\n}\n\nfunction computeNewWidth(initialOffsetToSeparator, clickX, columnBounds, separatorSide) {\n  let newWidth = initialOffsetToSeparator;\n\n  if (separatorSide === GridColumnHeaderSeparatorSides.Right) {\n    newWidth += clickX - columnBounds.left;\n  } else {\n    newWidth += columnBounds.right - clickX;\n  }\n\n  return newWidth;\n}\n\nfunction computeOffsetToSeparator(clickX, columnBounds, separatorSide) {\n  if (separatorSide === GridColumnHeaderSeparatorSides.Left) {\n    return clickX - columnBounds.left;\n  }\n\n  return columnBounds.right - clickX;\n}\n\nfunction getSeparatorSide(element) {\n  return element.classList.contains(gridClasses['columnSeparator--sideRight']) ? GridColumnHeaderSeparatorSides.Right : GridColumnHeaderSeparatorSides.Left;\n}\n\nexport const columnResizeStateInitializer = state => _extends({}, state, {\n  columnResize: {\n    resizingColumnField: ''\n  }\n});\n/**\n * Only available in DataGridPro\n * @requires useGridColumns (method, event)\n * TODO: improve experience for last column\n */\n\nexport const useGridColumnResize = (apiRef, props) => {\n  const logger = useGridLogger(apiRef, 'useGridColumnResize');\n  const colDefRef = React.useRef();\n  const colElementRef = React.useRef();\n  const colCellElementsRef = React.useRef(); // To improve accessibility, the separator has padding on both sides.\n  // Clicking inside the padding area should be treated as a click in the separator.\n  // This ref stores the offset between the click and the separator.\n\n  const initialOffsetToSeparator = React.useRef();\n  const separatorSide = React.useRef();\n  const stopResizeEventTimeout = React.useRef();\n  const touchId = React.useRef();\n\n  const updateWidth = newWidth => {\n    logger.debug(`Updating width to ${newWidth} for col ${colDefRef.current.field}`);\n    colDefRef.current.computedWidth = newWidth;\n    colDefRef.current.width = newWidth;\n    colDefRef.current.flex = undefined;\n    colElementRef.current.style.width = `${newWidth}px`;\n    colElementRef.current.style.minWidth = `${newWidth}px`;\n    colElementRef.current.style.maxWidth = `${newWidth}px`;\n    colCellElementsRef.current.forEach(element => {\n      const div = element;\n      div.style.width = `${newWidth}px`;\n      div.style.minWidth = `${newWidth}px`;\n      div.style.maxWidth = `${newWidth}px`;\n    });\n  };\n\n  const handleResizeMouseUp = useEventCallback(nativeEvent => {\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    stopListening();\n    apiRef.current.updateColumn(colDefRef.current);\n    clearTimeout(stopResizeEventTimeout.current);\n    stopResizeEventTimeout.current = setTimeout(() => {\n      apiRef.current.publishEvent(GridEvents.columnResizeStop, null, nativeEvent);\n\n      if (colDefRef.current) {\n        var _colDefRef$current;\n\n        apiRef.current.publishEvent(GridEvents.columnWidthChange, {\n          element: colElementRef.current,\n          colDef: colDefRef.current,\n          width: (_colDefRef$current = colDefRef.current) == null ? void 0 : _colDefRef$current.computedWidth\n        }, nativeEvent);\n      }\n    });\n    logger.debug(`Updating col ${colDefRef.current.field} with new width: ${colDefRef.current.width}`);\n  });\n  const handleResizeMouseMove = useEventCallback(nativeEvent => {\n    // Cancel move in case some other element consumed a mouseup event and it was not fired.\n    if (nativeEvent.buttons === 0) {\n      handleResizeMouseUp(nativeEvent);\n      return;\n    }\n\n    let newWidth = computeNewWidth(initialOffsetToSeparator.current, nativeEvent.clientX, colElementRef.current.getBoundingClientRect(), separatorSide.current);\n    newWidth = clamp(newWidth, colDefRef.current.minWidth, colDefRef.current.maxWidth);\n    updateWidth(newWidth);\n    const params = {\n      element: colElementRef.current,\n      colDef: colDefRef.current,\n      width: newWidth\n    };\n    apiRef.current.publishEvent(GridEvents.columnResize, params, nativeEvent);\n  });\n  const handleColumnResizeMouseDown = useEventCallback(({\n    colDef\n  }, event) => {\n    var _apiRef$current$colum;\n\n    // Only handle left clicks\n    if (event.button !== 0) {\n      return;\n    } // Skip if the column isn't resizable\n\n\n    if (!event.currentTarget.classList.contains(gridClasses['columnSeparator--resizable'])) {\n      return;\n    } // Avoid text selection\n\n\n    event.preventDefault();\n    logger.debug(`Start Resize on col ${colDef.field}`);\n    apiRef.current.publishEvent(GridEvents.columnResizeStart, {\n      field: colDef.field\n    }, event);\n    colDefRef.current = colDef;\n    colElementRef.current = (_apiRef$current$colum = apiRef.current.columnHeadersContainerElementRef) == null ? void 0 : _apiRef$current$colum.current.querySelector(`[data-field=\"${colDef.field}\"]`);\n    colCellElementsRef.current = findGridCellElementsFromCol(colElementRef.current);\n    const doc = ownerDocument(apiRef.current.rootElementRef.current);\n    doc.body.style.cursor = 'col-resize';\n    separatorSide.current = getSeparatorSide(event.currentTarget);\n    initialOffsetToSeparator.current = computeOffsetToSeparator(event.clientX, colElementRef.current.getBoundingClientRect(), separatorSide.current);\n    doc.addEventListener('mousemove', handleResizeMouseMove);\n    doc.addEventListener('mouseup', handleResizeMouseUp);\n  });\n  const handleTouchEnd = useEventCallback(nativeEvent => {\n    const finger = trackFinger(nativeEvent, touchId.current);\n\n    if (!finger) {\n      return;\n    } // eslint-disable-next-line @typescript-eslint/no-use-before-define\n\n\n    stopListening();\n    apiRef.current.updateColumn(colDefRef.current);\n    clearTimeout(stopResizeEventTimeout.current);\n    stopResizeEventTimeout.current = setTimeout(() => {\n      apiRef.current.publishEvent(GridEvents.columnResizeStop, null, nativeEvent);\n    });\n    logger.debug(`Updating col ${colDefRef.current.field} with new width: ${colDefRef.current.width}`);\n  });\n  const handleTouchMove = useEventCallback(nativeEvent => {\n    const finger = trackFinger(nativeEvent, touchId.current);\n\n    if (!finger) {\n      return;\n    } // Cancel move in case some other element consumed a touchmove event and it was not fired.\n\n\n    if (nativeEvent.type === 'mousemove' && nativeEvent.buttons === 0) {\n      handleTouchEnd(nativeEvent);\n      return;\n    }\n\n    let newWidth = computeNewWidth(initialOffsetToSeparator.current, finger.x, colElementRef.current.getBoundingClientRect(), separatorSide.current);\n    newWidth = clamp(newWidth, colDefRef.current.minWidth, colDefRef.current.maxWidth);\n    updateWidth(newWidth);\n    const params = {\n      element: colElementRef.current,\n      colDef: colDefRef.current,\n      width: newWidth\n    };\n    apiRef.current.publishEvent(GridEvents.columnResize, params, nativeEvent);\n  });\n  const handleTouchStart = useEventCallback(event => {\n    var _apiRef$current$colum2;\n\n    const cellSeparator = findParentElementFromClassName(event.target, gridClasses['columnSeparator--resizable']); // Let the event bubble if the target is not a col separator\n\n    if (!cellSeparator) {\n      return;\n    } // If touch-action: none; is not supported we need to prevent the scroll manually.\n\n\n    if (!doesSupportTouchActionNone()) {\n      event.preventDefault();\n    }\n\n    const touch = event.changedTouches[0];\n\n    if (touch != null) {\n      // A number that uniquely identifies the current finger in the touch session.\n      touchId.current = touch.identifier;\n    }\n\n    colElementRef.current = findParentElementFromClassName(event.target, gridClasses.columnHeader);\n    const field = getFieldFromHeaderElem(colElementRef.current);\n    const colDef = apiRef.current.getColumn(field);\n    logger.debug(`Start Resize on col ${colDef.field}`);\n    apiRef.current.publishEvent(GridEvents.columnResizeStart, {\n      field\n    }, event);\n    colDefRef.current = colDef;\n    colElementRef.current = findHeaderElementFromField((_apiRef$current$colum2 = apiRef.current.columnHeadersElementRef) == null ? void 0 : _apiRef$current$colum2.current, colDef.field);\n    colCellElementsRef.current = findGridCellElementsFromCol(colElementRef.current);\n    separatorSide.current = getSeparatorSide(event.target);\n    initialOffsetToSeparator.current = computeOffsetToSeparator(touch.clientX, colElementRef.current.getBoundingClientRect(), separatorSide.current);\n    const doc = ownerDocument(event.currentTarget);\n    doc.addEventListener('touchmove', handleTouchMove);\n    doc.addEventListener('touchend', handleTouchEnd);\n  });\n  const stopListening = React.useCallback(() => {\n    const doc = ownerDocument(apiRef.current.rootElementRef.current);\n    doc.body.style.removeProperty('cursor');\n    doc.removeEventListener('mousemove', handleResizeMouseMove);\n    doc.removeEventListener('mouseup', handleResizeMouseUp);\n    doc.removeEventListener('touchmove', handleTouchMove);\n    doc.removeEventListener('touchend', handleTouchEnd);\n  }, [apiRef, handleResizeMouseMove, handleResizeMouseUp, handleTouchMove, handleTouchEnd]);\n  const handleResizeStart = React.useCallback(({\n    field\n  }) => {\n    apiRef.current.setState(state => _extends({}, state, {\n      columnResize: _extends({}, state.columnResize, {\n        resizingColumnField: field\n      })\n    }));\n    apiRef.current.forceUpdate();\n  }, [apiRef]);\n  const handleResizeStop = React.useCallback(() => {\n    apiRef.current.setState(state => _extends({}, state, {\n      columnResize: _extends({}, state.columnResize, {\n        resizingColumnField: ''\n      })\n    }));\n    apiRef.current.forceUpdate();\n  }, [apiRef]);\n  React.useEffect(() => {\n    return () => {\n      clearTimeout(stopResizeEventTimeout.current);\n      stopListening();\n    };\n  }, [apiRef, handleTouchStart, stopListening]);\n  useGridNativeEventListener(apiRef, () => {\n    var _apiRef$current$colum3;\n\n    return (_apiRef$current$colum3 = apiRef.current.columnHeadersElementRef) == null ? void 0 : _apiRef$current$colum3.current;\n  }, 'touchstart', handleTouchStart, {\n    passive: doesSupportTouchActionNone()\n  });\n  useGridApiEventHandler(apiRef, GridEvents.columnSeparatorMouseDown, handleColumnResizeMouseDown);\n  useGridApiEventHandler(apiRef, GridEvents.columnResizeStart, handleResizeStart);\n  useGridApiEventHandler(apiRef, GridEvents.columnResizeStop, handleResizeStop);\n  useGridApiOptionHandler(apiRef, GridEvents.columnResize, props.onColumnResize);\n  useGridApiOptionHandler(apiRef, GridEvents.columnWidthChange, props.onColumnWidthChange);\n};"]},"metadata":{},"sourceType":"module"}