{"ast":null,"code":"import * as React from 'react';\nimport { useGridSelector, GridEvents, useGridApiEventHandler, useGridApiOptionHandler, gridVisibleColumnDefinitionsSelector, gridRowsMetaSelector } from '@mui/x-data-grid';\nimport { useGridVisibleRows } from '@mui/x-data-grid/internals';\n/**\n * Only available in DataGridPro\n * @requires useGridColumns (state)\n * @requires useGridDimensions (method) - can be after\n * @requires useGridScroll (method\n */\n\nexport const useGridInfiniteLoader = (apiRef, props) => {\n  const visibleColumns = useGridSelector(apiRef, gridVisibleColumnDefinitionsSelector);\n  const currentPage = useGridVisibleRows(apiRef, props);\n  const rowsMeta = useGridSelector(apiRef, gridRowsMetaSelector);\n  const contentHeight = Math.max(rowsMeta.currentPageTotalHeight, 1);\n  const isInScrollBottomArea = React.useRef(false);\n  const handleRowsScrollEnd = React.useCallback(scrollPosition => {\n    const dimensions = apiRef.current.getRootDimensions();\n\n    if (!dimensions) {\n      return;\n    }\n\n    const scrollPositionBottom = scrollPosition.top + dimensions.viewportOuterSize.height;\n    const viewportPageSize = apiRef.current.unstable_getViewportPageSize();\n\n    if (scrollPositionBottom < contentHeight - props.scrollEndThreshold) {\n      isInScrollBottomArea.current = false;\n    }\n\n    if (scrollPositionBottom >= contentHeight - props.scrollEndThreshold && !isInScrollBottomArea.current) {\n      const rowScrollEndParam = {\n        visibleColumns,\n        viewportPageSize,\n        virtualRowsCount: currentPage.rows.length\n      };\n      apiRef.current.publishEvent(GridEvents.rowsScrollEnd, rowScrollEndParam);\n      isInScrollBottomArea.current = true;\n    }\n  }, [contentHeight, props.scrollEndThreshold, visibleColumns, apiRef, currentPage.rows.length]);\n  const handleGridScroll = React.useCallback(_ref => {\n    let {\n      left,\n      top\n    } = _ref;\n    handleRowsScrollEnd({\n      left,\n      top\n    });\n  }, [handleRowsScrollEnd]);\n  useGridApiEventHandler(apiRef, GridEvents.rowsScroll, handleGridScroll);\n  useGridApiOptionHandler(apiRef, GridEvents.rowsScrollEnd, props.onRowsScrollEnd);\n};","map":{"version":3,"sources":["C:/Users/Admin/Documents/KRS/Application1/client/node_modules/@mui/x-data-grid-pro/hooks/features/infiniteLoader/useGridInfiniteLoader.js"],"names":["React","useGridSelector","GridEvents","useGridApiEventHandler","useGridApiOptionHandler","gridVisibleColumnDefinitionsSelector","gridRowsMetaSelector","useGridVisibleRows","useGridInfiniteLoader","apiRef","props","visibleColumns","currentPage","rowsMeta","contentHeight","Math","max","currentPageTotalHeight","isInScrollBottomArea","useRef","handleRowsScrollEnd","useCallback","scrollPosition","dimensions","current","getRootDimensions","scrollPositionBottom","top","viewportOuterSize","height","viewportPageSize","unstable_getViewportPageSize","scrollEndThreshold","rowScrollEndParam","virtualRowsCount","rows","length","publishEvent","rowsScrollEnd","handleGridScroll","left","rowsScroll","onRowsScrollEnd"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,eAAT,EAA0BC,UAA1B,EAAsCC,sBAAtC,EAA8DC,uBAA9D,EAAuFC,oCAAvF,EAA6HC,oBAA7H,QAAyJ,kBAAzJ;AACA,SAASC,kBAAT,QAAmC,4BAAnC;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,qBAAqB,GAAG,CAACC,MAAD,EAASC,KAAT,KAAmB;AACtD,QAAMC,cAAc,GAAGV,eAAe,CAACQ,MAAD,EAASJ,oCAAT,CAAtC;AACA,QAAMO,WAAW,GAAGL,kBAAkB,CAACE,MAAD,EAASC,KAAT,CAAtC;AACA,QAAMG,QAAQ,GAAGZ,eAAe,CAACQ,MAAD,EAASH,oBAAT,CAAhC;AACA,QAAMQ,aAAa,GAAGC,IAAI,CAACC,GAAL,CAASH,QAAQ,CAACI,sBAAlB,EAA0C,CAA1C,CAAtB;AACA,QAAMC,oBAAoB,GAAGlB,KAAK,CAACmB,MAAN,CAAa,KAAb,CAA7B;AACA,QAAMC,mBAAmB,GAAGpB,KAAK,CAACqB,WAAN,CAAkBC,cAAc,IAAI;AAC9D,UAAMC,UAAU,GAAGd,MAAM,CAACe,OAAP,CAAeC,iBAAf,EAAnB;;AAEA,QAAI,CAACF,UAAL,EAAiB;AACf;AACD;;AAED,UAAMG,oBAAoB,GAAGJ,cAAc,CAACK,GAAf,GAAqBJ,UAAU,CAACK,iBAAX,CAA6BC,MAA/E;AACA,UAAMC,gBAAgB,GAAGrB,MAAM,CAACe,OAAP,CAAeO,4BAAf,EAAzB;;AAEA,QAAIL,oBAAoB,GAAGZ,aAAa,GAAGJ,KAAK,CAACsB,kBAAjD,EAAqE;AACnEd,MAAAA,oBAAoB,CAACM,OAArB,GAA+B,KAA/B;AACD;;AAED,QAAIE,oBAAoB,IAAIZ,aAAa,GAAGJ,KAAK,CAACsB,kBAA9C,IAAoE,CAACd,oBAAoB,CAACM,OAA9F,EAAuG;AACrG,YAAMS,iBAAiB,GAAG;AACxBtB,QAAAA,cADwB;AAExBmB,QAAAA,gBAFwB;AAGxBI,QAAAA,gBAAgB,EAAEtB,WAAW,CAACuB,IAAZ,CAAiBC;AAHX,OAA1B;AAKA3B,MAAAA,MAAM,CAACe,OAAP,CAAea,YAAf,CAA4BnC,UAAU,CAACoC,aAAvC,EAAsDL,iBAAtD;AACAf,MAAAA,oBAAoB,CAACM,OAArB,GAA+B,IAA/B;AACD;AACF,GAvB2B,EAuBzB,CAACV,aAAD,EAAgBJ,KAAK,CAACsB,kBAAtB,EAA0CrB,cAA1C,EAA0DF,MAA1D,EAAkEG,WAAW,CAACuB,IAAZ,CAAiBC,MAAnF,CAvByB,CAA5B;AAwBA,QAAMG,gBAAgB,GAAGvC,KAAK,CAACqB,WAAN,CAAkB,QAGrC;AAAA,QAHsC;AAC1CmB,MAAAA,IAD0C;AAE1Cb,MAAAA;AAF0C,KAGtC;AACJP,IAAAA,mBAAmB,CAAC;AAClBoB,MAAAA,IADkB;AAElBb,MAAAA;AAFkB,KAAD,CAAnB;AAID,GARwB,EAQtB,CAACP,mBAAD,CARsB,CAAzB;AASAjB,EAAAA,sBAAsB,CAACM,MAAD,EAASP,UAAU,CAACuC,UAApB,EAAgCF,gBAAhC,CAAtB;AACAnC,EAAAA,uBAAuB,CAACK,MAAD,EAASP,UAAU,CAACoC,aAApB,EAAmC5B,KAAK,CAACgC,eAAzC,CAAvB;AACD,CAzCM","sourcesContent":["import * as React from 'react';\nimport { useGridSelector, GridEvents, useGridApiEventHandler, useGridApiOptionHandler, gridVisibleColumnDefinitionsSelector, gridRowsMetaSelector } from '@mui/x-data-grid';\nimport { useGridVisibleRows } from '@mui/x-data-grid/internals';\n\n/**\n * Only available in DataGridPro\n * @requires useGridColumns (state)\n * @requires useGridDimensions (method) - can be after\n * @requires useGridScroll (method\n */\nexport const useGridInfiniteLoader = (apiRef, props) => {\n  const visibleColumns = useGridSelector(apiRef, gridVisibleColumnDefinitionsSelector);\n  const currentPage = useGridVisibleRows(apiRef, props);\n  const rowsMeta = useGridSelector(apiRef, gridRowsMetaSelector);\n  const contentHeight = Math.max(rowsMeta.currentPageTotalHeight, 1);\n  const isInScrollBottomArea = React.useRef(false);\n  const handleRowsScrollEnd = React.useCallback(scrollPosition => {\n    const dimensions = apiRef.current.getRootDimensions();\n\n    if (!dimensions) {\n      return;\n    }\n\n    const scrollPositionBottom = scrollPosition.top + dimensions.viewportOuterSize.height;\n    const viewportPageSize = apiRef.current.unstable_getViewportPageSize();\n\n    if (scrollPositionBottom < contentHeight - props.scrollEndThreshold) {\n      isInScrollBottomArea.current = false;\n    }\n\n    if (scrollPositionBottom >= contentHeight - props.scrollEndThreshold && !isInScrollBottomArea.current) {\n      const rowScrollEndParam = {\n        visibleColumns,\n        viewportPageSize,\n        virtualRowsCount: currentPage.rows.length\n      };\n      apiRef.current.publishEvent(GridEvents.rowsScrollEnd, rowScrollEndParam);\n      isInScrollBottomArea.current = true;\n    }\n  }, [contentHeight, props.scrollEndThreshold, visibleColumns, apiRef, currentPage.rows.length]);\n  const handleGridScroll = React.useCallback(({\n    left,\n    top\n  }) => {\n    handleRowsScrollEnd({\n      left,\n      top\n    });\n  }, [handleRowsScrollEnd]);\n  useGridApiEventHandler(apiRef, GridEvents.rowsScroll, handleGridScroll);\n  useGridApiOptionHandler(apiRef, GridEvents.rowsScrollEnd, props.onRowsScrollEnd);\n};"]},"metadata":{},"sourceType":"module"}