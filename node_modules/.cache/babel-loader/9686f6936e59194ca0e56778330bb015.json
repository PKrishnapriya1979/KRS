{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Documents\\\\KRS\\\\Application1\\\\client\\\\src\\\\components\\\\task_accepted.js\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/js/bootstrap.bundle.min';\nimport '@fortawesome/fontawesome-free/css/all.min.css';\nimport './style.css';\nimport Button from '@mui/material/Button';\nimport React, { location } from 'react';\nimport axios from 'axios';\nimport { DataGrid, gridCheckboxSelectionColDef } from '@material-ui/data-grid';\nimport { Redirect, Link } from 'react-router-dom';\nimport { Report_upload } from './Report_upload';\nimport { Addtask } from '/';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport class Taskaccepted extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.getdata = () => {\n      this.userdata = sessionStorage.getItem('userdata');\n\n      if (sessionStorage.length === 0) {\n        this.empid = '';\n\n        /*#__PURE__*/\n        _jsxDEV(Redirect, {\n          to: \"/\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 14\n        }, this);\n      } else {\n        this.userdata = JSON.parse(this.userdata);\n        this.empid = this.userdata.empid;\n        console.log(this.empid);\n      }\n\n      axios.post('http://localhost:3001/taskassigned', {\n        empid: this.empid\n      }).then(response => {\n        this.setState({\n          loading: false,\n          task_acc: response.data\n        });\n        console.log(this.state.task_acc);\n      });\n    };\n\n    this.state = {\n      task_acc: []\n    };\n  }\n\n  componentDidMount() {\n    this.getdata(); //const {sel_task} = this.props.location.state;\n  }\n\n  splittask() {\n    /*#__PURE__*/\n    _jsxDEV(Task, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 5\n    }, this);\n  }\n\n  render() {\n    const t_data = this.state.task_acc;\n    const task_acc_columns = [{\n      headerName: 'ID',\n      field: 'pr_id',\n      width: 100\n    }, {\n      headerName: 'Task Name',\n      field: \"task_name\",\n      width: 230,\n      renderCell: cellValues => {\n        return /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          color: \"primary\",\n          onClick: splittask,\n          children: cellValues.value\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 15\n        }, this);\n      }\n    }, {\n      headerName: 'Assigned By',\n      field: 'empname',\n      width: 160\n    }, {\n      headerName: 'Assigned Date',\n      field: 'ass_date',\n      width: 150\n    }, {\n      headerName: 'Closing Date',\n      field: 'target_date',\n      width: 150\n    }, {\n      headerName: 'Status',\n      field: 'pr_status',\n      width: 150\n    }, {\n      headerName: 'Upload Report',\n      field: \"ur\",\n      width: 170,\n      renderCell: cellValues => {\n        console.log(this.state.task_acc);\n        return /*#__PURE__*/_jsxDEV(Link, {\n          to: \"/report\",\n          children: \"Upload Report\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 20\n        }, this);\n      }\n    }];\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        height: 250,\n        width: window.innerWidth\n      },\n      children: /*#__PURE__*/_jsxDEV(DataGrid, {\n        id: \"task_display\",\n        getRowId: rows => rows.pr_id,\n        rows: t_data,\n        columns: task_acc_columns\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Admin/Documents/KRS/Application1/client/src/components/task_accepted.js"],"names":["Button","React","location","axios","DataGrid","gridCheckboxSelectionColDef","Redirect","Link","Report_upload","Addtask","Taskaccepted","Component","constructor","props","getdata","userdata","sessionStorage","getItem","length","empid","JSON","parse","console","log","post","then","response","setState","loading","task_acc","data","state","componentDidMount","splittask","render","t_data","task_acc_columns","headerName","field","width","renderCell","cellValues","value","height","window","innerWidth","rows","pr_id"],"mappings":"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","sourcesContent":["import 'bootstrap/dist/css/bootstrap.min.css';\r\nimport 'bootstrap/dist/js/bootstrap.bundle.min';\r\nimport '@fortawesome/fontawesome-free/css/all.min.css';\r\nimport './style.css';\r\nimport Button from '@mui/material/Button';\r\nimport React, {location} from 'react';\r\nimport axios from 'axios';\r\nimport {DataGrid,gridCheckboxSelectionColDef } from '@material-ui/data-grid'\r\nimport { Redirect,Link} from 'react-router-dom';\r\nimport { Report_upload } from './Report_upload';\r\nimport {Addtask} from '/'\r\nexport class Taskaccepted extends React.Component {  \r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      task_acc : [],\r\n    }  \r\n   }\r\n  componentDidMount(){\r\n    this.getdata();\r\n    //const {sel_task} = this.props.location.state;\r\n  }\r\n  splittask()\r\n  {\r\n    <Task/>\r\n  }\r\n  getdata=()=>\r\n    {      \r\n        this.userdata = sessionStorage.getItem('userdata');\r\n        if (sessionStorage.length === 0 )\r\n           { this.empid = '';\r\n             <Redirect to = '/'></Redirect>}\r\n        else {\r\n           this.userdata = JSON.parse(this.userdata);\r\n           this.empid= this.userdata.empid;\r\n           console.log(this.empid);\r\n          }  \r\n        axios.post('http://localhost:3001/taskassigned',{empid:this.empid}).then((response)=>{\r\n                this.setState({loading:false,task_acc:response.data});\r\n                   console.log(this.state.task_acc);\r\n      });             \r\n    }\r\n    render() {\r\n      const t_data = this.state.task_acc;        \r\n      const task_acc_columns = [\r\n        {\r\n          headerName : 'ID',\r\n          field  :'pr_id',\r\n          width: 100\r\n        },\r\n        {\r\n          headerName : 'Task Name',\r\n          field  :\"task_name\",\r\n          width: 230,\r\n          renderCell: (cellValues) => {\r\n            return (\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n              onClick = {splittask }>\r\n                {cellValues.value}\r\n              </Button>\r\n            );\r\n          }\r\n        },\r\n        {\r\n          headerName : 'Assigned By',\r\n          field :'empname',\r\n          width: 160\r\n        },\r\n        {\r\n          headerName : 'Assigned Date',\r\n          field :'ass_date',\r\n          width: 150\r\n        },\r\n        {\r\n          headerName : 'Closing Date',\r\n          field :'target_date',\r\n          width: 150\r\n        },\r\n        {\r\n          headerName : 'Status',\r\n          field :'pr_status',\r\n          width: 150\r\n        },\r\n        {\r\n          headerName : 'Upload Report',\r\n          field  :\"ur\",\r\n          width: 170,\r\n          renderCell:(cellValues)=>{          \r\n            console.log(this.state.task_acc);\r\n            return <Link to = '/report'>Upload Report</Link>\r\n          }\r\n        }      \r\n       ]; \r\n    return(\r\n      <div style = {{height:250,width:window.innerWidth}}>\r\n        <DataGrid id = \"task_display\" \r\n        getRowId={rows => rows.pr_id}\r\n        rows = {t_data}\r\n        columns = {task_acc_columns}\r\n      />\r\n      </div>\r\n    );\r\n  };   \r\n}  "]},"metadata":{},"sourceType":"module"}