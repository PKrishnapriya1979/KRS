{"ast":null,"code":"import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"className\", \"disableVirtualization\"];\nimport * as React from 'react';\nimport { styled, alpha } from '@mui/material/styles';\nimport Box from '@mui/material/Box';\nimport { unstable_composeClasses as composeClasses } from '@mui/material';\nimport { useGridSelector, getDataGridUtilityClass, gridClasses, gridVisibleColumnFieldsSelector, gridRowsMetaSelector, useGridApiEventHandler, GridEvents } from '@mui/x-data-grid';\nimport { GridVirtualScroller, GridVirtualScrollerContent, GridVirtualScrollerRenderZone, useGridVirtualScroller } from '@mui/x-data-grid/internals';\nimport { useGridApiContext } from '../hooks/utils/useGridApiContext';\nimport { useGridRootProps } from '../hooks/utils/useGridRootProps';\nimport { gridPinnedColumnsSelector, GridPinnedPosition } from '../hooks/features/columnPinning';\nimport { gridDetailPanelExpandedRowsContentCacheSelector, gridDetailPanelExpandedRowsHeightCacheSelector, gridDetailPanelExpandedRowIdsSelector } from '../hooks/features/detailPanel';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport const filterColumns = (pinnedColumns, columns) => {\n  var _pinnedColumns$left, _pinnedColumns$right;\n\n  if (!Array.isArray(pinnedColumns.left) && !Array.isArray(pinnedColumns.right)) {\n    return [[], []];\n  }\n\n  if (((_pinnedColumns$left = pinnedColumns.left) == null ? void 0 : _pinnedColumns$left.length) === 0 && ((_pinnedColumns$right = pinnedColumns.right) == null ? void 0 : _pinnedColumns$right.length) === 0) {\n    return [[], []];\n  }\n\n  const filter = (newPinnedColumns, remainingColumns) => {\n    if (!Array.isArray(newPinnedColumns)) {\n      return [];\n    }\n\n    return newPinnedColumns.filter(field => remainingColumns.includes(field));\n  };\n\n  const leftPinnedColumns = filter(pinnedColumns.left, columns);\n  const columnsWithoutLeftPinnedColumns = columns.filter( // Filter out from the remaining columns those columns already pinned to the left\n  field => !leftPinnedColumns.includes(field));\n  const rightPinnedColumns = filter(pinnedColumns.right, columnsWithoutLeftPinnedColumns);\n  return [leftPinnedColumns, rightPinnedColumns];\n};\n\nconst useUtilityClasses = ownerState => {\n  const {\n    classes,\n    leftPinnedColumns,\n    rightPinnedColumns\n  } = ownerState;\n  const slots = {\n    leftPinnedColumns: ['pinnedColumns', leftPinnedColumns && leftPinnedColumns.length > 0 && 'pinnedColumns--left'],\n    rightPinnedColumns: ['pinnedColumns', rightPinnedColumns && rightPinnedColumns.length > 0 && 'pinnedColumns--right'],\n    detailPanels: ['detailPanels'],\n    detailPanel: ['detailPanel']\n  };\n  return composeClasses(slots, getDataGridUtilityClass, classes);\n}; // Inspired by https://github.com/material-components/material-components-ios/blob/bca36107405594d5b7b16265a5b0ed698f85a5ee/components/Elevation/src/UIColor%2BMaterialElevation.m#L61\n\n\nconst getOverlayAlpha = elevation => {\n  let alphaValue;\n\n  if (elevation < 1) {\n    alphaValue = 5.11916 * elevation ** 2;\n  } else {\n    alphaValue = 4.5 * Math.log(elevation + 1) + 2;\n  }\n\n  return alphaValue / 100;\n};\n\nconst VirtualScrollerDetailPanels = styled('div', {\n  name: 'MuiDataGrid',\n  slot: 'DetailPanels',\n  overridesResolver: (props, styles) => styles.detailPanels\n})({});\nconst VirtualScrollerDetailPanel = styled(Box, {\n  name: 'MuiDataGrid',\n  slot: 'DetailPanel',\n  overridesResolver: (props, styles) => styles.detailPanel\n})(_ref => {\n  let {\n    theme\n  } = _ref;\n  return {\n    zIndex: 2,\n    width: '100%',\n    position: 'absolute',\n    backgroundColor: theme.palette.background.default\n  };\n});\nconst VirtualScrollerPinnedColumns = styled('div', {\n  name: 'MuiDataGrid',\n  slot: 'PinnedColumns',\n  overridesResolver: (props, styles) => [{\n    [`&.${gridClasses['pinnedColumns--left']}`]: styles['pinnedColumns--left']\n  }, {\n    [`&.${gridClasses['pinnedColumns--right']}`]: styles['pinnedColumns--right']\n  }, styles.pinnedColumns]\n})(_ref2 => {\n  let {\n    theme,\n    ownerState\n  } = _ref2;\n  return _extends({\n    position: 'sticky',\n    overflow: 'hidden',\n    zIndex: 1,\n    boxShadow: theme.shadows[2],\n    backgroundColor: theme.palette.background.default\n  }, theme.palette.mode === 'dark' && {\n    backgroundImage: `linear-gradient(${alpha('#fff', getOverlayAlpha(2))}, ${alpha('#fff', getOverlayAlpha(2))})`\n  }, ownerState.side === GridPinnedPosition.left && {\n    left: 0,\n    float: 'left'\n  }, ownerState.side === GridPinnedPosition.right && {\n    right: 0,\n    float: 'right'\n  });\n});\nconst DataGridProVirtualScroller = /*#__PURE__*/React.forwardRef(function DataGridProVirtualScroller(props, ref) {\n  const other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const apiRef = useGridApiContext();\n  const rootProps = useGridRootProps();\n  const visibleColumnFields = useGridSelector(apiRef, gridVisibleColumnFieldsSelector);\n  const expandedRowIds = useGridSelector(apiRef, gridDetailPanelExpandedRowIdsSelector);\n  const detailPanelsContent = useGridSelector(apiRef, gridDetailPanelExpandedRowsContentCacheSelector);\n  const detailPanelsHeights = useGridSelector(apiRef, gridDetailPanelExpandedRowsHeightCacheSelector);\n  const leftColumns = React.useRef(null);\n  const rightColumns = React.useRef(null);\n  const handleRenderZonePositioning = React.useCallback(_ref3 => {\n    let {\n      top\n    } = _ref3;\n\n    if (leftColumns.current) {\n      leftColumns.current.style.transform = `translate3d(0px, ${top}px, 0px)`;\n    }\n\n    if (rightColumns.current) {\n      rightColumns.current.style.transform = `translate3d(0px, ${top}px, 0px)`;\n    }\n  }, []);\n\n  const getRowProps = id => {\n    if (!expandedRowIds.includes(id)) {\n      return null;\n    }\n\n    const height = detailPanelsHeights[id];\n    return {\n      style: {\n        marginBottom: height\n      }\n    };\n  };\n\n  const pinnedColumns = useGridSelector(apiRef, gridPinnedColumnsSelector);\n  const [leftPinnedColumns, rightPinnedColumns] = filterColumns(pinnedColumns, visibleColumnFields);\n  const ownerState = {\n    classes: rootProps.classes,\n    leftPinnedColumns,\n    rightPinnedColumns\n  };\n  const classes = useUtilityClasses(ownerState);\n  const {\n    renderContext,\n    getRows,\n    getRootProps,\n    getContentProps,\n    getRenderZoneProps,\n    updateRenderZonePosition\n  } = useGridVirtualScroller(_extends({\n    ref,\n    renderZoneMinColumnIndex: leftPinnedColumns.length,\n    renderZoneMaxColumnIndex: visibleColumnFields.length - rightPinnedColumns.length,\n    onRenderZonePositioning: handleRenderZonePositioning,\n    getRowProps\n  }, props));\n  const refreshRenderZonePosition = React.useCallback(() => {\n    if (renderContext) {\n      updateRenderZonePosition(renderContext);\n    }\n  }, [renderContext, updateRenderZonePosition]);\n  useGridApiEventHandler(apiRef, GridEvents.columnWidthChange, refreshRenderZonePosition);\n  useGridApiEventHandler(apiRef, GridEvents.columnOrderChange, refreshRenderZonePosition);\n  React.useEffect(() => {\n    refreshRenderZonePosition();\n  }, [refreshRenderZonePosition]);\n  const leftRenderContext = renderContext && leftPinnedColumns.length > 0 ? _extends({}, renderContext, {\n    firstColumnIndex: 0,\n    lastColumnIndex: leftPinnedColumns.length\n  }) : null;\n  const rightRenderContext = renderContext && rightPinnedColumns.length > 0 ? _extends({}, renderContext, {\n    firstColumnIndex: visibleColumnFields.length - rightPinnedColumns.length,\n    lastColumnIndex: visibleColumnFields.length\n  }) : null;\n  const contentProps = getContentProps();\n  const pinnedColumnsStyle = {\n    minHeight: contentProps.style.minHeight\n  };\n\n  const getDetailPanels = () => {\n    const panels = [];\n\n    if (rootProps.getDetailPanelContent == null) {\n      return panels;\n    }\n\n    const rowsMeta = gridRowsMetaSelector(apiRef.current.state);\n    const uniqueExpandedRowIds = Array.from(new Set([...expandedRowIds]).values());\n\n    for (let i = 0; i < uniqueExpandedRowIds.length; i += 1) {\n      const id = uniqueExpandedRowIds[i];\n      const content = detailPanelsContent[id]; // Check if the id exists in the current page\n\n      const rowIndex = apiRef.current.getRowIndexRelativeToVisibleRows(id);\n      const exists = rowIndex !== undefined;\n\n      if ( /*#__PURE__*/React.isValidElement(content) && exists) {\n        const height = detailPanelsHeights[id];\n        const sizes = apiRef.current.unstable_getRowInternalSizes(id);\n        const spacingTop = (sizes == null ? void 0 : sizes.spacingTop) || 0;\n        const top = rowsMeta.positions[rowIndex] + apiRef.current.unstable_getRowHeight(id) + spacingTop;\n        panels.push( /*#__PURE__*/_jsx(VirtualScrollerDetailPanel, {\n          style: {\n            top,\n            height\n          },\n          className: classes.detailPanel,\n          children: content\n        }, i));\n      }\n    }\n\n    return panels;\n  };\n\n  const detailPanels = getDetailPanels();\n  return /*#__PURE__*/_jsx(GridVirtualScroller, _extends({}, getRootProps(other), {\n    children: /*#__PURE__*/_jsxs(GridVirtualScrollerContent, _extends({}, contentProps, {\n      children: [leftRenderContext && /*#__PURE__*/_jsx(VirtualScrollerPinnedColumns, {\n        ref: leftColumns,\n        className: classes.leftPinnedColumns,\n        ownerState: {\n          side: GridPinnedPosition.left\n        },\n        style: pinnedColumnsStyle,\n        children: getRows({\n          renderContext: leftRenderContext,\n          minFirstColumn: leftRenderContext.firstColumnIndex,\n          maxLastColumn: leftRenderContext.lastColumnIndex,\n          availableSpace: 0\n        })\n      }), /*#__PURE__*/_jsx(GridVirtualScrollerRenderZone, _extends({}, getRenderZoneProps(), {\n        children: getRows({\n          renderContext\n        })\n      })), rightRenderContext && /*#__PURE__*/_jsx(VirtualScrollerPinnedColumns, {\n        ref: rightColumns,\n        ownerState: {\n          side: GridPinnedPosition.right\n        },\n        className: classes.rightPinnedColumns,\n        style: pinnedColumnsStyle,\n        children: getRows({\n          renderContext: rightRenderContext,\n          minFirstColumn: rightRenderContext.firstColumnIndex,\n          maxLastColumn: rightRenderContext.lastColumnIndex,\n          availableSpace: 0\n        })\n      }), detailPanels.length > 0 && /*#__PURE__*/_jsx(VirtualScrollerDetailPanels, {\n        className: classes.detailPanels,\n        children: detailPanels\n      })]\n    }))\n  }));\n});\nexport { DataGridProVirtualScroller };","map":{"version":3,"sources":["C:/Users/Admin/Documents/KRS/Application1/client/node_modules/@mui/x-data-grid-pro/components/DataGridProVirtualScroller.js"],"names":["_objectWithoutPropertiesLoose","_extends","_excluded","React","styled","alpha","Box","unstable_composeClasses","composeClasses","useGridSelector","getDataGridUtilityClass","gridClasses","gridVisibleColumnFieldsSelector","gridRowsMetaSelector","useGridApiEventHandler","GridEvents","GridVirtualScroller","GridVirtualScrollerContent","GridVirtualScrollerRenderZone","useGridVirtualScroller","useGridApiContext","useGridRootProps","gridPinnedColumnsSelector","GridPinnedPosition","gridDetailPanelExpandedRowsContentCacheSelector","gridDetailPanelExpandedRowsHeightCacheSelector","gridDetailPanelExpandedRowIdsSelector","jsx","_jsx","jsxs","_jsxs","filterColumns","pinnedColumns","columns","_pinnedColumns$left","_pinnedColumns$right","Array","isArray","left","right","length","filter","newPinnedColumns","remainingColumns","field","includes","leftPinnedColumns","columnsWithoutLeftPinnedColumns","rightPinnedColumns","useUtilityClasses","ownerState","classes","slots","detailPanels","detailPanel","getOverlayAlpha","elevation","alphaValue","Math","log","VirtualScrollerDetailPanels","name","slot","overridesResolver","props","styles","VirtualScrollerDetailPanel","theme","zIndex","width","position","backgroundColor","palette","background","default","VirtualScrollerPinnedColumns","overflow","boxShadow","shadows","mode","backgroundImage","side","float","DataGridProVirtualScroller","forwardRef","ref","other","apiRef","rootProps","visibleColumnFields","expandedRowIds","detailPanelsContent","detailPanelsHeights","leftColumns","useRef","rightColumns","handleRenderZonePositioning","useCallback","top","current","style","transform","getRowProps","id","height","marginBottom","renderContext","getRows","getRootProps","getContentProps","getRenderZoneProps","updateRenderZonePosition","renderZoneMinColumnIndex","renderZoneMaxColumnIndex","onRenderZonePositioning","refreshRenderZonePosition","columnWidthChange","columnOrderChange","useEffect","leftRenderContext","firstColumnIndex","lastColumnIndex","rightRenderContext","contentProps","pinnedColumnsStyle","minHeight","getDetailPanels","panels","getDetailPanelContent","rowsMeta","state","uniqueExpandedRowIds","from","Set","values","i","content","rowIndex","getRowIndexRelativeToVisibleRows","exists","undefined","isValidElement","sizes","unstable_getRowInternalSizes","spacingTop","positions","unstable_getRowHeight","push","className","children","minFirstColumn","maxLastColumn","availableSpace"],"mappings":"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","sourcesContent":["import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"className\", \"disableVirtualization\"];\nimport * as React from 'react';\nimport { styled, alpha } from '@mui/material/styles';\nimport Box from '@mui/material/Box';\nimport { unstable_composeClasses as composeClasses } from '@mui/material';\nimport { useGridSelector, getDataGridUtilityClass, gridClasses, gridVisibleColumnFieldsSelector, gridRowsMetaSelector, useGridApiEventHandler, GridEvents } from '@mui/x-data-grid';\nimport { GridVirtualScroller, GridVirtualScrollerContent, GridVirtualScrollerRenderZone, useGridVirtualScroller } from '@mui/x-data-grid/internals';\nimport { useGridApiContext } from '../hooks/utils/useGridApiContext';\nimport { useGridRootProps } from '../hooks/utils/useGridRootProps';\nimport { gridPinnedColumnsSelector, GridPinnedPosition } from '../hooks/features/columnPinning';\nimport { gridDetailPanelExpandedRowsContentCacheSelector, gridDetailPanelExpandedRowsHeightCacheSelector, gridDetailPanelExpandedRowIdsSelector } from '../hooks/features/detailPanel';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport const filterColumns = (pinnedColumns, columns) => {\n  var _pinnedColumns$left, _pinnedColumns$right;\n\n  if (!Array.isArray(pinnedColumns.left) && !Array.isArray(pinnedColumns.right)) {\n    return [[], []];\n  }\n\n  if (((_pinnedColumns$left = pinnedColumns.left) == null ? void 0 : _pinnedColumns$left.length) === 0 && ((_pinnedColumns$right = pinnedColumns.right) == null ? void 0 : _pinnedColumns$right.length) === 0) {\n    return [[], []];\n  }\n\n  const filter = (newPinnedColumns, remainingColumns) => {\n    if (!Array.isArray(newPinnedColumns)) {\n      return [];\n    }\n\n    return newPinnedColumns.filter(field => remainingColumns.includes(field));\n  };\n\n  const leftPinnedColumns = filter(pinnedColumns.left, columns);\n  const columnsWithoutLeftPinnedColumns = columns.filter( // Filter out from the remaining columns those columns already pinned to the left\n  field => !leftPinnedColumns.includes(field));\n  const rightPinnedColumns = filter(pinnedColumns.right, columnsWithoutLeftPinnedColumns);\n  return [leftPinnedColumns, rightPinnedColumns];\n};\n\nconst useUtilityClasses = ownerState => {\n  const {\n    classes,\n    leftPinnedColumns,\n    rightPinnedColumns\n  } = ownerState;\n  const slots = {\n    leftPinnedColumns: ['pinnedColumns', leftPinnedColumns && leftPinnedColumns.length > 0 && 'pinnedColumns--left'],\n    rightPinnedColumns: ['pinnedColumns', rightPinnedColumns && rightPinnedColumns.length > 0 && 'pinnedColumns--right'],\n    detailPanels: ['detailPanels'],\n    detailPanel: ['detailPanel']\n  };\n  return composeClasses(slots, getDataGridUtilityClass, classes);\n};\n\n// Inspired by https://github.com/material-components/material-components-ios/blob/bca36107405594d5b7b16265a5b0ed698f85a5ee/components/Elevation/src/UIColor%2BMaterialElevation.m#L61\nconst getOverlayAlpha = elevation => {\n  let alphaValue;\n\n  if (elevation < 1) {\n    alphaValue = 5.11916 * elevation ** 2;\n  } else {\n    alphaValue = 4.5 * Math.log(elevation + 1) + 2;\n  }\n\n  return alphaValue / 100;\n};\n\nconst VirtualScrollerDetailPanels = styled('div', {\n  name: 'MuiDataGrid',\n  slot: 'DetailPanels',\n  overridesResolver: (props, styles) => styles.detailPanels\n})({});\nconst VirtualScrollerDetailPanel = styled(Box, {\n  name: 'MuiDataGrid',\n  slot: 'DetailPanel',\n  overridesResolver: (props, styles) => styles.detailPanel\n})(({\n  theme\n}) => ({\n  zIndex: 2,\n  width: '100%',\n  position: 'absolute',\n  backgroundColor: theme.palette.background.default\n}));\nconst VirtualScrollerPinnedColumns = styled('div', {\n  name: 'MuiDataGrid',\n  slot: 'PinnedColumns',\n  overridesResolver: (props, styles) => [{\n    [`&.${gridClasses['pinnedColumns--left']}`]: styles['pinnedColumns--left']\n  }, {\n    [`&.${gridClasses['pinnedColumns--right']}`]: styles['pinnedColumns--right']\n  }, styles.pinnedColumns]\n})(({\n  theme,\n  ownerState\n}) => _extends({\n  position: 'sticky',\n  overflow: 'hidden',\n  zIndex: 1,\n  boxShadow: theme.shadows[2],\n  backgroundColor: theme.palette.background.default\n}, theme.palette.mode === 'dark' && {\n  backgroundImage: `linear-gradient(${alpha('#fff', getOverlayAlpha(2))}, ${alpha('#fff', getOverlayAlpha(2))})`\n}, ownerState.side === GridPinnedPosition.left && {\n  left: 0,\n  float: 'left'\n}, ownerState.side === GridPinnedPosition.right && {\n  right: 0,\n  float: 'right'\n}));\nconst DataGridProVirtualScroller = /*#__PURE__*/React.forwardRef(function DataGridProVirtualScroller(props, ref) {\n  const other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const apiRef = useGridApiContext();\n  const rootProps = useGridRootProps();\n  const visibleColumnFields = useGridSelector(apiRef, gridVisibleColumnFieldsSelector);\n  const expandedRowIds = useGridSelector(apiRef, gridDetailPanelExpandedRowIdsSelector);\n  const detailPanelsContent = useGridSelector(apiRef, gridDetailPanelExpandedRowsContentCacheSelector);\n  const detailPanelsHeights = useGridSelector(apiRef, gridDetailPanelExpandedRowsHeightCacheSelector);\n  const leftColumns = React.useRef(null);\n  const rightColumns = React.useRef(null);\n  const handleRenderZonePositioning = React.useCallback(({\n    top\n  }) => {\n    if (leftColumns.current) {\n      leftColumns.current.style.transform = `translate3d(0px, ${top}px, 0px)`;\n    }\n\n    if (rightColumns.current) {\n      rightColumns.current.style.transform = `translate3d(0px, ${top}px, 0px)`;\n    }\n  }, []);\n\n  const getRowProps = id => {\n    if (!expandedRowIds.includes(id)) {\n      return null;\n    }\n\n    const height = detailPanelsHeights[id];\n    return {\n      style: {\n        marginBottom: height\n      }\n    };\n  };\n\n  const pinnedColumns = useGridSelector(apiRef, gridPinnedColumnsSelector);\n  const [leftPinnedColumns, rightPinnedColumns] = filterColumns(pinnedColumns, visibleColumnFields);\n  const ownerState = {\n    classes: rootProps.classes,\n    leftPinnedColumns,\n    rightPinnedColumns\n  };\n  const classes = useUtilityClasses(ownerState);\n  const {\n    renderContext,\n    getRows,\n    getRootProps,\n    getContentProps,\n    getRenderZoneProps,\n    updateRenderZonePosition\n  } = useGridVirtualScroller(_extends({\n    ref,\n    renderZoneMinColumnIndex: leftPinnedColumns.length,\n    renderZoneMaxColumnIndex: visibleColumnFields.length - rightPinnedColumns.length,\n    onRenderZonePositioning: handleRenderZonePositioning,\n    getRowProps\n  }, props));\n  const refreshRenderZonePosition = React.useCallback(() => {\n    if (renderContext) {\n      updateRenderZonePosition(renderContext);\n    }\n  }, [renderContext, updateRenderZonePosition]);\n  useGridApiEventHandler(apiRef, GridEvents.columnWidthChange, refreshRenderZonePosition);\n  useGridApiEventHandler(apiRef, GridEvents.columnOrderChange, refreshRenderZonePosition);\n  React.useEffect(() => {\n    refreshRenderZonePosition();\n  }, [refreshRenderZonePosition]);\n  const leftRenderContext = renderContext && leftPinnedColumns.length > 0 ? _extends({}, renderContext, {\n    firstColumnIndex: 0,\n    lastColumnIndex: leftPinnedColumns.length\n  }) : null;\n  const rightRenderContext = renderContext && rightPinnedColumns.length > 0 ? _extends({}, renderContext, {\n    firstColumnIndex: visibleColumnFields.length - rightPinnedColumns.length,\n    lastColumnIndex: visibleColumnFields.length\n  }) : null;\n  const contentProps = getContentProps();\n  const pinnedColumnsStyle = {\n    minHeight: contentProps.style.minHeight\n  };\n\n  const getDetailPanels = () => {\n    const panels = [];\n\n    if (rootProps.getDetailPanelContent == null) {\n      return panels;\n    }\n\n    const rowsMeta = gridRowsMetaSelector(apiRef.current.state);\n    const uniqueExpandedRowIds = Array.from(new Set([...expandedRowIds]).values());\n\n    for (let i = 0; i < uniqueExpandedRowIds.length; i += 1) {\n      const id = uniqueExpandedRowIds[i];\n      const content = detailPanelsContent[id]; // Check if the id exists in the current page\n\n      const rowIndex = apiRef.current.getRowIndexRelativeToVisibleRows(id);\n      const exists = rowIndex !== undefined;\n\n      if ( /*#__PURE__*/React.isValidElement(content) && exists) {\n        const height = detailPanelsHeights[id];\n        const sizes = apiRef.current.unstable_getRowInternalSizes(id);\n        const spacingTop = (sizes == null ? void 0 : sizes.spacingTop) || 0;\n        const top = rowsMeta.positions[rowIndex] + apiRef.current.unstable_getRowHeight(id) + spacingTop;\n        panels.push( /*#__PURE__*/_jsx(VirtualScrollerDetailPanel, {\n          style: {\n            top,\n            height\n          },\n          className: classes.detailPanel,\n          children: content\n        }, i));\n      }\n    }\n\n    return panels;\n  };\n\n  const detailPanels = getDetailPanels();\n  return /*#__PURE__*/_jsx(GridVirtualScroller, _extends({}, getRootProps(other), {\n    children: /*#__PURE__*/_jsxs(GridVirtualScrollerContent, _extends({}, contentProps, {\n      children: [leftRenderContext && /*#__PURE__*/_jsx(VirtualScrollerPinnedColumns, {\n        ref: leftColumns,\n        className: classes.leftPinnedColumns,\n        ownerState: {\n          side: GridPinnedPosition.left\n        },\n        style: pinnedColumnsStyle,\n        children: getRows({\n          renderContext: leftRenderContext,\n          minFirstColumn: leftRenderContext.firstColumnIndex,\n          maxLastColumn: leftRenderContext.lastColumnIndex,\n          availableSpace: 0\n        })\n      }), /*#__PURE__*/_jsx(GridVirtualScrollerRenderZone, _extends({}, getRenderZoneProps(), {\n        children: getRows({\n          renderContext\n        })\n      })), rightRenderContext && /*#__PURE__*/_jsx(VirtualScrollerPinnedColumns, {\n        ref: rightColumns,\n        ownerState: {\n          side: GridPinnedPosition.right\n        },\n        className: classes.rightPinnedColumns,\n        style: pinnedColumnsStyle,\n        children: getRows({\n          renderContext: rightRenderContext,\n          minFirstColumn: rightRenderContext.firstColumnIndex,\n          maxLastColumn: rightRenderContext.lastColumnIndex,\n          availableSpace: 0\n        })\n      }), detailPanels.length > 0 && /*#__PURE__*/_jsx(VirtualScrollerDetailPanels, {\n        className: classes.detailPanels,\n        children: detailPanels\n      })]\n    }))\n  }));\n});\nexport { DataGridProVirtualScroller };"]},"metadata":{},"sourceType":"module"}