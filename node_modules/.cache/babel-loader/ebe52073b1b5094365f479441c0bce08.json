{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Documents\\\\KRS\\\\Application1\\\\client\\\\src\\\\components\\\\MRHome.js\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/js/bootstrap.bundle.min';\nimport '@fortawesome/fontawesome-free/css/all.min.css';\nimport './style.css';\nimport { DataGrid } from '@material-ui/data-grid';\nimport React, { location } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport class Mrhome extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      temp_record: [],\n      task_acc: [],\n      total_task_assigned: [],\n      total_task_completed: [],\n      dataset: []\n      /*{'Inst_id':0,\r\n      'Inst_name':\"\",\r\n      'count_faculty':0,\r\n      'task_assign':\"\",\r\n      'task_overdue':\"\"}\r\n      ] ;*/\n\n    };\n\n    this.getdata = () => {\n      axios.post('http://localhost:3001/total_faculty').then(response => {\n        // console.log(response.data);\n        this.setState({\n          task_acc: response.data\n        });\n        console.log(this.state.task_acc);\n      });\n      axios.post(\"http://localhost:3001/total_task_assigned\").then(response => {\n        this.setState({\n          total_task_assigned: response.data\n        }); //   console.log(this.state.total_task_assigned);       \n      });\n      axios.post(\"http://localhost:3001/total_task_completed\").then(response => {\n        //console.log(response.data);\n        this.setState({\n          total_task_completed: response.data\n        }); // console.log(this.state.total_task_completed);       \n      });\n      axios.post(\"http://localhost:3001/total_task_overdue\").then(response => {\n        //console.log(response.data);\n        this.setState({\n          total_task_overdue: response.data\n        }); //console.log(this.state.total_task_overdue);\n      });\n      console.log(this.state.task_acc);\n\n      for (const i of this.state.task_acc) {\n        console.log(\"Inside for loop\");\n        /*console.log(this.state.task_acc.inst_id);\r\n        this.setState({temp_record:this.state.task_acc[i].inst_id});\r\n        console.log(this.temp_record);*/\n      }\n      /*for (let i = 0; i<=this.state.total_task_assigned.length;i++){\r\n            this.temp_record.Inst_id = this.state.total_task_assigned[i].inst_id;\r\n            this.temp_record.Inst_name = this.state.total_task_assigned[i].inst_name;\r\n            this.temp_record.count_faculty = this.state.total_task_assigned[i][2];\r\n            for(let j = 0; j<=this.state.total_task_completed.length;j++){\r\n                if(this.state.total_task_assigned[i].inst_id ==this.state.total_task_completed[j].inst_id)\r\n                this.temp_record.task_assign =  this.state.total_task_completed[j][2]\r\n            }\r\n            for(let j = 0; j<=this.state.total_task_overdue.length;j++){\r\n                if(this.state.total_task_assigned[i].inst_id ==this.state.total_task_completed[j].inst_id)\r\n                this.temp_record.task_overdue =  this.state.total_task_completed[j][2]\r\n            }\r\n            console.log(this.temp_record)\r\n        }  \r\n        console.log(\"Array construction\")\r\n        //this.state.dataset.push(this.state.temp_record);\r\n        console.log(this.state.dataset);*/\n\n    };\n  }\n\n  componentDidMount() {\n    this.getdata();\n  }\n\n  render() {\n    const t_data = this.state.dataset; //console.log(t_data);\n\n    const task_acc_columns = [{\n      headerName: 'ID',\n      field: 'inst_id'\n      /*width: 100*/\n\n    }, {\n      headerName: 'Task Name',\n      field: \"institution\",\n      width: 250\n    }, {\n      headerName: \"Members\",\n      field: \"count(empid)\",\n      width: 150\n    }, {\n      headerName: \"Task Assigned\",\n      field: \"\",\n      width: 150\n    }, {\n      headerName: \"Task Completed\",\n      field: \"\",\n      width: 150\n    }];\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        height: '100%'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"report\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          flexGrow: 1\n        },\n        children: /*#__PURE__*/_jsxDEV(DataGrid, {\n          id: \"task_display\",\n          getRowId: rows => rows.inst_id,\n          rows: t_data,\n          columns: task_acc_columns\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 9\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Admin/Documents/KRS/Application1/client/src/components/MRHome.js"],"names":["DataGrid","React","location","axios","Mrhome","Component","state","temp_record","task_acc","total_task_assigned","total_task_completed","dataset","getdata","post","then","response","setState","data","console","log","total_task_overdue","i","componentDidMount","render","t_data","task_acc_columns","headerName","field","width","display","height","flexGrow","rows","inst_id"],"mappings":"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","sourcesContent":["import 'bootstrap/dist/css/bootstrap.min.css';\r\nimport 'bootstrap/dist/js/bootstrap.bundle.min';\r\nimport '@fortawesome/fontawesome-free/css/all.min.css';\r\nimport './style.css';\r\nimport {DataGrid } from '@material-ui/data-grid'\r\nimport React, {location} from 'react';\r\nimport axios from 'axios';\r\nexport class Mrhome extends React.Component {  \r\n   state = {\r\n    temp_record : [],\r\n    task_acc:[],\r\n    total_task_assigned:[],\r\n    total_task_completed:[],\r\n    dataset : []\r\n          /*{'Inst_id':0,\r\n          'Inst_name':\"\",\r\n          'count_faculty':0,\r\n          'task_assign':\"\",\r\n          'task_overdue':\"\"}\r\n      ] ;*/\r\n    }\r\n  componentDidMount()\r\n  {\r\n    this.getdata();\r\n  }\r\n  getdata=()=>\r\n    {      \r\n        axios.post('http://localhost:3001/total_faculty').then((response)=>{\r\n              // console.log(response.data);\r\n                this.setState({task_acc:response.data});\r\n              console.log(this.state.task_acc)\r\n        });       \r\n        axios.post(\"http://localhost:3001/total_task_assigned\").then((response)=>{\r\n          this.setState({total_task_assigned:response.data});\r\n       //   console.log(this.state.total_task_assigned);       \r\n        });     \r\n        axios.post(\"http://localhost:3001/total_task_completed\").then((response)=>{\r\n          //console.log(response.data);\r\n          this.setState({total_task_completed:response.data});\r\n         // console.log(this.state.total_task_completed);       \r\n        }); \r\n        axios.post(\"http://localhost:3001/total_task_overdue\").then((response)=>{\r\n          //console.log(response.data);\r\n          this.setState({total_task_overdue : response.data});\r\n          //console.log(this.state.total_task_overdue);\r\n        });\r\n        console.log(this.state.task_acc);\r\n        for(const i of this.state.task_acc)\r\n          {\r\n              console.log(\"Inside for loop\");\r\n              /*console.log(this.state.task_acc.inst_id);\r\n              this.setState({temp_record:this.state.task_acc[i].inst_id});\r\n          console.log(this.temp_record);*/ }\r\n\r\n      /*for (let i = 0; i<=this.state.total_task_assigned.length;i++){\r\n            this.temp_record.Inst_id = this.state.total_task_assigned[i].inst_id;\r\n            this.temp_record.Inst_name = this.state.total_task_assigned[i].inst_name;\r\n            this.temp_record.count_faculty = this.state.total_task_assigned[i][2];\r\n            for(let j = 0; j<=this.state.total_task_completed.length;j++){\r\n                if(this.state.total_task_assigned[i].inst_id ==this.state.total_task_completed[j].inst_id)\r\n                this.temp_record.task_assign =  this.state.total_task_completed[j][2]\r\n            }\r\n            for(let j = 0; j<=this.state.total_task_overdue.length;j++){\r\n                if(this.state.total_task_assigned[i].inst_id ==this.state.total_task_completed[j].inst_id)\r\n                this.temp_record.task_overdue =  this.state.total_task_completed[j][2]\r\n            }\r\n            console.log(this.temp_record)\r\n        }  \r\n        console.log(\"Array construction\")\r\n        //this.state.dataset.push(this.state.temp_record);\r\n        console.log(this.state.dataset);*/\r\n    }\r\n    render() \r\n    {\r\n      const t_data = this.state.dataset;        \r\n      //console.log(t_data);\r\n      const task_acc_columns = [\r\n        {\r\n          headerName : 'ID',\r\n          field  :'inst_id'\r\n          /*width: 100*/\r\n        },\r\n        {\r\n          headerName : 'Task Name',\r\n          field  :\"institution\",\r\n          width: 250 \r\n        },\r\n        {\r\n            headerName : \"Members\",\r\n            field:\"count(empid)\",\r\n            width:150\r\n        },\r\n        {\r\n            headerName : \"Task Assigned\",\r\n            field:\"\",\r\n            width:150\r\n        },\r\n        {\r\n            headerName : \"Task Completed\",\r\n            field:\"\",\r\n            width:150\r\n        }  ];\r\n\r\n    return(\r\n        <div style={{ display: 'flex', height: '100%' }}>\r\n          <h1>report</h1>\r\n            <div style={{ flexGrow: 1 }}>\r\n                <DataGrid id = \"task_display\" \r\n                    getRowId={rows => rows.inst_id}\r\n                    rows = {t_data}\r\n                    columns = {task_acc_columns}\r\n                />\r\n            </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}