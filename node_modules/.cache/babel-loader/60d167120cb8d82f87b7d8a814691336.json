{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"hideDescendantCount\"];\nimport * as React from 'react';\nimport { gridRowIdsSelector, gridRowTreeSelector, useFirstRender } from '@mui/x-data-grid';\nimport { useGridRegisterPreProcessor, useGridRegisterStrategyProcessor } from '@mui/x-data-grid/internals';\nimport { GRID_TREE_DATA_GROUPING_COL_DEF, GRID_TREE_DATA_GROUPING_COL_DEF_FORCED_PROPERTIES } from './gridTreeDataGroupColDef';\nimport { filterRowTreeFromTreeData, TREE_DATA_STRATEGY } from './gridTreeDataUtils';\nimport { GridTreeDataGroupingCell } from '../../../components';\nimport { buildRowTree } from '../../../utils/tree/buildRowTree';\nimport { sortRowTree } from '../../../utils/tree/sortRowTree';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport const useGridTreeDataPreProcessors = (apiRef, props) => {\n  const setStrategyAvailability = React.useCallback(() => {\n    apiRef.current.unstable_setStrategyAvailability('rowTree', TREE_DATA_STRATEGY, props.treeData ? () => true : () => false);\n  }, [apiRef, props.treeData]);\n  const getGroupingColDef = React.useCallback(() => {\n    var _colDefOverride;\n\n    const groupingColDefProp = props.groupingColDef;\n    let colDefOverride;\n\n    if (typeof groupingColDefProp === 'function') {\n      const params = {\n        groupingName: TREE_DATA_STRATEGY,\n        fields: []\n      };\n      colDefOverride = groupingColDefProp(params);\n    } else {\n      colDefOverride = groupingColDefProp;\n    }\n\n    const _ref = (_colDefOverride = colDefOverride) != null ? _colDefOverride : {},\n          {\n      hideDescendantCount\n    } = _ref,\n          colDefOverrideProperties = _objectWithoutPropertiesLoose(_ref, _excluded);\n\n    const commonProperties = _extends({}, GRID_TREE_DATA_GROUPING_COL_DEF, {\n      renderCell: params => /*#__PURE__*/_jsx(GridTreeDataGroupingCell, _extends({}, params, {\n        hideDescendantCount: hideDescendantCount\n      })),\n      headerName: apiRef.current.getLocaleText('treeDataGroupingHeaderName')\n    });\n\n    return _extends({}, commonProperties, colDefOverrideProperties, GRID_TREE_DATA_GROUPING_COL_DEF_FORCED_PROPERTIES);\n  }, [apiRef, props.groupingColDef]);\n  const updateGroupingColumn = React.useCallback(columnsState => {\n    const groupingColDefField = GRID_TREE_DATA_GROUPING_COL_DEF_FORCED_PROPERTIES.field;\n    const shouldHaveGroupingColumn = props.treeData;\n    const prevGroupingColumn = columnsState.lookup[groupingColDefField];\n\n    if (shouldHaveGroupingColumn) {\n      const newGroupingColumn = getGroupingColDef();\n\n      if (prevGroupingColumn) {\n        newGroupingColumn.width = prevGroupingColumn.width;\n        newGroupingColumn.flex = prevGroupingColumn.flex;\n      }\n\n      columnsState.lookup[groupingColDefField] = newGroupingColumn;\n\n      if (prevGroupingColumn == null) {\n        const index = columnsState.all[0] === '__check__' ? 1 : 0;\n        columnsState.all = [...columnsState.all.slice(0, index), groupingColDefField, ...columnsState.all.slice(index)];\n      }\n    } else if (!shouldHaveGroupingColumn && prevGroupingColumn) {\n      delete columnsState.lookup[groupingColDefField];\n      columnsState.all = columnsState.all.filter(field => field !== groupingColDefField);\n    }\n\n    return columnsState;\n  }, [props.treeData, getGroupingColDef]);\n  const createRowTree = React.useCallback(params => {\n    if (!props.getTreeDataPath) {\n      throw new Error('MUI: No getTreeDataPath given.');\n    }\n\n    const rows = params.ids.map(rowId => ({\n      id: rowId,\n      path: props.getTreeDataPath(params.idRowsLookup[rowId]).map(key => ({\n        key,\n        field: null\n      }))\n    })).sort((a, b) => a.path.length - b.path.length);\n    return buildRowTree(_extends({\n      rows\n    }, params, {\n      defaultGroupingExpansionDepth: props.defaultGroupingExpansionDepth,\n      isGroupExpandedByDefault: props.isGroupExpandedByDefault,\n      groupingName: TREE_DATA_STRATEGY,\n      onDuplicatePath: (firstId, secondId, path) => {\n        throw new Error(['MUI: The path returned by `getTreeDataPath` should be unique.', `The rows with id #${firstId} and #${secondId} have the same.`, `Path: ${JSON.stringify(path.map(step => step.key))}.`].join('\\n'));\n      }\n    }));\n  }, [props.getTreeDataPath, props.defaultGroupingExpansionDepth, props.isGroupExpandedByDefault]);\n  const filterRows = React.useCallback(params => {\n    const rowTree = gridRowTreeSelector(apiRef);\n    return filterRowTreeFromTreeData({\n      rowTree,\n      isRowMatchingFilters: params.isRowMatchingFilters,\n      disableChildrenFiltering: props.disableChildrenFiltering\n    });\n  }, [apiRef, props.disableChildrenFiltering]);\n  const sortRows = React.useCallback(params => {\n    const rowTree = gridRowTreeSelector(apiRef);\n    const rowIds = gridRowIdsSelector(apiRef);\n    return sortRowTree({\n      rowTree,\n      rowIds,\n      sortRowList: params.sortRowList,\n      disableChildrenSorting: props.disableChildrenSorting\n    });\n  }, [apiRef, props.disableChildrenSorting]);\n  useGridRegisterPreProcessor(apiRef, 'hydrateColumns', updateGroupingColumn);\n  useGridRegisterStrategyProcessor(apiRef, TREE_DATA_STRATEGY, 'rowTreeCreation', createRowTree);\n  useGridRegisterStrategyProcessor(apiRef, TREE_DATA_STRATEGY, 'filtering', filterRows);\n  useGridRegisterStrategyProcessor(apiRef, TREE_DATA_STRATEGY, 'sorting', sortRows);\n  /**\n   * 1ST RENDER\n   */\n\n  useFirstRender(() => {\n    setStrategyAvailability();\n  });\n  /**\n   * EFFECTS\n   */\n\n  const isFirstRender = React.useRef(true);\n  React.useEffect(() => {\n    if (!isFirstRender.current) {\n      setStrategyAvailability();\n    } else {\n      isFirstRender.current = false;\n    }\n  }, [setStrategyAvailability]);\n};","map":{"version":3,"sources":["C:/Users/Admin/Documents/KRS/Application1/client/node_modules/@mui/x-data-grid-pro/hooks/features/treeData/useGridTreeDataPreProcessors.js"],"names":["_extends","_objectWithoutPropertiesLoose","_excluded","React","gridRowIdsSelector","gridRowTreeSelector","useFirstRender","useGridRegisterPreProcessor","useGridRegisterStrategyProcessor","GRID_TREE_DATA_GROUPING_COL_DEF","GRID_TREE_DATA_GROUPING_COL_DEF_FORCED_PROPERTIES","filterRowTreeFromTreeData","TREE_DATA_STRATEGY","GridTreeDataGroupingCell","buildRowTree","sortRowTree","jsx","_jsx","useGridTreeDataPreProcessors","apiRef","props","setStrategyAvailability","useCallback","current","unstable_setStrategyAvailability","treeData","getGroupingColDef","_colDefOverride","groupingColDefProp","groupingColDef","colDefOverride","params","groupingName","fields","_ref","hideDescendantCount","colDefOverrideProperties","commonProperties","renderCell","headerName","getLocaleText","updateGroupingColumn","columnsState","groupingColDefField","field","shouldHaveGroupingColumn","prevGroupingColumn","lookup","newGroupingColumn","width","flex","index","all","slice","filter","createRowTree","getTreeDataPath","Error","rows","ids","map","rowId","id","path","idRowsLookup","key","sort","a","b","length","defaultGroupingExpansionDepth","isGroupExpandedByDefault","onDuplicatePath","firstId","secondId","JSON","stringify","step","join","filterRows","rowTree","isRowMatchingFilters","disableChildrenFiltering","sortRows","rowIds","sortRowList","disableChildrenSorting","isFirstRender","useRef","useEffect"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"hideDescendantCount\"];\nimport * as React from 'react';\nimport { gridRowIdsSelector, gridRowTreeSelector, useFirstRender } from '@mui/x-data-grid';\nimport { useGridRegisterPreProcessor, useGridRegisterStrategyProcessor } from '@mui/x-data-grid/internals';\nimport { GRID_TREE_DATA_GROUPING_COL_DEF, GRID_TREE_DATA_GROUPING_COL_DEF_FORCED_PROPERTIES } from './gridTreeDataGroupColDef';\nimport { filterRowTreeFromTreeData, TREE_DATA_STRATEGY } from './gridTreeDataUtils';\nimport { GridTreeDataGroupingCell } from '../../../components';\nimport { buildRowTree } from '../../../utils/tree/buildRowTree';\nimport { sortRowTree } from '../../../utils/tree/sortRowTree';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport const useGridTreeDataPreProcessors = (apiRef, props) => {\n  const setStrategyAvailability = React.useCallback(() => {\n    apiRef.current.unstable_setStrategyAvailability('rowTree', TREE_DATA_STRATEGY, props.treeData ? () => true : () => false);\n  }, [apiRef, props.treeData]);\n  const getGroupingColDef = React.useCallback(() => {\n    var _colDefOverride;\n\n    const groupingColDefProp = props.groupingColDef;\n    let colDefOverride;\n\n    if (typeof groupingColDefProp === 'function') {\n      const params = {\n        groupingName: TREE_DATA_STRATEGY,\n        fields: []\n      };\n      colDefOverride = groupingColDefProp(params);\n    } else {\n      colDefOverride = groupingColDefProp;\n    }\n\n    const _ref = (_colDefOverride = colDefOverride) != null ? _colDefOverride : {},\n          {\n      hideDescendantCount\n    } = _ref,\n          colDefOverrideProperties = _objectWithoutPropertiesLoose(_ref, _excluded);\n\n    const commonProperties = _extends({}, GRID_TREE_DATA_GROUPING_COL_DEF, {\n      renderCell: params => /*#__PURE__*/_jsx(GridTreeDataGroupingCell, _extends({}, params, {\n        hideDescendantCount: hideDescendantCount\n      })),\n      headerName: apiRef.current.getLocaleText('treeDataGroupingHeaderName')\n    });\n\n    return _extends({}, commonProperties, colDefOverrideProperties, GRID_TREE_DATA_GROUPING_COL_DEF_FORCED_PROPERTIES);\n  }, [apiRef, props.groupingColDef]);\n  const updateGroupingColumn = React.useCallback(columnsState => {\n    const groupingColDefField = GRID_TREE_DATA_GROUPING_COL_DEF_FORCED_PROPERTIES.field;\n    const shouldHaveGroupingColumn = props.treeData;\n    const prevGroupingColumn = columnsState.lookup[groupingColDefField];\n\n    if (shouldHaveGroupingColumn) {\n      const newGroupingColumn = getGroupingColDef();\n\n      if (prevGroupingColumn) {\n        newGroupingColumn.width = prevGroupingColumn.width;\n        newGroupingColumn.flex = prevGroupingColumn.flex;\n      }\n\n      columnsState.lookup[groupingColDefField] = newGroupingColumn;\n\n      if (prevGroupingColumn == null) {\n        const index = columnsState.all[0] === '__check__' ? 1 : 0;\n        columnsState.all = [...columnsState.all.slice(0, index), groupingColDefField, ...columnsState.all.slice(index)];\n      }\n    } else if (!shouldHaveGroupingColumn && prevGroupingColumn) {\n      delete columnsState.lookup[groupingColDefField];\n      columnsState.all = columnsState.all.filter(field => field !== groupingColDefField);\n    }\n\n    return columnsState;\n  }, [props.treeData, getGroupingColDef]);\n  const createRowTree = React.useCallback(params => {\n    if (!props.getTreeDataPath) {\n      throw new Error('MUI: No getTreeDataPath given.');\n    }\n\n    const rows = params.ids.map(rowId => ({\n      id: rowId,\n      path: props.getTreeDataPath(params.idRowsLookup[rowId]).map(key => ({\n        key,\n        field: null\n      }))\n    })).sort((a, b) => a.path.length - b.path.length);\n    return buildRowTree(_extends({\n      rows\n    }, params, {\n      defaultGroupingExpansionDepth: props.defaultGroupingExpansionDepth,\n      isGroupExpandedByDefault: props.isGroupExpandedByDefault,\n      groupingName: TREE_DATA_STRATEGY,\n      onDuplicatePath: (firstId, secondId, path) => {\n        throw new Error(['MUI: The path returned by `getTreeDataPath` should be unique.', `The rows with id #${firstId} and #${secondId} have the same.`, `Path: ${JSON.stringify(path.map(step => step.key))}.`].join('\\n'));\n      }\n    }));\n  }, [props.getTreeDataPath, props.defaultGroupingExpansionDepth, props.isGroupExpandedByDefault]);\n  const filterRows = React.useCallback(params => {\n    const rowTree = gridRowTreeSelector(apiRef);\n    return filterRowTreeFromTreeData({\n      rowTree,\n      isRowMatchingFilters: params.isRowMatchingFilters,\n      disableChildrenFiltering: props.disableChildrenFiltering\n    });\n  }, [apiRef, props.disableChildrenFiltering]);\n  const sortRows = React.useCallback(params => {\n    const rowTree = gridRowTreeSelector(apiRef);\n    const rowIds = gridRowIdsSelector(apiRef);\n    return sortRowTree({\n      rowTree,\n      rowIds,\n      sortRowList: params.sortRowList,\n      disableChildrenSorting: props.disableChildrenSorting\n    });\n  }, [apiRef, props.disableChildrenSorting]);\n  useGridRegisterPreProcessor(apiRef, 'hydrateColumns', updateGroupingColumn);\n  useGridRegisterStrategyProcessor(apiRef, TREE_DATA_STRATEGY, 'rowTreeCreation', createRowTree);\n  useGridRegisterStrategyProcessor(apiRef, TREE_DATA_STRATEGY, 'filtering', filterRows);\n  useGridRegisterStrategyProcessor(apiRef, TREE_DATA_STRATEGY, 'sorting', sortRows);\n  /**\n   * 1ST RENDER\n   */\n\n  useFirstRender(() => {\n    setStrategyAvailability();\n  });\n  /**\n   * EFFECTS\n   */\n\n  const isFirstRender = React.useRef(true);\n  React.useEffect(() => {\n    if (!isFirstRender.current) {\n      setStrategyAvailability();\n    } else {\n      isFirstRender.current = false;\n    }\n  }, [setStrategyAvailability]);\n};"]},"metadata":{},"sourceType":"module"}