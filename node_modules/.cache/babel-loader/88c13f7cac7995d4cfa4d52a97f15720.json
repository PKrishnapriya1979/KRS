{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useGridRegisterPreProcessor } from '@mui/x-data-grid/internals';\nimport { gridPinnedColumnsSelector } from './gridColumnPinningSelector';\nimport { columnPinningStateInitializer } from './useGridColumnPinning';\nimport { filterColumns } from '../../../components/DataGridProVirtualScroller';\nexport const useGridColumnPinningPreProcessors = (apiRef, props) => {\n  const {\n    disableColumnPinning,\n    pinnedColumns: pinnedColumnsProp,\n    initialState\n  } = props;\n  let pinnedColumns = gridPinnedColumnsSelector(apiRef.current.state);\n\n  if (pinnedColumns == null) {\n    // Since the state is not ready yet lets use the initializer to get which\n    // columns should be pinned initially.\n    const initializedState = columnPinningStateInitializer(apiRef.current.state, {\n      disableColumnPinning,\n      pinnedColumns: pinnedColumnsProp,\n      initialState\n    }, apiRef);\n    pinnedColumns = gridPinnedColumnsSelector(initializedState);\n  }\n\n  const reorderPinnedColumns = React.useCallback(columnsState => {\n    if (columnsState.all.length === 0 || disableColumnPinning) {\n      return columnsState;\n    }\n\n    const [leftPinnedColumns, rightPinnedColumns] = filterColumns(pinnedColumns, columnsState.all);\n\n    if (leftPinnedColumns.length === 0 && rightPinnedColumns.length === 0) {\n      return columnsState;\n    }\n\n    const centerColumns = columnsState.all.filter(field => {\n      return !leftPinnedColumns.includes(field) && !rightPinnedColumns.includes(field);\n    });\n    return _extends({}, columnsState, {\n      all: [...leftPinnedColumns, ...centerColumns, ...rightPinnedColumns]\n    });\n  }, [disableColumnPinning, pinnedColumns]);\n  useGridRegisterPreProcessor(apiRef, 'hydrateColumns', reorderPinnedColumns);\n};","map":{"version":3,"sources":["C:/Users/Admin/Documents/KRS/Application1/client/node_modules/@mui/x-data-grid-pro/hooks/features/columnPinning/useGridColumnPinningPreProcessors.js"],"names":["_extends","React","useGridRegisterPreProcessor","gridPinnedColumnsSelector","columnPinningStateInitializer","filterColumns","useGridColumnPinningPreProcessors","apiRef","props","disableColumnPinning","pinnedColumns","pinnedColumnsProp","initialState","current","state","initializedState","reorderPinnedColumns","useCallback","columnsState","all","length","leftPinnedColumns","rightPinnedColumns","centerColumns","filter","field","includes"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,oCAArB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAASC,2BAAT,QAA4C,4BAA5C;AACA,SAASC,yBAAT,QAA0C,6BAA1C;AACA,SAASC,6BAAT,QAA8C,wBAA9C;AACA,SAASC,aAAT,QAA8B,gDAA9B;AACA,OAAO,MAAMC,iCAAiC,GAAG,CAACC,MAAD,EAASC,KAAT,KAAmB;AAClE,QAAM;AACJC,IAAAA,oBADI;AAEJC,IAAAA,aAAa,EAAEC,iBAFX;AAGJC,IAAAA;AAHI,MAIFJ,KAJJ;AAKA,MAAIE,aAAa,GAAGP,yBAAyB,CAACI,MAAM,CAACM,OAAP,CAAeC,KAAhB,CAA7C;;AAEA,MAAIJ,aAAa,IAAI,IAArB,EAA2B;AACzB;AACA;AACA,UAAMK,gBAAgB,GAAGX,6BAA6B,CAACG,MAAM,CAACM,OAAP,CAAeC,KAAhB,EAAuB;AAC3EL,MAAAA,oBAD2E;AAE3EC,MAAAA,aAAa,EAAEC,iBAF4D;AAG3EC,MAAAA;AAH2E,KAAvB,EAInDL,MAJmD,CAAtD;AAKAG,IAAAA,aAAa,GAAGP,yBAAyB,CAACY,gBAAD,CAAzC;AACD;;AAED,QAAMC,oBAAoB,GAAGf,KAAK,CAACgB,WAAN,CAAkBC,YAAY,IAAI;AAC7D,QAAIA,YAAY,CAACC,GAAb,CAAiBC,MAAjB,KAA4B,CAA5B,IAAiCX,oBAArC,EAA2D;AACzD,aAAOS,YAAP;AACD;;AAED,UAAM,CAACG,iBAAD,EAAoBC,kBAApB,IAA0CjB,aAAa,CAACK,aAAD,EAAgBQ,YAAY,CAACC,GAA7B,CAA7D;;AAEA,QAAIE,iBAAiB,CAACD,MAAlB,KAA6B,CAA7B,IAAkCE,kBAAkB,CAACF,MAAnB,KAA8B,CAApE,EAAuE;AACrE,aAAOF,YAAP;AACD;;AAED,UAAMK,aAAa,GAAGL,YAAY,CAACC,GAAb,CAAiBK,MAAjB,CAAwBC,KAAK,IAAI;AACrD,aAAO,CAACJ,iBAAiB,CAACK,QAAlB,CAA2BD,KAA3B,CAAD,IAAsC,CAACH,kBAAkB,CAACI,QAAnB,CAA4BD,KAA5B,CAA9C;AACD,KAFqB,CAAtB;AAGA,WAAOzB,QAAQ,CAAC,EAAD,EAAKkB,YAAL,EAAmB;AAChCC,MAAAA,GAAG,EAAE,CAAC,GAAGE,iBAAJ,EAAuB,GAAGE,aAA1B,EAAyC,GAAGD,kBAA5C;AAD2B,KAAnB,CAAf;AAGD,GAjB4B,EAiB1B,CAACb,oBAAD,EAAuBC,aAAvB,CAjB0B,CAA7B;AAkBAR,EAAAA,2BAA2B,CAACK,MAAD,EAAS,gBAAT,EAA2BS,oBAA3B,CAA3B;AACD,CAtCM","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useGridRegisterPreProcessor } from '@mui/x-data-grid/internals';\nimport { gridPinnedColumnsSelector } from './gridColumnPinningSelector';\nimport { columnPinningStateInitializer } from './useGridColumnPinning';\nimport { filterColumns } from '../../../components/DataGridProVirtualScroller';\nexport const useGridColumnPinningPreProcessors = (apiRef, props) => {\n  const {\n    disableColumnPinning,\n    pinnedColumns: pinnedColumnsProp,\n    initialState\n  } = props;\n  let pinnedColumns = gridPinnedColumnsSelector(apiRef.current.state);\n\n  if (pinnedColumns == null) {\n    // Since the state is not ready yet lets use the initializer to get which\n    // columns should be pinned initially.\n    const initializedState = columnPinningStateInitializer(apiRef.current.state, {\n      disableColumnPinning,\n      pinnedColumns: pinnedColumnsProp,\n      initialState\n    }, apiRef);\n    pinnedColumns = gridPinnedColumnsSelector(initializedState);\n  }\n\n  const reorderPinnedColumns = React.useCallback(columnsState => {\n    if (columnsState.all.length === 0 || disableColumnPinning) {\n      return columnsState;\n    }\n\n    const [leftPinnedColumns, rightPinnedColumns] = filterColumns(pinnedColumns, columnsState.all);\n\n    if (leftPinnedColumns.length === 0 && rightPinnedColumns.length === 0) {\n      return columnsState;\n    }\n\n    const centerColumns = columnsState.all.filter(field => {\n      return !leftPinnedColumns.includes(field) && !rightPinnedColumns.includes(field);\n    });\n    return _extends({}, columnsState, {\n      all: [...leftPinnedColumns, ...centerColumns, ...rightPinnedColumns]\n    });\n  }, [disableColumnPinning, pinnedColumns]);\n  useGridRegisterPreProcessor(apiRef, 'hydrateColumns', reorderPinnedColumns);\n};"]},"metadata":{},"sourceType":"module"}