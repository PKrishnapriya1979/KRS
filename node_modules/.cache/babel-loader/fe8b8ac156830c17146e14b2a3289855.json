{"ast":null,"code":"import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport MenuItem from '@mui/material/MenuItem';\nimport { useGridSelector, gridColumnLookupSelector } from '@mui/x-data-grid';\nimport { useGridApiContext } from '../hooks/utils/useGridApiContext';\nimport { gridRowGroupingSanitizedModelSelector } from '../hooks/features/rowGrouping/gridRowGroupingSelector';\nimport { getRowGroupingCriteriaFromGroupingField, GRID_ROW_GROUPING_SINGLE_GROUPING_FIELD, isGroupingColumn } from '../hooks/features/rowGrouping/gridRowGroupingUtils';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nconst GridRowGroupingColumnMenuItems = props => {\n  const {\n    column,\n    onClick\n  } = props;\n  const apiRef = useGridApiContext();\n  const rowGroupingModel = useGridSelector(apiRef, gridRowGroupingSanitizedModelSelector);\n  const columnsLookup = useGridSelector(apiRef, gridColumnLookupSelector);\n\n  const renderUnGroupingMenuItem = field => {\n    var _columnsLookup$field$;\n\n    const ungroupColumn = event => {\n      apiRef.current.removeRowGroupingCriteria(field);\n\n      if (onClick) {\n        onClick(event);\n      }\n    };\n\n    const name = (_columnsLookup$field$ = columnsLookup[field].headerName) != null ? _columnsLookup$field$ : field;\n    return /*#__PURE__*/_jsx(MenuItem, {\n      onClick: ungroupColumn,\n      children: apiRef.current.getLocaleText('unGroupColumn')(name)\n    }, field);\n  };\n\n  if (!column || !isGroupingColumn(column.field)) {\n    return null;\n  }\n\n  if (column.field === GRID_ROW_GROUPING_SINGLE_GROUPING_FIELD) {\n    return /*#__PURE__*/_jsx(React.Fragment, {\n      children: rowGroupingModel.map(renderUnGroupingMenuItem)\n    });\n  }\n\n  return renderUnGroupingMenuItem(getRowGroupingCriteriaFromGroupingField(column.field));\n};\n\nprocess.env.NODE_ENV !== \"production\" ? GridRowGroupingColumnMenuItems.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  column: PropTypes.object,\n  onClick: PropTypes.func\n} : void 0;\nexport { GridRowGroupingColumnMenuItems };","map":{"version":3,"sources":["C:/Users/Admin/Documents/KRS/Application1/client/node_modules/@mui/x-data-grid-pro/components/GridRowGroupingColumnMenuItems.js"],"names":["React","PropTypes","MenuItem","useGridSelector","gridColumnLookupSelector","useGridApiContext","gridRowGroupingSanitizedModelSelector","getRowGroupingCriteriaFromGroupingField","GRID_ROW_GROUPING_SINGLE_GROUPING_FIELD","isGroupingColumn","jsx","_jsx","GridRowGroupingColumnMenuItems","props","column","onClick","apiRef","rowGroupingModel","columnsLookup","renderUnGroupingMenuItem","field","_columnsLookup$field$","ungroupColumn","event","current","removeRowGroupingCriteria","name","headerName","children","getLocaleText","Fragment","map","process","env","NODE_ENV","propTypes","object","func"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,SAASC,eAAT,EAA0BC,wBAA1B,QAA0D,kBAA1D;AACA,SAASC,iBAAT,QAAkC,kCAAlC;AACA,SAASC,qCAAT,QAAsD,uDAAtD;AACA,SAASC,uCAAT,EAAkDC,uCAAlD,EAA2FC,gBAA3F,QAAmH,oDAAnH;AACA,SAASC,GAAG,IAAIC,IAAhB,QAA4B,mBAA5B;;AAEA,MAAMC,8BAA8B,GAAGC,KAAK,IAAI;AAC9C,QAAM;AACJC,IAAAA,MADI;AAEJC,IAAAA;AAFI,MAGFF,KAHJ;AAIA,QAAMG,MAAM,GAAGX,iBAAiB,EAAhC;AACA,QAAMY,gBAAgB,GAAGd,eAAe,CAACa,MAAD,EAASV,qCAAT,CAAxC;AACA,QAAMY,aAAa,GAAGf,eAAe,CAACa,MAAD,EAASZ,wBAAT,CAArC;;AAEA,QAAMe,wBAAwB,GAAGC,KAAK,IAAI;AACxC,QAAIC,qBAAJ;;AAEA,UAAMC,aAAa,GAAGC,KAAK,IAAI;AAC7BP,MAAAA,MAAM,CAACQ,OAAP,CAAeC,yBAAf,CAAyCL,KAAzC;;AAEA,UAAIL,OAAJ,EAAa;AACXA,QAAAA,OAAO,CAACQ,KAAD,CAAP;AACD;AACF,KAND;;AAQA,UAAMG,IAAI,GAAG,CAACL,qBAAqB,GAAGH,aAAa,CAACE,KAAD,CAAb,CAAqBO,UAA9C,KAA6D,IAA7D,GAAoEN,qBAApE,GAA4FD,KAAzG;AACA,WAAO,aAAaT,IAAI,CAACT,QAAD,EAAW;AACjCa,MAAAA,OAAO,EAAEO,aADwB;AAEjCM,MAAAA,QAAQ,EAAEZ,MAAM,CAACQ,OAAP,CAAeK,aAAf,CAA6B,eAA7B,EAA8CH,IAA9C;AAFuB,KAAX,EAGrBN,KAHqB,CAAxB;AAID,GAhBD;;AAkBA,MAAI,CAACN,MAAD,IAAW,CAACL,gBAAgB,CAACK,MAAM,CAACM,KAAR,CAAhC,EAAgD;AAC9C,WAAO,IAAP;AACD;;AAED,MAAIN,MAAM,CAACM,KAAP,KAAiBZ,uCAArB,EAA8D;AAC5D,WAAO,aAAaG,IAAI,CAACX,KAAK,CAAC8B,QAAP,EAAiB;AACvCF,MAAAA,QAAQ,EAAEX,gBAAgB,CAACc,GAAjB,CAAqBZ,wBAArB;AAD6B,KAAjB,CAAxB;AAGD;;AAED,SAAOA,wBAAwB,CAACZ,uCAAuC,CAACO,MAAM,CAACM,KAAR,CAAxC,CAA/B;AACD,CAtCD;;AAwCAY,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwCtB,8BAA8B,CAACuB,SAA/B,GAA2C;AACjF;AACA;AACA;AACA;AACArB,EAAAA,MAAM,EAAEb,SAAS,CAACmC,MAL+D;AAMjFrB,EAAAA,OAAO,EAAEd,SAAS,CAACoC;AAN8D,CAAnF,GAOI,KAAK,CAPT;AAQA,SAASzB,8BAAT","sourcesContent":["import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport MenuItem from '@mui/material/MenuItem';\nimport { useGridSelector, gridColumnLookupSelector } from '@mui/x-data-grid';\nimport { useGridApiContext } from '../hooks/utils/useGridApiContext';\nimport { gridRowGroupingSanitizedModelSelector } from '../hooks/features/rowGrouping/gridRowGroupingSelector';\nimport { getRowGroupingCriteriaFromGroupingField, GRID_ROW_GROUPING_SINGLE_GROUPING_FIELD, isGroupingColumn } from '../hooks/features/rowGrouping/gridRowGroupingUtils';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nconst GridRowGroupingColumnMenuItems = props => {\n  const {\n    column,\n    onClick\n  } = props;\n  const apiRef = useGridApiContext();\n  const rowGroupingModel = useGridSelector(apiRef, gridRowGroupingSanitizedModelSelector);\n  const columnsLookup = useGridSelector(apiRef, gridColumnLookupSelector);\n\n  const renderUnGroupingMenuItem = field => {\n    var _columnsLookup$field$;\n\n    const ungroupColumn = event => {\n      apiRef.current.removeRowGroupingCriteria(field);\n\n      if (onClick) {\n        onClick(event);\n      }\n    };\n\n    const name = (_columnsLookup$field$ = columnsLookup[field].headerName) != null ? _columnsLookup$field$ : field;\n    return /*#__PURE__*/_jsx(MenuItem, {\n      onClick: ungroupColumn,\n      children: apiRef.current.getLocaleText('unGroupColumn')(name)\n    }, field);\n  };\n\n  if (!column || !isGroupingColumn(column.field)) {\n    return null;\n  }\n\n  if (column.field === GRID_ROW_GROUPING_SINGLE_GROUPING_FIELD) {\n    return /*#__PURE__*/_jsx(React.Fragment, {\n      children: rowGroupingModel.map(renderUnGroupingMenuItem)\n    });\n  }\n\n  return renderUnGroupingMenuItem(getRowGroupingCriteriaFromGroupingField(column.field));\n};\n\nprocess.env.NODE_ENV !== \"production\" ? GridRowGroupingColumnMenuItems.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  column: PropTypes.object,\n  onClick: PropTypes.func\n} : void 0;\nexport { GridRowGroupingColumnMenuItems };"]},"metadata":{},"sourceType":"module"}