{"ast":null,"code":"import * as React from 'react';\nimport { verifyLicense } from '../verifyLicense/verifyLicense';\nimport { LicenseInfo } from '../utils/licenseInfo';\nimport { showExpiredLicenseError, showInvalidLicenseError, showNotFoundLicenseError } from '../utils/licenseErrorMessageUtils';\nimport { LicenseStatus } from '../utils/licenseStatus';\nconst sharedLicenseStatuses = {};\nexport function useLicenseVerifier(packageName, releaseInfo) {\n  return React.useMemo(() => {\n    var _sharedLicenseStatuse;\n\n    const licenseKey = LicenseInfo.getLicenseKey();\n\n    if (licenseKey && ((_sharedLicenseStatuse = sharedLicenseStatuses[packageName]) == null ? void 0 : _sharedLicenseStatuse.key) === licenseKey) {\n      return sharedLicenseStatuses[packageName].status;\n    }\n\n    const licenseStatus = verifyLicense(releaseInfo, licenseKey);\n    sharedLicenseStatuses[packageName] = {\n      key: licenseStatus,\n      status: licenseStatus\n    };\n\n    if (licenseStatus === LicenseStatus.Invalid) {\n      showInvalidLicenseError();\n    } else if (licenseStatus === LicenseStatus.NotFound) {\n      showNotFoundLicenseError();\n    } else if (licenseStatus === LicenseStatus.Expired) {\n      showExpiredLicenseError();\n    }\n\n    return licenseStatus;\n  }, [packageName, releaseInfo]);\n}","map":{"version":3,"sources":["C:/Users/Admin/Documents/KRS/Application1/client/node_modules/@mui/x-license-pro/useLicenseVerifier/useLicenseVerifier.js"],"names":["React","verifyLicense","LicenseInfo","showExpiredLicenseError","showInvalidLicenseError","showNotFoundLicenseError","LicenseStatus","sharedLicenseStatuses","useLicenseVerifier","packageName","releaseInfo","useMemo","_sharedLicenseStatuse","licenseKey","getLicenseKey","key","status","licenseStatus","Invalid","NotFound","Expired"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,aAAT,QAA8B,gCAA9B;AACA,SAASC,WAAT,QAA4B,sBAA5B;AACA,SAASC,uBAAT,EAAkCC,uBAAlC,EAA2DC,wBAA3D,QAA2F,mCAA3F;AACA,SAASC,aAAT,QAA8B,wBAA9B;AACA,MAAMC,qBAAqB,GAAG,EAA9B;AACA,OAAO,SAASC,kBAAT,CAA4BC,WAA5B,EAAyCC,WAAzC,EAAsD;AAC3D,SAAOV,KAAK,CAACW,OAAN,CAAc,MAAM;AACzB,QAAIC,qBAAJ;;AAEA,UAAMC,UAAU,GAAGX,WAAW,CAACY,aAAZ,EAAnB;;AAEA,QAAID,UAAU,IAAI,CAAC,CAACD,qBAAqB,GAAGL,qBAAqB,CAACE,WAAD,CAA9C,KAAgE,IAAhE,GAAuE,KAAK,CAA5E,GAAgFG,qBAAqB,CAACG,GAAvG,MAAgHF,UAAlI,EAA8I;AAC5I,aAAON,qBAAqB,CAACE,WAAD,CAArB,CAAmCO,MAA1C;AACD;;AAED,UAAMC,aAAa,GAAGhB,aAAa,CAACS,WAAD,EAAcG,UAAd,CAAnC;AACAN,IAAAA,qBAAqB,CAACE,WAAD,CAArB,GAAqC;AACnCM,MAAAA,GAAG,EAAEE,aAD8B;AAEnCD,MAAAA,MAAM,EAAEC;AAF2B,KAArC;;AAKA,QAAIA,aAAa,KAAKX,aAAa,CAACY,OAApC,EAA6C;AAC3Cd,MAAAA,uBAAuB;AACxB,KAFD,MAEO,IAAIa,aAAa,KAAKX,aAAa,CAACa,QAApC,EAA8C;AACnDd,MAAAA,wBAAwB;AACzB,KAFM,MAEA,IAAIY,aAAa,KAAKX,aAAa,CAACc,OAApC,EAA6C;AAClDjB,MAAAA,uBAAuB;AACxB;;AAED,WAAOc,aAAP;AACD,GAxBM,EAwBJ,CAACR,WAAD,EAAcC,WAAd,CAxBI,CAAP;AAyBD","sourcesContent":["import * as React from 'react';\nimport { verifyLicense } from '../verifyLicense/verifyLicense';\nimport { LicenseInfo } from '../utils/licenseInfo';\nimport { showExpiredLicenseError, showInvalidLicenseError, showNotFoundLicenseError } from '../utils/licenseErrorMessageUtils';\nimport { LicenseStatus } from '../utils/licenseStatus';\nconst sharedLicenseStatuses = {};\nexport function useLicenseVerifier(packageName, releaseInfo) {\n  return React.useMemo(() => {\n    var _sharedLicenseStatuse;\n\n    const licenseKey = LicenseInfo.getLicenseKey();\n\n    if (licenseKey && ((_sharedLicenseStatuse = sharedLicenseStatuses[packageName]) == null ? void 0 : _sharedLicenseStatuse.key) === licenseKey) {\n      return sharedLicenseStatuses[packageName].status;\n    }\n\n    const licenseStatus = verifyLicense(releaseInfo, licenseKey);\n    sharedLicenseStatuses[packageName] = {\n      key: licenseStatus,\n      status: licenseStatus\n    };\n\n    if (licenseStatus === LicenseStatus.Invalid) {\n      showInvalidLicenseError();\n    } else if (licenseStatus === LicenseStatus.NotFound) {\n      showNotFoundLicenseError();\n    } else if (licenseStatus === LicenseStatus.Expired) {\n      showExpiredLicenseError();\n    }\n\n    return licenseStatus;\n  }, [packageName, releaseInfo]);\n}"]},"metadata":{},"sourceType":"module"}