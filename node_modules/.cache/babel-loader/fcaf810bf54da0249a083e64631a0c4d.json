{"ast":null,"code":"import * as React from 'react';\nimport { useGridApiEventHandler, GridEvents, gridFilteredDescendantCountLookupSelector } from '@mui/x-data-grid';\n/**\n * Only available in DataGridPro\n */\n\nexport const useGridTreeData = apiRef => {\n  /**\n   * EVENTS\n   */\n  const handleCellKeyDown = React.useCallback((params, event) => {\n    const cellParams = apiRef.current.getCellParams(params.id, params.field);\n\n    if (cellParams.colDef.type === 'treeDataGroup' && event.key === ' ' && !event.shiftKey) {\n      var _gridFilteredDescenda;\n\n      event.stopPropagation();\n      event.preventDefault();\n      const filteredDescendantCount = (_gridFilteredDescenda = gridFilteredDescendantCountLookupSelector(apiRef)[params.id]) != null ? _gridFilteredDescenda : 0;\n\n      if (filteredDescendantCount === 0) {\n        return;\n      }\n\n      apiRef.current.setRowChildrenExpansion(params.id, !params.rowNode.childrenExpanded);\n    }\n  }, [apiRef]);\n  useGridApiEventHandler(apiRef, GridEvents.cellKeyDown, handleCellKeyDown);\n};","map":{"version":3,"sources":["C:/Users/Admin/Documents/KRS/Application1/client/node_modules/@mui/x-data-grid-pro/hooks/features/treeData/useGridTreeData.js"],"names":["React","useGridApiEventHandler","GridEvents","gridFilteredDescendantCountLookupSelector","useGridTreeData","apiRef","handleCellKeyDown","useCallback","params","event","cellParams","current","getCellParams","id","field","colDef","type","key","shiftKey","_gridFilteredDescenda","stopPropagation","preventDefault","filteredDescendantCount","setRowChildrenExpansion","rowNode","childrenExpanded","cellKeyDown"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,sBAAT,EAAiCC,UAAjC,EAA6CC,yCAA7C,QAA8F,kBAA9F;AAEA;AACA;AACA;;AACA,OAAO,MAAMC,eAAe,GAAGC,MAAM,IAAI;AACvC;AACF;AACA;AACE,QAAMC,iBAAiB,GAAGN,KAAK,CAACO,WAAN,CAAkB,CAACC,MAAD,EAASC,KAAT,KAAmB;AAC7D,UAAMC,UAAU,GAAGL,MAAM,CAACM,OAAP,CAAeC,aAAf,CAA6BJ,MAAM,CAACK,EAApC,EAAwCL,MAAM,CAACM,KAA/C,CAAnB;;AAEA,QAAIJ,UAAU,CAACK,MAAX,CAAkBC,IAAlB,KAA2B,eAA3B,IAA8CP,KAAK,CAACQ,GAAN,KAAc,GAA5D,IAAmE,CAACR,KAAK,CAACS,QAA9E,EAAwF;AACtF,UAAIC,qBAAJ;;AAEAV,MAAAA,KAAK,CAACW,eAAN;AACAX,MAAAA,KAAK,CAACY,cAAN;AACA,YAAMC,uBAAuB,GAAG,CAACH,qBAAqB,GAAGhB,yCAAyC,CAACE,MAAD,CAAzC,CAAkDG,MAAM,CAACK,EAAzD,CAAzB,KAA0F,IAA1F,GAAiGM,qBAAjG,GAAyH,CAAzJ;;AAEA,UAAIG,uBAAuB,KAAK,CAAhC,EAAmC;AACjC;AACD;;AAEDjB,MAAAA,MAAM,CAACM,OAAP,CAAeY,uBAAf,CAAuCf,MAAM,CAACK,EAA9C,EAAkD,CAACL,MAAM,CAACgB,OAAP,CAAeC,gBAAlE;AACD;AACF,GAhByB,EAgBvB,CAACpB,MAAD,CAhBuB,CAA1B;AAiBAJ,EAAAA,sBAAsB,CAACI,MAAD,EAASH,UAAU,CAACwB,WAApB,EAAiCpB,iBAAjC,CAAtB;AACD,CAtBM","sourcesContent":["import * as React from 'react';\nimport { useGridApiEventHandler, GridEvents, gridFilteredDescendantCountLookupSelector } from '@mui/x-data-grid';\n\n/**\n * Only available in DataGridPro\n */\nexport const useGridTreeData = apiRef => {\n  /**\n   * EVENTS\n   */\n  const handleCellKeyDown = React.useCallback((params, event) => {\n    const cellParams = apiRef.current.getCellParams(params.id, params.field);\n\n    if (cellParams.colDef.type === 'treeDataGroup' && event.key === ' ' && !event.shiftKey) {\n      var _gridFilteredDescenda;\n\n      event.stopPropagation();\n      event.preventDefault();\n      const filteredDescendantCount = (_gridFilteredDescenda = gridFilteredDescendantCountLookupSelector(apiRef)[params.id]) != null ? _gridFilteredDescenda : 0;\n\n      if (filteredDescendantCount === 0) {\n        return;\n      }\n\n      apiRef.current.setRowChildrenExpansion(params.id, !params.rowNode.childrenExpanded);\n    }\n  }, [apiRef]);\n  useGridApiEventHandler(apiRef, GridEvents.cellKeyDown, handleCellKeyDown);\n};"]},"metadata":{},"sourceType":"module"}