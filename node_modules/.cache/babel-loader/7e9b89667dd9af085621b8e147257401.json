{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useGridApiEventHandler, gridRowIdsSelector, GridEvents } from '@mui/x-data-grid';\n\nfunction cacheContentAndHeight(apiRef, getDetailPanelContent, getDetailPanelHeight) {\n  if (typeof getDetailPanelContent !== 'function') {\n    return {};\n  } // TODO change to lazy approach using a Proxy\n  // only call getDetailPanelContent when asked for an id\n\n\n  const rowIds = gridRowIdsSelector(apiRef);\n  const contentCache = rowIds.reduce((acc, id) => {\n    const params = apiRef.current.getRowParams(id);\n    acc[id] = getDetailPanelContent(params);\n    return acc;\n  }, {});\n  const heightCache = rowIds.reduce((acc, id) => {\n    if (contentCache[id] == null) {\n      return acc;\n    }\n\n    const params = apiRef.current.getRowParams(id);\n    acc[id] = getDetailPanelHeight(params);\n    return acc;\n  }, {});\n  return {\n    contentCache,\n    heightCache\n  };\n}\n\nexport const useGridDetailPanelCache = (apiRef, props) => {\n  const updateCaches = React.useCallback(() => {\n    apiRef.current.setState(state => {\n      return _extends({}, state, {\n        detailPanel: _extends({}, state.detailPanel, cacheContentAndHeight(apiRef, props.getDetailPanelContent, props.getDetailPanelHeight))\n      });\n    });\n    apiRef.current.forceUpdate();\n  }, [apiRef, props.getDetailPanelContent, props.getDetailPanelHeight]);\n  useGridApiEventHandler(apiRef, GridEvents.visibleRowsSet, updateCaches);\n  const isFirstRender = React.useRef(true);\n\n  if (isFirstRender.current) {\n    isFirstRender.current = false;\n    updateCaches();\n  }\n\n  React.useEffect(() => {\n    if (isFirstRender.current) {\n      return;\n    }\n\n    updateCaches();\n  }, [updateCaches]);\n};","map":{"version":3,"sources":["C:/Users/Admin/Documents/KRS/Application1/client/node_modules/@mui/x-data-grid-pro/hooks/features/detailPanel/useGridDetailPanelCache.js"],"names":["_extends","React","useGridApiEventHandler","gridRowIdsSelector","GridEvents","cacheContentAndHeight","apiRef","getDetailPanelContent","getDetailPanelHeight","rowIds","contentCache","reduce","acc","id","params","current","getRowParams","heightCache","useGridDetailPanelCache","props","updateCaches","useCallback","setState","state","detailPanel","forceUpdate","visibleRowsSet","isFirstRender","useRef","useEffect"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,oCAArB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAASC,sBAAT,EAAiCC,kBAAjC,EAAqDC,UAArD,QAAuE,kBAAvE;;AAEA,SAASC,qBAAT,CAA+BC,MAA/B,EAAuCC,qBAAvC,EAA8DC,oBAA9D,EAAoF;AAClF,MAAI,OAAOD,qBAAP,KAAiC,UAArC,EAAiD;AAC/C,WAAO,EAAP;AACD,GAHiF,CAGhF;AACF;;;AAGA,QAAME,MAAM,GAAGN,kBAAkB,CAACG,MAAD,CAAjC;AACA,QAAMI,YAAY,GAAGD,MAAM,CAACE,MAAP,CAAc,CAACC,GAAD,EAAMC,EAAN,KAAa;AAC9C,UAAMC,MAAM,GAAGR,MAAM,CAACS,OAAP,CAAeC,YAAf,CAA4BH,EAA5B,CAAf;AACAD,IAAAA,GAAG,CAACC,EAAD,CAAH,GAAUN,qBAAqB,CAACO,MAAD,CAA/B;AACA,WAAOF,GAAP;AACD,GAJoB,EAIlB,EAJkB,CAArB;AAKA,QAAMK,WAAW,GAAGR,MAAM,CAACE,MAAP,CAAc,CAACC,GAAD,EAAMC,EAAN,KAAa;AAC7C,QAAIH,YAAY,CAACG,EAAD,CAAZ,IAAoB,IAAxB,EAA8B;AAC5B,aAAOD,GAAP;AACD;;AAED,UAAME,MAAM,GAAGR,MAAM,CAACS,OAAP,CAAeC,YAAf,CAA4BH,EAA5B,CAAf;AACAD,IAAAA,GAAG,CAACC,EAAD,CAAH,GAAUL,oBAAoB,CAACM,MAAD,CAA9B;AACA,WAAOF,GAAP;AACD,GARmB,EAQjB,EARiB,CAApB;AASA,SAAO;AACLF,IAAAA,YADK;AAELO,IAAAA;AAFK,GAAP;AAID;;AAED,OAAO,MAAMC,uBAAuB,GAAG,CAACZ,MAAD,EAASa,KAAT,KAAmB;AACxD,QAAMC,YAAY,GAAGnB,KAAK,CAACoB,WAAN,CAAkB,MAAM;AAC3Cf,IAAAA,MAAM,CAACS,OAAP,CAAeO,QAAf,CAAwBC,KAAK,IAAI;AAC/B,aAAOvB,QAAQ,CAAC,EAAD,EAAKuB,KAAL,EAAY;AACzBC,QAAAA,WAAW,EAAExB,QAAQ,CAAC,EAAD,EAAKuB,KAAK,CAACC,WAAX,EAAwBnB,qBAAqB,CAACC,MAAD,EAASa,KAAK,CAACZ,qBAAf,EAAsCY,KAAK,CAACX,oBAA5C,CAA7C;AADI,OAAZ,CAAf;AAGD,KAJD;AAKAF,IAAAA,MAAM,CAACS,OAAP,CAAeU,WAAf;AACD,GAPoB,EAOlB,CAACnB,MAAD,EAASa,KAAK,CAACZ,qBAAf,EAAsCY,KAAK,CAACX,oBAA5C,CAPkB,CAArB;AAQAN,EAAAA,sBAAsB,CAACI,MAAD,EAASF,UAAU,CAACsB,cAApB,EAAoCN,YAApC,CAAtB;AACA,QAAMO,aAAa,GAAG1B,KAAK,CAAC2B,MAAN,CAAa,IAAb,CAAtB;;AAEA,MAAID,aAAa,CAACZ,OAAlB,EAA2B;AACzBY,IAAAA,aAAa,CAACZ,OAAd,GAAwB,KAAxB;AACAK,IAAAA,YAAY;AACb;;AAEDnB,EAAAA,KAAK,CAAC4B,SAAN,CAAgB,MAAM;AACpB,QAAIF,aAAa,CAACZ,OAAlB,EAA2B;AACzB;AACD;;AAEDK,IAAAA,YAAY;AACb,GAND,EAMG,CAACA,YAAD,CANH;AAOD,CAxBM","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useGridApiEventHandler, gridRowIdsSelector, GridEvents } from '@mui/x-data-grid';\n\nfunction cacheContentAndHeight(apiRef, getDetailPanelContent, getDetailPanelHeight) {\n  if (typeof getDetailPanelContent !== 'function') {\n    return {};\n  } // TODO change to lazy approach using a Proxy\n  // only call getDetailPanelContent when asked for an id\n\n\n  const rowIds = gridRowIdsSelector(apiRef);\n  const contentCache = rowIds.reduce((acc, id) => {\n    const params = apiRef.current.getRowParams(id);\n    acc[id] = getDetailPanelContent(params);\n    return acc;\n  }, {});\n  const heightCache = rowIds.reduce((acc, id) => {\n    if (contentCache[id] == null) {\n      return acc;\n    }\n\n    const params = apiRef.current.getRowParams(id);\n    acc[id] = getDetailPanelHeight(params);\n    return acc;\n  }, {});\n  return {\n    contentCache,\n    heightCache\n  };\n}\n\nexport const useGridDetailPanelCache = (apiRef, props) => {\n  const updateCaches = React.useCallback(() => {\n    apiRef.current.setState(state => {\n      return _extends({}, state, {\n        detailPanel: _extends({}, state.detailPanel, cacheContentAndHeight(apiRef, props.getDetailPanelContent, props.getDetailPanelHeight))\n      });\n    });\n    apiRef.current.forceUpdate();\n  }, [apiRef, props.getDetailPanelContent, props.getDetailPanelHeight]);\n  useGridApiEventHandler(apiRef, GridEvents.visibleRowsSet, updateCaches);\n  const isFirstRender = React.useRef(true);\n\n  if (isFirstRender.current) {\n    isFirstRender.current = false;\n    updateCaches();\n  }\n\n  React.useEffect(() => {\n    if (isFirstRender.current) {\n      return;\n    }\n\n    updateCaches();\n  }, [updateCaches]);\n};"]},"metadata":{},"sourceType":"module"}