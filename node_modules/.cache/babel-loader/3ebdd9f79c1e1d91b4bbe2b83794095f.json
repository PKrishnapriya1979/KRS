{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { GridEvents, useGridSelector, useGridApiEventHandler, useGridApiMethod } from '@mui/x-data-grid';\nimport { useGridRegisterPreProcessor } from '@mui/x-data-grid/internals';\nimport { GRID_DETAIL_PANEL_TOGGLE_FIELD } from './gridDetailPanelToggleColDef';\nimport { gridDetailPanelExpandedRowIdsSelector, gridDetailPanelExpandedRowsContentCacheSelector, gridDetailPanelExpandedRowsHeightCacheSelector } from './gridDetailPanelSelector';\nexport const detailPanelStateInitializer = (state, props) => {\n  var _ref, _props$detailPanelExp, _props$initialState, _props$initialState$d;\n\n  return _extends({}, state, {\n    detailPanel: {\n      expandedRowIds: (_ref = (_props$detailPanelExp = props.detailPanelExpandedRowIds) != null ? _props$detailPanelExp : (_props$initialState = props.initialState) == null ? void 0 : (_props$initialState$d = _props$initialState.detailPanel) == null ? void 0 : _props$initialState$d.expandedRowIds) != null ? _ref : []\n    }\n  });\n};\nexport const useGridDetailPanel = (apiRef, props) => {\n  const expandedRowIds = useGridSelector(apiRef, gridDetailPanelExpandedRowIdsSelector);\n  const contentCache = useGridSelector(apiRef, gridDetailPanelExpandedRowsContentCacheSelector);\n  const handleCellClick = React.useCallback((params, event) => {\n    if (params.field !== GRID_DETAIL_PANEL_TOGGLE_FIELD || props.getDetailPanelContent == null) {\n      return;\n    }\n\n    const content = contentCache[params.id];\n\n    if (! /*#__PURE__*/React.isValidElement(content)) {\n      return;\n    } // Ignore if the user didn't click specifically in the \"i\" button\n\n\n    if (event.target === event.currentTarget) {\n      return;\n    }\n\n    apiRef.current.toggleDetailPanel(params.id);\n  }, [apiRef, contentCache, props.getDetailPanelContent]);\n  const handleCellKeyDown = React.useCallback((params, event) => {\n    if (!event.ctrlKey || event.key !== 'Enter' || props.getDetailPanelContent == null) {\n      return;\n    }\n\n    apiRef.current.toggleDetailPanel(params.id);\n  }, [apiRef, props.getDetailPanelContent]);\n  useGridApiEventHandler(apiRef, GridEvents.cellClick, handleCellClick);\n  useGridApiEventHandler(apiRef, GridEvents.cellKeyDown, handleCellKeyDown);\n  const addDetailHeight = React.useCallback((initialValue, row) => {\n    var _heightCache$row$id;\n\n    if (expandedRowIds.length === 0 || !expandedRowIds.includes(row.id)) {\n      return _extends({}, initialValue, {\n        detail: 0\n      });\n    }\n\n    const heightCache = gridDetailPanelExpandedRowsHeightCacheSelector(apiRef.current.state);\n    return _extends({}, initialValue, {\n      detail: (_heightCache$row$id = heightCache[row.id]) != null ? _heightCache$row$id : 0 // Fallback to zero because the cache might not be ready yet (e.g. page was changed)\n\n    });\n  }, [apiRef, expandedRowIds]);\n  useGridRegisterPreProcessor(apiRef, 'rowHeight', addDetailHeight);\n  apiRef.current.unstable_updateControlState({\n    stateId: 'detailPanels',\n    propModel: props.detailPanelExpandedRowIds,\n    propOnChange: props.onDetailPanelExpandedRowIdsChange,\n    stateSelector: gridDetailPanelExpandedRowIdsSelector,\n    changeEvent: GridEvents.detailPanelsExpandedRowIdsChange\n  });\n  const toggleDetailPanel = React.useCallback(id => {\n    if (props.getDetailPanelContent == null) {\n      return;\n    }\n\n    const content = contentCache[id];\n\n    if (! /*#__PURE__*/React.isValidElement(content)) {\n      return;\n    }\n\n    const ids = apiRef.current.getExpandedDetailPanels();\n    apiRef.current.setExpandedDetailPanels(ids.includes(id) ? ids.filter(rowId => rowId !== id) : [...ids, id]);\n  }, [apiRef, contentCache, props.getDetailPanelContent]);\n  const getExpandedDetailPanels = React.useCallback(() => gridDetailPanelExpandedRowIdsSelector(apiRef.current.state), [apiRef]);\n  const setExpandedDetailPanels = React.useCallback(ids => {\n    apiRef.current.setState(state => {\n      return _extends({}, state, {\n        detailPanel: _extends({}, state.detailPanel, {\n          expandedRowIds: ids\n        })\n      });\n    });\n    apiRef.current.forceUpdate();\n  }, [apiRef]);\n  const detailPanelApi = {\n    toggleDetailPanel,\n    getExpandedDetailPanels,\n    setExpandedDetailPanels\n  };\n  useGridApiMethod(apiRef, detailPanelApi, 'detailPanelApi');\n  React.useEffect(() => {\n    if (props.detailPanelExpandedRowIds) {\n      const currentModel = gridDetailPanelExpandedRowIdsSelector(apiRef.current.state);\n\n      if (currentModel !== props.detailPanelExpandedRowIds) {\n        apiRef.current.setExpandedDetailPanels(props.detailPanelExpandedRowIds);\n      }\n    }\n  }, [apiRef, props.detailPanelExpandedRowIds]);\n};","map":{"version":3,"sources":["C:/Users/Admin/Documents/KRS/Application1/client/node_modules/@mui/x-data-grid-pro/hooks/features/detailPanel/useGridDetailPanel.js"],"names":["_extends","React","GridEvents","useGridSelector","useGridApiEventHandler","useGridApiMethod","useGridRegisterPreProcessor","GRID_DETAIL_PANEL_TOGGLE_FIELD","gridDetailPanelExpandedRowIdsSelector","gridDetailPanelExpandedRowsContentCacheSelector","gridDetailPanelExpandedRowsHeightCacheSelector","detailPanelStateInitializer","state","props","_ref","_props$detailPanelExp","_props$initialState","_props$initialState$d","detailPanel","expandedRowIds","detailPanelExpandedRowIds","initialState","useGridDetailPanel","apiRef","contentCache","handleCellClick","useCallback","params","event","field","getDetailPanelContent","content","id","isValidElement","target","currentTarget","current","toggleDetailPanel","handleCellKeyDown","ctrlKey","key","cellClick","cellKeyDown","addDetailHeight","initialValue","row","_heightCache$row$id","length","includes","detail","heightCache","unstable_updateControlState","stateId","propModel","propOnChange","onDetailPanelExpandedRowIdsChange","stateSelector","changeEvent","detailPanelsExpandedRowIdsChange","ids","getExpandedDetailPanels","setExpandedDetailPanels","filter","rowId","setState","forceUpdate","detailPanelApi","useEffect","currentModel"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { GridEvents, useGridSelector, useGridApiEventHandler, useGridApiMethod } from '@mui/x-data-grid';\nimport { useGridRegisterPreProcessor } from '@mui/x-data-grid/internals';\nimport { GRID_DETAIL_PANEL_TOGGLE_FIELD } from './gridDetailPanelToggleColDef';\nimport { gridDetailPanelExpandedRowIdsSelector, gridDetailPanelExpandedRowsContentCacheSelector, gridDetailPanelExpandedRowsHeightCacheSelector } from './gridDetailPanelSelector';\nexport const detailPanelStateInitializer = (state, props) => {\n  var _ref, _props$detailPanelExp, _props$initialState, _props$initialState$d;\n\n  return _extends({}, state, {\n    detailPanel: {\n      expandedRowIds: (_ref = (_props$detailPanelExp = props.detailPanelExpandedRowIds) != null ? _props$detailPanelExp : (_props$initialState = props.initialState) == null ? void 0 : (_props$initialState$d = _props$initialState.detailPanel) == null ? void 0 : _props$initialState$d.expandedRowIds) != null ? _ref : []\n    }\n  });\n};\nexport const useGridDetailPanel = (apiRef, props) => {\n  const expandedRowIds = useGridSelector(apiRef, gridDetailPanelExpandedRowIdsSelector);\n  const contentCache = useGridSelector(apiRef, gridDetailPanelExpandedRowsContentCacheSelector);\n  const handleCellClick = React.useCallback((params, event) => {\n    if (params.field !== GRID_DETAIL_PANEL_TOGGLE_FIELD || props.getDetailPanelContent == null) {\n      return;\n    }\n\n    const content = contentCache[params.id];\n\n    if (! /*#__PURE__*/React.isValidElement(content)) {\n      return;\n    } // Ignore if the user didn't click specifically in the \"i\" button\n\n\n    if (event.target === event.currentTarget) {\n      return;\n    }\n\n    apiRef.current.toggleDetailPanel(params.id);\n  }, [apiRef, contentCache, props.getDetailPanelContent]);\n  const handleCellKeyDown = React.useCallback((params, event) => {\n    if (!event.ctrlKey || event.key !== 'Enter' || props.getDetailPanelContent == null) {\n      return;\n    }\n\n    apiRef.current.toggleDetailPanel(params.id);\n  }, [apiRef, props.getDetailPanelContent]);\n  useGridApiEventHandler(apiRef, GridEvents.cellClick, handleCellClick);\n  useGridApiEventHandler(apiRef, GridEvents.cellKeyDown, handleCellKeyDown);\n  const addDetailHeight = React.useCallback((initialValue, row) => {\n    var _heightCache$row$id;\n\n    if (expandedRowIds.length === 0 || !expandedRowIds.includes(row.id)) {\n      return _extends({}, initialValue, {\n        detail: 0\n      });\n    }\n\n    const heightCache = gridDetailPanelExpandedRowsHeightCacheSelector(apiRef.current.state);\n    return _extends({}, initialValue, {\n      detail: (_heightCache$row$id = heightCache[row.id]) != null ? _heightCache$row$id : 0 // Fallback to zero because the cache might not be ready yet (e.g. page was changed)\n\n    });\n  }, [apiRef, expandedRowIds]);\n  useGridRegisterPreProcessor(apiRef, 'rowHeight', addDetailHeight);\n  apiRef.current.unstable_updateControlState({\n    stateId: 'detailPanels',\n    propModel: props.detailPanelExpandedRowIds,\n    propOnChange: props.onDetailPanelExpandedRowIdsChange,\n    stateSelector: gridDetailPanelExpandedRowIdsSelector,\n    changeEvent: GridEvents.detailPanelsExpandedRowIdsChange\n  });\n  const toggleDetailPanel = React.useCallback(id => {\n    if (props.getDetailPanelContent == null) {\n      return;\n    }\n\n    const content = contentCache[id];\n\n    if (! /*#__PURE__*/React.isValidElement(content)) {\n      return;\n    }\n\n    const ids = apiRef.current.getExpandedDetailPanels();\n    apiRef.current.setExpandedDetailPanels(ids.includes(id) ? ids.filter(rowId => rowId !== id) : [...ids, id]);\n  }, [apiRef, contentCache, props.getDetailPanelContent]);\n  const getExpandedDetailPanels = React.useCallback(() => gridDetailPanelExpandedRowIdsSelector(apiRef.current.state), [apiRef]);\n  const setExpandedDetailPanels = React.useCallback(ids => {\n    apiRef.current.setState(state => {\n      return _extends({}, state, {\n        detailPanel: _extends({}, state.detailPanel, {\n          expandedRowIds: ids\n        })\n      });\n    });\n    apiRef.current.forceUpdate();\n  }, [apiRef]);\n  const detailPanelApi = {\n    toggleDetailPanel,\n    getExpandedDetailPanels,\n    setExpandedDetailPanels\n  };\n  useGridApiMethod(apiRef, detailPanelApi, 'detailPanelApi');\n  React.useEffect(() => {\n    if (props.detailPanelExpandedRowIds) {\n      const currentModel = gridDetailPanelExpandedRowIdsSelector(apiRef.current.state);\n\n      if (currentModel !== props.detailPanelExpandedRowIds) {\n        apiRef.current.setExpandedDetailPanels(props.detailPanelExpandedRowIds);\n      }\n    }\n  }, [apiRef, props.detailPanelExpandedRowIds]);\n};"]},"metadata":{},"sourceType":"module"}