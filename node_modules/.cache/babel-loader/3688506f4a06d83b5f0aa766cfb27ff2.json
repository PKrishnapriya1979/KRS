{"ast":null,"code":"import { base64Decode, base64Encode } from '../encoding/base64';\nimport { md5 } from '../encoding/md5';\nimport { LicenseStatus } from '../utils/licenseStatus';\nexport function generateReleaseInfo() {\n  const today = new Date();\n  today.setHours(0, 0, 0, 0);\n  return base64Encode(today.getTime().toString());\n}\nconst expiryReg = /^.*EXPIRY=([0-9]+),.*$/;\nexport function verifyLicense(releaseInfo, encodedLicense) {\n  if (!releaseInfo) {\n    throw new Error('MUI: The release information is missing. Not able to validate license.');\n  }\n\n  if (!encodedLicense) {\n    return LicenseStatus.NotFound;\n  }\n\n  const hash = encodedLicense.substr(0, 32);\n  const encoded = encodedLicense.substr(32);\n\n  if (hash !== md5(encoded)) {\n    return LicenseStatus.Invalid;\n  }\n\n  const clearLicense = base64Decode(encoded);\n  let expiryTimestamp = 0;\n\n  try {\n    expiryTimestamp = parseInt(clearLicense.match(expiryReg)[1], 10);\n\n    if (!expiryTimestamp || Number.isNaN(expiryTimestamp)) {\n      console.error('Error checking license. Expiry timestamp not found or invalid!');\n      return LicenseStatus.Invalid;\n    }\n  } catch (err) {\n    console.error('Error extracting license expiry timestamp.', err);\n    return LicenseStatus.Invalid;\n  }\n\n  const pkgTimestamp = parseInt(base64Decode(releaseInfo), 10);\n\n  if (Number.isNaN(pkgTimestamp)) {\n    throw new Error('MUI: The release information is invalid. Not able to validate license.');\n  }\n\n  if (expiryTimestamp < pkgTimestamp) {\n    return LicenseStatus.Expired;\n  }\n\n  return LicenseStatus.Valid;\n}","map":{"version":3,"sources":["C:/Users/Admin/Documents/KRS/Application1/client/node_modules/@mui/x-license-pro/verifyLicense/verifyLicense.js"],"names":["base64Decode","base64Encode","md5","LicenseStatus","generateReleaseInfo","today","Date","setHours","getTime","toString","expiryReg","verifyLicense","releaseInfo","encodedLicense","Error","NotFound","hash","substr","encoded","Invalid","clearLicense","expiryTimestamp","parseInt","match","Number","isNaN","console","error","err","pkgTimestamp","Expired","Valid"],"mappings":"AAAA,SAASA,YAAT,EAAuBC,YAAvB,QAA2C,oBAA3C;AACA,SAASC,GAAT,QAAoB,iBAApB;AACA,SAASC,aAAT,QAA8B,wBAA9B;AACA,OAAO,SAASC,mBAAT,GAA+B;AACpC,QAAMC,KAAK,GAAG,IAAIC,IAAJ,EAAd;AACAD,EAAAA,KAAK,CAACE,QAAN,CAAe,CAAf,EAAkB,CAAlB,EAAqB,CAArB,EAAwB,CAAxB;AACA,SAAON,YAAY,CAACI,KAAK,CAACG,OAAN,GAAgBC,QAAhB,EAAD,CAAnB;AACD;AACD,MAAMC,SAAS,GAAG,wBAAlB;AACA,OAAO,SAASC,aAAT,CAAuBC,WAAvB,EAAoCC,cAApC,EAAoD;AACzD,MAAI,CAACD,WAAL,EAAkB;AAChB,UAAM,IAAIE,KAAJ,CAAU,wEAAV,CAAN;AACD;;AAED,MAAI,CAACD,cAAL,EAAqB;AACnB,WAAOV,aAAa,CAACY,QAArB;AACD;;AAED,QAAMC,IAAI,GAAGH,cAAc,CAACI,MAAf,CAAsB,CAAtB,EAAyB,EAAzB,CAAb;AACA,QAAMC,OAAO,GAAGL,cAAc,CAACI,MAAf,CAAsB,EAAtB,CAAhB;;AAEA,MAAID,IAAI,KAAKd,GAAG,CAACgB,OAAD,CAAhB,EAA2B;AACzB,WAAOf,aAAa,CAACgB,OAArB;AACD;;AAED,QAAMC,YAAY,GAAGpB,YAAY,CAACkB,OAAD,CAAjC;AACA,MAAIG,eAAe,GAAG,CAAtB;;AAEA,MAAI;AACFA,IAAAA,eAAe,GAAGC,QAAQ,CAACF,YAAY,CAACG,KAAb,CAAmBb,SAAnB,EAA8B,CAA9B,CAAD,EAAmC,EAAnC,CAA1B;;AAEA,QAAI,CAACW,eAAD,IAAoBG,MAAM,CAACC,KAAP,CAAaJ,eAAb,CAAxB,EAAuD;AACrDK,MAAAA,OAAO,CAACC,KAAR,CAAc,gEAAd;AACA,aAAOxB,aAAa,CAACgB,OAArB;AACD;AACF,GAPD,CAOE,OAAOS,GAAP,EAAY;AACZF,IAAAA,OAAO,CAACC,KAAR,CAAc,4CAAd,EAA4DC,GAA5D;AACA,WAAOzB,aAAa,CAACgB,OAArB;AACD;;AAED,QAAMU,YAAY,GAAGP,QAAQ,CAACtB,YAAY,CAACY,WAAD,CAAb,EAA4B,EAA5B,CAA7B;;AAEA,MAAIY,MAAM,CAACC,KAAP,CAAaI,YAAb,CAAJ,EAAgC;AAC9B,UAAM,IAAIf,KAAJ,CAAU,wEAAV,CAAN;AACD;;AAED,MAAIO,eAAe,GAAGQ,YAAtB,EAAoC;AAClC,WAAO1B,aAAa,CAAC2B,OAArB;AACD;;AAED,SAAO3B,aAAa,CAAC4B,KAArB;AACD","sourcesContent":["import { base64Decode, base64Encode } from '../encoding/base64';\nimport { md5 } from '../encoding/md5';\nimport { LicenseStatus } from '../utils/licenseStatus';\nexport function generateReleaseInfo() {\n  const today = new Date();\n  today.setHours(0, 0, 0, 0);\n  return base64Encode(today.getTime().toString());\n}\nconst expiryReg = /^.*EXPIRY=([0-9]+),.*$/;\nexport function verifyLicense(releaseInfo, encodedLicense) {\n  if (!releaseInfo) {\n    throw new Error('MUI: The release information is missing. Not able to validate license.');\n  }\n\n  if (!encodedLicense) {\n    return LicenseStatus.NotFound;\n  }\n\n  const hash = encodedLicense.substr(0, 32);\n  const encoded = encodedLicense.substr(32);\n\n  if (hash !== md5(encoded)) {\n    return LicenseStatus.Invalid;\n  }\n\n  const clearLicense = base64Decode(encoded);\n  let expiryTimestamp = 0;\n\n  try {\n    expiryTimestamp = parseInt(clearLicense.match(expiryReg)[1], 10);\n\n    if (!expiryTimestamp || Number.isNaN(expiryTimestamp)) {\n      console.error('Error checking license. Expiry timestamp not found or invalid!');\n      return LicenseStatus.Invalid;\n    }\n  } catch (err) {\n    console.error('Error extracting license expiry timestamp.', err);\n    return LicenseStatus.Invalid;\n  }\n\n  const pkgTimestamp = parseInt(base64Decode(releaseInfo), 10);\n\n  if (Number.isNaN(pkgTimestamp)) {\n    throw new Error('MUI: The release information is invalid. Not able to validate license.');\n  }\n\n  if (expiryTimestamp < pkgTimestamp) {\n    return LicenseStatus.Expired;\n  }\n\n  return LicenseStatus.Valid;\n}"]},"metadata":{},"sourceType":"module"}