{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { gridColumnLookupSelector, gridRowIdsSelector, gridRowTreeSelector, useFirstRender } from '@mui/x-data-grid';\nimport { useGridRegisterPreProcessor, useGridRegisterStrategyProcessor } from '@mui/x-data-grid/internals';\nimport { gridRowGroupingModelSelector, gridRowGroupingSanitizedModelSelector } from './gridRowGroupingSelector';\nimport { createGroupingColDefForAllGroupingCriteria, createGroupingColDefForOneGroupingCriteria } from './createGroupingColDef';\nimport { filterRowTreeFromGroupingColumns, getColDefOverrides, ROW_GROUPING_STRATEGY, isGroupingColumn, setStrategyAvailability } from './gridRowGroupingUtils';\nimport { buildRowTree } from '../../../utils/tree/buildRowTree';\nimport { sortRowTree } from '../../../utils/tree/sortRowTree';\nexport const useGridRowGroupingPreProcessors = (apiRef, props) => {\n  const getGroupingColDefs = React.useCallback(columnsState => {\n    if (props.disableRowGrouping) {\n      return [];\n    }\n\n    const groupingColDefProp = props.groupingColDef; // We can't use `gridGroupingRowsSanitizedModelSelector` here because the new columns are not in the state yet\n\n    const rowGroupingModel = gridRowGroupingModelSelector(apiRef).filter(field => !!columnsState.lookup[field]);\n\n    if (rowGroupingModel.length === 0) {\n      return [];\n    }\n\n    switch (props.rowGroupingColumnMode) {\n      case 'single':\n        {\n          return [createGroupingColDefForAllGroupingCriteria({\n            apiRef,\n            rowGroupingModel,\n            colDefOverride: getColDefOverrides(groupingColDefProp, rowGroupingModel),\n            columnsLookup: columnsState.lookup\n          })];\n        }\n\n      case 'multiple':\n        {\n          return rowGroupingModel.map(groupingCriteria => createGroupingColDefForOneGroupingCriteria({\n            groupingCriteria,\n            colDefOverride: getColDefOverrides(groupingColDefProp, [groupingCriteria]),\n            groupedByColDef: columnsState.lookup[groupingCriteria],\n            columnsLookup: columnsState.lookup\n          }));\n        }\n\n      default:\n        {\n          return [];\n        }\n    }\n  }, [apiRef, props.groupingColDef, props.rowGroupingColumnMode, props.disableRowGrouping]);\n  const updateGroupingColumn = React.useCallback(columnsState => {\n    const groupingColDefs = getGroupingColDefs(columnsState);\n    let newColumnFields = [];\n    const newColumnsLookup = {}; // We only keep the non-grouping columns\n\n    columnsState.all.forEach(field => {\n      if (!isGroupingColumn(field)) {\n        newColumnFields.push(field);\n        newColumnsLookup[field] = columnsState.lookup[field];\n      }\n    }); // We add the grouping column\n\n    groupingColDefs.forEach(groupingColDef => {\n      const matchingGroupingColDef = columnsState.lookup[groupingColDef.field];\n\n      if (matchingGroupingColDef) {\n        groupingColDef.width = matchingGroupingColDef.width;\n        groupingColDef.flex = matchingGroupingColDef.flex;\n      }\n\n      newColumnsLookup[groupingColDef.field] = groupingColDef;\n    });\n    const startIndex = newColumnFields[0] === '__check__' ? 1 : 0;\n    newColumnFields = [...newColumnFields.slice(0, startIndex), ...groupingColDefs.map(colDef => colDef.field), ...newColumnFields.slice(startIndex)];\n    columnsState.all = newColumnFields;\n    columnsState.lookup = newColumnsLookup;\n    return columnsState;\n  }, [getGroupingColDefs]);\n  const createRowTree = React.useCallback(params => {\n    const rowGroupingModel = gridRowGroupingSanitizedModelSelector(apiRef);\n    const columnsLookup = gridColumnLookupSelector(apiRef);\n    apiRef.current.setState(state => _extends({}, state, {\n      rowGrouping: _extends({}, state.rowGrouping, {\n        unstable_sanitizedModelOnLastRowTreeCreation: rowGroupingModel\n      })\n    }));\n    const distinctValues = Object.fromEntries(rowGroupingModel.map(groupingField => [groupingField, {\n      lookup: {},\n      list: []\n    }]));\n\n    const getCellGroupingCriteria = _ref => {\n      let {\n        row,\n        id,\n        colDef\n      } = _ref;\n      let key;\n\n      if (colDef.groupingValueGetter) {\n        const groupingValueGetterParams = {\n          colDef,\n          field: colDef.field,\n          value: row[colDef.field],\n          id,\n          row,\n          rowNode: {\n            isAutoGenerated: false,\n            id\n          }\n        };\n        key = colDef.groupingValueGetter(groupingValueGetterParams);\n      } else {\n        key = row[colDef.field];\n      }\n\n      return {\n        key,\n        field: colDef.field\n      };\n    };\n\n    params.ids.forEach(rowId => {\n      const row = params.idRowsLookup[rowId];\n      rowGroupingModel.forEach(groupingCriteria => {\n        const {\n          key\n        } = getCellGroupingCriteria({\n          row,\n          id: rowId,\n          colDef: columnsLookup[groupingCriteria]\n        });\n        const groupingFieldsDistinctKeys = distinctValues[groupingCriteria];\n\n        if (key != null && !groupingFieldsDistinctKeys.lookup[key.toString()]) {\n          groupingFieldsDistinctKeys.lookup[key.toString()] = true;\n          groupingFieldsDistinctKeys.list.push(key);\n        }\n      });\n    });\n    const rows = params.ids.map(rowId => {\n      const row = params.idRowsLookup[rowId];\n      const parentPath = rowGroupingModel.map(groupingField => getCellGroupingCriteria({\n        row,\n        id: rowId,\n        colDef: columnsLookup[groupingField]\n      })).filter(cell => cell.key != null);\n      const leafGroupingCriteria = {\n        key: rowId.toString(),\n        field: null\n      };\n      return {\n        path: [...parentPath, leafGroupingCriteria],\n        id: rowId\n      };\n    });\n    return buildRowTree(_extends({}, params, {\n      rows,\n      defaultGroupingExpansionDepth: props.defaultGroupingExpansionDepth,\n      isGroupExpandedByDefault: props.isGroupExpandedByDefault,\n      groupingName: ROW_GROUPING_STRATEGY\n    }));\n  }, [apiRef, props.defaultGroupingExpansionDepth, props.isGroupExpandedByDefault]);\n  const filterRows = React.useCallback(params => {\n    const rowTree = gridRowTreeSelector(apiRef);\n    return filterRowTreeFromGroupingColumns({\n      rowTree,\n      isRowMatchingFilters: params.isRowMatchingFilters\n    });\n  }, [apiRef]);\n  const sortRows = React.useCallback(params => {\n    const rowTree = gridRowTreeSelector(apiRef);\n    const rowIds = gridRowIdsSelector(apiRef);\n    return sortRowTree({\n      rowTree,\n      rowIds,\n      sortRowList: params.sortRowList,\n      disableChildrenSorting: false\n    });\n  }, [apiRef]);\n  useGridRegisterPreProcessor(apiRef, 'hydrateColumns', updateGroupingColumn);\n  useGridRegisterStrategyProcessor(apiRef, ROW_GROUPING_STRATEGY, 'rowTreeCreation', createRowTree);\n  useGridRegisterStrategyProcessor(apiRef, ROW_GROUPING_STRATEGY, 'filtering', filterRows);\n  useGridRegisterStrategyProcessor(apiRef, ROW_GROUPING_STRATEGY, 'sorting', sortRows);\n  /**\n   * 1ST RENDER\n   */\n\n  useFirstRender(() => {\n    setStrategyAvailability(apiRef, props.disableRowGrouping);\n  });\n  /**\n   * EFFECTS\n   */\n\n  const isFirstRender = React.useRef(true);\n  React.useEffect(() => {\n    if (!isFirstRender.current) {\n      setStrategyAvailability(apiRef, props.disableRowGrouping);\n    } else {\n      isFirstRender.current = false;\n    }\n  }, [apiRef, props.disableRowGrouping]);\n};","map":{"version":3,"sources":["C:/Users/Admin/Documents/KRS/Application1/client/node_modules/@mui/x-data-grid-pro/hooks/features/rowGrouping/useGridRowGroupingPreProcessors.js"],"names":["_extends","React","gridColumnLookupSelector","gridRowIdsSelector","gridRowTreeSelector","useFirstRender","useGridRegisterPreProcessor","useGridRegisterStrategyProcessor","gridRowGroupingModelSelector","gridRowGroupingSanitizedModelSelector","createGroupingColDefForAllGroupingCriteria","createGroupingColDefForOneGroupingCriteria","filterRowTreeFromGroupingColumns","getColDefOverrides","ROW_GROUPING_STRATEGY","isGroupingColumn","setStrategyAvailability","buildRowTree","sortRowTree","useGridRowGroupingPreProcessors","apiRef","props","getGroupingColDefs","useCallback","columnsState","disableRowGrouping","groupingColDefProp","groupingColDef","rowGroupingModel","filter","field","lookup","length","rowGroupingColumnMode","colDefOverride","columnsLookup","map","groupingCriteria","groupedByColDef","updateGroupingColumn","groupingColDefs","newColumnFields","newColumnsLookup","all","forEach","push","matchingGroupingColDef","width","flex","startIndex","slice","colDef","createRowTree","params","current","setState","state","rowGrouping","unstable_sanitizedModelOnLastRowTreeCreation","distinctValues","Object","fromEntries","groupingField","list","getCellGroupingCriteria","row","id","key","groupingValueGetter","groupingValueGetterParams","value","rowNode","isAutoGenerated","ids","rowId","idRowsLookup","groupingFieldsDistinctKeys","toString","rows","parentPath","cell","leafGroupingCriteria","path","defaultGroupingExpansionDepth","isGroupExpandedByDefault","groupingName","filterRows","rowTree","isRowMatchingFilters","sortRows","rowIds","sortRowList","disableChildrenSorting","isFirstRender","useRef","useEffect"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { gridColumnLookupSelector, gridRowIdsSelector, gridRowTreeSelector, useFirstRender } from '@mui/x-data-grid';\nimport { useGridRegisterPreProcessor, useGridRegisterStrategyProcessor } from '@mui/x-data-grid/internals';\nimport { gridRowGroupingModelSelector, gridRowGroupingSanitizedModelSelector } from './gridRowGroupingSelector';\nimport { createGroupingColDefForAllGroupingCriteria, createGroupingColDefForOneGroupingCriteria } from './createGroupingColDef';\nimport { filterRowTreeFromGroupingColumns, getColDefOverrides, ROW_GROUPING_STRATEGY, isGroupingColumn, setStrategyAvailability } from './gridRowGroupingUtils';\nimport { buildRowTree } from '../../../utils/tree/buildRowTree';\nimport { sortRowTree } from '../../../utils/tree/sortRowTree';\nexport const useGridRowGroupingPreProcessors = (apiRef, props) => {\n  const getGroupingColDefs = React.useCallback(columnsState => {\n    if (props.disableRowGrouping) {\n      return [];\n    }\n\n    const groupingColDefProp = props.groupingColDef; // We can't use `gridGroupingRowsSanitizedModelSelector` here because the new columns are not in the state yet\n\n    const rowGroupingModel = gridRowGroupingModelSelector(apiRef).filter(field => !!columnsState.lookup[field]);\n\n    if (rowGroupingModel.length === 0) {\n      return [];\n    }\n\n    switch (props.rowGroupingColumnMode) {\n      case 'single':\n        {\n          return [createGroupingColDefForAllGroupingCriteria({\n            apiRef,\n            rowGroupingModel,\n            colDefOverride: getColDefOverrides(groupingColDefProp, rowGroupingModel),\n            columnsLookup: columnsState.lookup\n          })];\n        }\n\n      case 'multiple':\n        {\n          return rowGroupingModel.map(groupingCriteria => createGroupingColDefForOneGroupingCriteria({\n            groupingCriteria,\n            colDefOverride: getColDefOverrides(groupingColDefProp, [groupingCriteria]),\n            groupedByColDef: columnsState.lookup[groupingCriteria],\n            columnsLookup: columnsState.lookup\n          }));\n        }\n\n      default:\n        {\n          return [];\n        }\n    }\n  }, [apiRef, props.groupingColDef, props.rowGroupingColumnMode, props.disableRowGrouping]);\n  const updateGroupingColumn = React.useCallback(columnsState => {\n    const groupingColDefs = getGroupingColDefs(columnsState);\n    let newColumnFields = [];\n    const newColumnsLookup = {}; // We only keep the non-grouping columns\n\n    columnsState.all.forEach(field => {\n      if (!isGroupingColumn(field)) {\n        newColumnFields.push(field);\n        newColumnsLookup[field] = columnsState.lookup[field];\n      }\n    }); // We add the grouping column\n\n    groupingColDefs.forEach(groupingColDef => {\n      const matchingGroupingColDef = columnsState.lookup[groupingColDef.field];\n\n      if (matchingGroupingColDef) {\n        groupingColDef.width = matchingGroupingColDef.width;\n        groupingColDef.flex = matchingGroupingColDef.flex;\n      }\n\n      newColumnsLookup[groupingColDef.field] = groupingColDef;\n    });\n    const startIndex = newColumnFields[0] === '__check__' ? 1 : 0;\n    newColumnFields = [...newColumnFields.slice(0, startIndex), ...groupingColDefs.map(colDef => colDef.field), ...newColumnFields.slice(startIndex)];\n    columnsState.all = newColumnFields;\n    columnsState.lookup = newColumnsLookup;\n    return columnsState;\n  }, [getGroupingColDefs]);\n  const createRowTree = React.useCallback(params => {\n    const rowGroupingModel = gridRowGroupingSanitizedModelSelector(apiRef);\n    const columnsLookup = gridColumnLookupSelector(apiRef);\n    apiRef.current.setState(state => _extends({}, state, {\n      rowGrouping: _extends({}, state.rowGrouping, {\n        unstable_sanitizedModelOnLastRowTreeCreation: rowGroupingModel\n      })\n    }));\n    const distinctValues = Object.fromEntries(rowGroupingModel.map(groupingField => [groupingField, {\n      lookup: {},\n      list: []\n    }]));\n\n    const getCellGroupingCriteria = ({\n      row,\n      id,\n      colDef\n    }) => {\n      let key;\n\n      if (colDef.groupingValueGetter) {\n        const groupingValueGetterParams = {\n          colDef,\n          field: colDef.field,\n          value: row[colDef.field],\n          id,\n          row,\n          rowNode: {\n            isAutoGenerated: false,\n            id\n          }\n        };\n        key = colDef.groupingValueGetter(groupingValueGetterParams);\n      } else {\n        key = row[colDef.field];\n      }\n\n      return {\n        key,\n        field: colDef.field\n      };\n    };\n\n    params.ids.forEach(rowId => {\n      const row = params.idRowsLookup[rowId];\n      rowGroupingModel.forEach(groupingCriteria => {\n        const {\n          key\n        } = getCellGroupingCriteria({\n          row,\n          id: rowId,\n          colDef: columnsLookup[groupingCriteria]\n        });\n        const groupingFieldsDistinctKeys = distinctValues[groupingCriteria];\n\n        if (key != null && !groupingFieldsDistinctKeys.lookup[key.toString()]) {\n          groupingFieldsDistinctKeys.lookup[key.toString()] = true;\n          groupingFieldsDistinctKeys.list.push(key);\n        }\n      });\n    });\n    const rows = params.ids.map(rowId => {\n      const row = params.idRowsLookup[rowId];\n      const parentPath = rowGroupingModel.map(groupingField => getCellGroupingCriteria({\n        row,\n        id: rowId,\n        colDef: columnsLookup[groupingField]\n      })).filter(cell => cell.key != null);\n      const leafGroupingCriteria = {\n        key: rowId.toString(),\n        field: null\n      };\n      return {\n        path: [...parentPath, leafGroupingCriteria],\n        id: rowId\n      };\n    });\n    return buildRowTree(_extends({}, params, {\n      rows,\n      defaultGroupingExpansionDepth: props.defaultGroupingExpansionDepth,\n      isGroupExpandedByDefault: props.isGroupExpandedByDefault,\n      groupingName: ROW_GROUPING_STRATEGY\n    }));\n  }, [apiRef, props.defaultGroupingExpansionDepth, props.isGroupExpandedByDefault]);\n  const filterRows = React.useCallback(params => {\n    const rowTree = gridRowTreeSelector(apiRef);\n    return filterRowTreeFromGroupingColumns({\n      rowTree,\n      isRowMatchingFilters: params.isRowMatchingFilters\n    });\n  }, [apiRef]);\n  const sortRows = React.useCallback(params => {\n    const rowTree = gridRowTreeSelector(apiRef);\n    const rowIds = gridRowIdsSelector(apiRef);\n    return sortRowTree({\n      rowTree,\n      rowIds,\n      sortRowList: params.sortRowList,\n      disableChildrenSorting: false\n    });\n  }, [apiRef]);\n  useGridRegisterPreProcessor(apiRef, 'hydrateColumns', updateGroupingColumn);\n  useGridRegisterStrategyProcessor(apiRef, ROW_GROUPING_STRATEGY, 'rowTreeCreation', createRowTree);\n  useGridRegisterStrategyProcessor(apiRef, ROW_GROUPING_STRATEGY, 'filtering', filterRows);\n  useGridRegisterStrategyProcessor(apiRef, ROW_GROUPING_STRATEGY, 'sorting', sortRows);\n  /**\n   * 1ST RENDER\n   */\n\n  useFirstRender(() => {\n    setStrategyAvailability(apiRef, props.disableRowGrouping);\n  });\n  /**\n   * EFFECTS\n   */\n\n  const isFirstRender = React.useRef(true);\n  React.useEffect(() => {\n    if (!isFirstRender.current) {\n      setStrategyAvailability(apiRef, props.disableRowGrouping);\n    } else {\n      isFirstRender.current = false;\n    }\n  }, [apiRef, props.disableRowGrouping]);\n};"]},"metadata":{},"sourceType":"module"}