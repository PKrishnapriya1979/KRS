{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Documents\\\\KRS\\\\Application1\\\\client\\\\src\\\\components\\\\task_accepted.js\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/js/bootstrap.bundle.min';\nimport '@fortawesome/fontawesome-free/css/all.min.css';\nimport './style.css';\nimport Button from '@mui/material/Button';\nimport React, { location } from 'react';\nimport axios from 'axios';\nimport { DataGrid, gridCheckboxSelectionColDef } from '@material-ui/data-grid';\nimport { Redirect, Link } from 'react-router-dom';\nimport { Report_upload } from './Report_upload';\nimport { Addtask } from './add_task';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport class Taskaccepted extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.getdata = () => {\n      this.userdata = sessionStorage.getItem('userdata');\n\n      if (sessionStorage.length === 0) {\n        this.empid = '';\n\n        /*#__PURE__*/\n        _jsxDEV(Redirect, {\n          to: \"/\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 14\n        }, this);\n      } else {\n        this.userdata = JSON.parse(this.userdata);\n        this.empid = this.userdata.empid;\n        console.log(this.empid);\n      }\n\n      axios.post('http://localhost:3001/taskassigned', {\n        empid: this.empid\n      }).then(response => {\n        this.setState({\n          loading: false,\n          task_acc: response.data\n        });\n        console.log(this.state.task_acc);\n      });\n    };\n\n    this.state = {\n      task_acc: [],\n      task_name: \"\"\n    };\n  }\n\n  componentDidMount() {\n    this.getdata();\n  }\n\n  render() {\n    const t_data = this.state.task_acc;\n    const task_acc_columns = [{\n      headerName: 'ID',\n      field: 'pr_id'\n      /*width: 100*/\n\n    }, {\n      headerName: 'Task Name',\n      field: \"task_name\",\n      resizable: true,\n\n      /*width: 230,*/\n      renderCell: cellValues => {\n        return /*#__PURE__*/_jsxDEV(Link, {\n          to: \"/SplitTask\",\n          params: {\n            state: cellValues.value\n          },\n          children: cellValues.value\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 15\n        }, this);\n      }\n    }, {\n      headerName: 'Assigned By',\n      field: 'empname'\n      /*width: 160*/\n\n    }, {\n      headerName: 'Assigned Date',\n      field: 'ass_date'\n      /*width: 150*/\n\n    }, {\n      headerName: 'Closing Date',\n      field: 'target_date'\n      /*width: 150*/\n\n    }, {\n      headerName: 'Status',\n      field: 'pr_status'\n      /*width: 150*/\n\n    }, {\n      headerName: 'Upload Report',\n      field: \"ur\",\n\n      /*width: 170,*/\n      renderCell: cellValues => {\n        console.log(cellValues.get);\n        return /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          onClick: alert({\n            cellValues\n          }),\n          children: \"Upload Report\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 15\n        }, this);\n      }\n    }];\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        height: '100%'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          flexGrow: 1\n        },\n        children: /*#__PURE__*/_jsxDEV(DataGrid, {\n          id: \"task_display\",\n          pagesize: \"autopagesize\",\n          getRowId: rows => rows.pr_id,\n          rows: t_data,\n          columns: task_acc_columns\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Admin/Documents/KRS/Application1/client/src/components/task_accepted.js"],"names":["Button","React","location","axios","DataGrid","gridCheckboxSelectionColDef","Redirect","Link","Report_upload","Addtask","Taskaccepted","Component","constructor","props","getdata","userdata","sessionStorage","getItem","length","empid","JSON","parse","console","log","post","then","response","setState","loading","task_acc","data","state","task_name","componentDidMount","render","t_data","task_acc_columns","headerName","field","resizable","renderCell","cellValues","value","get","alert","display","height","flexGrow","rows","pr_id"],"mappings":"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","sourcesContent":["import 'bootstrap/dist/css/bootstrap.min.css';\r\nimport 'bootstrap/dist/js/bootstrap.bundle.min';\r\nimport '@fortawesome/fontawesome-free/css/all.min.css';\r\nimport './style.css';\r\nimport Button from '@mui/material/Button';\r\nimport React, {location} from 'react';\r\nimport axios from 'axios';\r\nimport {DataGrid,gridCheckboxSelectionColDef } from '@material-ui/data-grid'\r\nimport { Redirect,Link} from 'react-router-dom';\r\nimport { Report_upload } from './Report_upload';\r\nimport {Addtask} from './add_task'\r\nexport class Taskaccepted extends React.Component {  \r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      task_acc : [],\r\n      task_name:\"\"\r\n    }  \r\n   }\r\n  componentDidMount(){\r\n    this.getdata();\r\n  }\r\n  \r\n  getdata=()=>\r\n    {      \r\n        this.userdata = sessionStorage.getItem('userdata');\r\n        if (sessionStorage.length === 0 )\r\n           { this.empid = '';\r\n             <Redirect to = '/'></Redirect>}\r\n        else {\r\n           this.userdata = JSON.parse(this.userdata);\r\n           this.empid= this.userdata.empid;\r\n           console.log(this.empid);\r\n          }  \r\n        axios.post('http://localhost:3001/taskassigned',{empid:this.empid}).then((response)=>{\r\n                this.setState({loading:false,task_acc:response.data});\r\n                   console.log(this.state.task_acc);\r\n      });             \r\n    }\r\n    render() {\r\n      const t_data = this.state.task_acc;        \r\n      const task_acc_columns = [\r\n        {\r\n          headerName : 'ID',\r\n          field  :'pr_id'\r\n          /*width: 100*/\r\n        },\r\n        {\r\n          headerName : 'Task Name',\r\n          field  :\"task_name\",\r\n          resizable:true,\r\n          /*width: 230,*/\r\n          renderCell: (cellValues) => {\r\n            return (\r\n              <Link to = \"/SplitTask\" params = {{state: cellValues.value}}>{cellValues.value}</Link>\r\n            );\r\n          }\r\n        },\r\n        {\r\n          headerName : 'Assigned By',\r\n          field :'empname',\r\n          \r\n          /*width: 160*/\r\n        },\r\n        {\r\n          headerName : 'Assigned Date',\r\n          field :'ass_date'\r\n          /*width: 150*/\r\n        },\r\n        {\r\n          headerName : 'Closing Date',\r\n          field :'target_date'\r\n          /*width: 150*/\r\n        },\r\n        {\r\n          headerName : 'Status',\r\n          field :'pr_status',\r\n          /*width: 150*/\r\n        },\r\n        {\r\n          headerName : 'Upload Report',\r\n          field  :\"ur\",\r\n          /*width: 170,*/\r\n          renderCell:(cellValues) => {\r\n            console.log(cellValues.get)\r\n            return(\r\n              <Button variant=\"contained\"\r\n              onClick={alert({cellValues})}>\r\n                  Upload Report\r\n              </Button>  )\r\n          }\r\n        }      \r\n       ]; \r\n    return(\r\n      <div style = {{display: 'flex', height: '100%'}}>\r\n        <div style={{ flexGrow: 1 }}>\r\n        <DataGrid id = \"task_display\" \r\n        pagesize = \"autopagesize\"\r\n\r\n        getRowId={rows => rows.pr_id}\r\n        rows = {t_data}\r\n        columns = {task_acc_columns}\r\n      />\r\n      </div>\r\n      </div>\r\n    );\r\n  };   \r\n}  "]},"metadata":{},"sourceType":"module"}