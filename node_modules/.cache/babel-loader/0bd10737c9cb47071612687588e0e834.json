{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport MuiDivider from '@mui/material/Divider';\nimport { useGridSelector, gridVisibleColumnDefinitionsSelector, gridColumnsTotalWidthSelector, gridColumnPositionsSelector, gridVisibleColumnFieldsSelector, gridClasses, GridEvents, useGridApiMethod, useGridApiEventHandler } from '@mui/x-data-grid';\nimport { useGridRegisterPreProcessor } from '@mui/x-data-grid/internals';\nimport { GridColumnPinningMenuItems } from '../../../components/GridColumnPinningMenuItems';\nimport { GridPinnedPosition } from './gridColumnPinningInterface';\nimport { gridPinnedColumnsSelector } from './gridColumnPinningSelector';\nimport { filterColumns } from '../../../components/DataGridProVirtualScroller';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nconst Divider = () => /*#__PURE__*/_jsx(MuiDivider, {\n  onClick: event => event.stopPropagation()\n});\n\nexport const columnPinningStateInitializer = (state, props) => {\n  var _props$initialState;\n\n  let model;\n\n  if (props.disableColumnPinning) {\n    model = {};\n  } else if (props.pinnedColumns) {\n    model = props.pinnedColumns;\n  } else if ((_props$initialState = props.initialState) != null && _props$initialState.pinnedColumns) {\n    var _props$initialState2;\n\n    model = (_props$initialState2 = props.initialState) == null ? void 0 : _props$initialState2.pinnedColumns;\n  } else {\n    model = {};\n  }\n\n  return _extends({}, state, {\n    pinnedColumns: model\n  });\n};\n\nconst mergeStateWithPinnedColumns = pinnedColumns => state => _extends({}, state, {\n  pinnedColumns\n});\n\nexport const useGridColumnPinning = (apiRef, props) => {\n  const pinnedColumns = useGridSelector(apiRef, gridPinnedColumnsSelector); // Each visible row (not to be confused with a filter result) is composed of a central .MuiDataGrid-row element\n  // and up to two additional .MuiDataGrid-row's, one for the columns pinned to the left and another\n  // for those on the right side. When hovering any of these elements, the :hover styles are applied only to\n  // the row element that was actually hovered, not its additional siblings. To make it look like a contiguous row,\n  // this method adds/removes the .Mui-hovered class to all of the row elements inside one visible row.\n\n  const updateHoveredClassOnSiblingRows = React.useCallback(event => {\n    var _pinnedColumns$left$l, _pinnedColumns$left, _pinnedColumns$right$, _pinnedColumns$right;\n\n    if (props.disableColumnPinning) {\n      return;\n    }\n\n    if (!Array.isArray(pinnedColumns.left) && !Array.isArray(pinnedColumns.right)) {\n      return;\n    }\n\n    const nbLeftPinnedColumns = (_pinnedColumns$left$l = (_pinnedColumns$left = pinnedColumns.left) == null ? void 0 : _pinnedColumns$left.length) != null ? _pinnedColumns$left$l : 0;\n    const nbRightPinnedColumns = (_pinnedColumns$right$ = (_pinnedColumns$right = pinnedColumns.right) == null ? void 0 : _pinnedColumns$right.length) != null ? _pinnedColumns$right$ : 0;\n\n    if (nbLeftPinnedColumns + nbRightPinnedColumns === 0) {\n      return;\n    }\n\n    const index = event.currentTarget.dataset.rowindex;\n    const rowElements = apiRef.current.windowRef.current.querySelectorAll(`.${gridClasses.row}[data-rowindex=\"${index}\"]`);\n    rowElements.forEach(row => {\n      // Ignore rows from other grid inside the hovered row\n      if (row.closest(`.${gridClasses.virtualScroller}`) === apiRef.current.windowRef.current) {\n        if (event.type === 'mouseenter') {\n          row.classList.add('Mui-hovered');\n        } else {\n          row.classList.remove('Mui-hovered');\n        }\n      }\n    });\n  }, [apiRef, pinnedColumns.left, pinnedColumns.right, props.disableColumnPinning]);\n  const handleMouseEnter = React.useCallback((params, event) => {\n    updateHoveredClassOnSiblingRows(event);\n  }, [updateHoveredClassOnSiblingRows]);\n  const handleMouseLeave = React.useCallback((params, event) => {\n    updateHoveredClassOnSiblingRows(event);\n  }, [updateHoveredClassOnSiblingRows]);\n  useGridApiEventHandler(apiRef, GridEvents.rowMouseEnter, handleMouseEnter);\n  useGridApiEventHandler(apiRef, GridEvents.rowMouseLeave, handleMouseLeave);\n  /**\n   * PRE-PROCESSING\n   */\n\n  const calculateScrollLeft = React.useCallback((initialValue, params) => {\n    if (props.disableColumnPinning) {\n      return initialValue;\n    }\n\n    const visibleColumnFields = gridVisibleColumnFieldsSelector(apiRef);\n    const [leftPinnedColumns, rightPinnedColumns] = filterColumns(pinnedColumns, visibleColumnFields);\n\n    if (!params.colIndex || leftPinnedColumns.length === 0 && rightPinnedColumns.length === 0) {\n      return initialValue;\n    }\n\n    const visibleColumns = gridVisibleColumnDefinitionsSelector(apiRef);\n    const columnsTotalWidth = gridColumnsTotalWidthSelector(apiRef);\n    const columnPositions = gridColumnPositionsSelector(apiRef);\n    const clientWidth = apiRef.current.windowRef.current.clientWidth;\n    const scrollLeft = apiRef.current.windowRef.current.scrollLeft;\n    const offsetWidth = visibleColumns[params.colIndex].computedWidth;\n    const offsetLeft = columnPositions[params.colIndex];\n    const leftPinnedColumnsWidth = columnPositions[leftPinnedColumns.length];\n    const rightPinnedColumnsWidth = columnsTotalWidth - columnPositions[columnPositions.length - rightPinnedColumns.length];\n    const elementBottom = offsetLeft + offsetWidth;\n\n    if (elementBottom - (clientWidth - rightPinnedColumnsWidth) > scrollLeft) {\n      const left = elementBottom - (clientWidth - rightPinnedColumnsWidth);\n      return _extends({}, initialValue, {\n        left\n      });\n    }\n\n    if (offsetLeft < scrollLeft + leftPinnedColumnsWidth) {\n      const left = offsetLeft - leftPinnedColumnsWidth;\n      return _extends({}, initialValue, {\n        left\n      });\n    }\n\n    return initialValue;\n  }, [apiRef, pinnedColumns, props.disableColumnPinning]);\n  const addColumnMenuButtons = React.useCallback((initialValue, column) => {\n    if (props.disableColumnPinning) {\n      return initialValue;\n    }\n\n    if (column.pinnable === false) {\n      return initialValue;\n    }\n\n    return [...initialValue, /*#__PURE__*/_jsx(Divider, {}), /*#__PURE__*/_jsx(GridColumnPinningMenuItems, {})];\n  }, [props.disableColumnPinning]);\n  const checkIfCanBeReordered = React.useCallback((initialValue, _ref) => {\n    let {\n      targetIndex\n    } = _ref;\n    const visibleColumnFields = gridVisibleColumnFieldsSelector(apiRef);\n    const [leftPinnedColumns, rightPinnedColumns] = filterColumns(pinnedColumns, visibleColumnFields);\n\n    if (leftPinnedColumns.length === 0 && rightPinnedColumns.length === 0) {\n      return initialValue;\n    }\n\n    if (leftPinnedColumns.length > 0 && targetIndex < leftPinnedColumns.length) {\n      return false;\n    }\n\n    if (rightPinnedColumns.length > 0) {\n      const visibleColumns = gridVisibleColumnDefinitionsSelector(apiRef);\n      const firstRightPinnedColumnIndex = visibleColumns.length - rightPinnedColumns.length;\n      return targetIndex >= firstRightPinnedColumnIndex ? false : initialValue;\n    }\n\n    return initialValue;\n  }, [apiRef, pinnedColumns]);\n  const stateExportPreProcessing = React.useCallback(prevState => {\n    const pinnedColumnsToExport = gridPinnedColumnsSelector(apiRef.current.state);\n\n    if ((!pinnedColumnsToExport.left || pinnedColumnsToExport.left.length === 0) && (!pinnedColumnsToExport.right || pinnedColumnsToExport.right.length === 0)) {\n      return prevState;\n    }\n\n    return _extends({}, prevState, {\n      pinnedColumns: pinnedColumnsToExport\n    });\n  }, [apiRef]);\n  const stateRestorePreProcessing = React.useCallback((params, context) => {\n    const newPinnedColumns = context.stateToRestore.pinnedColumns;\n\n    if (newPinnedColumns != null) {\n      apiRef.current.setState(mergeStateWithPinnedColumns(newPinnedColumns));\n    }\n\n    return params;\n  }, [apiRef]);\n  useGridRegisterPreProcessor(apiRef, 'scrollToIndexes', calculateScrollLeft);\n  useGridRegisterPreProcessor(apiRef, 'columnMenu', addColumnMenuButtons);\n  useGridRegisterPreProcessor(apiRef, 'canBeReordered', checkIfCanBeReordered);\n  useGridRegisterPreProcessor(apiRef, 'exportState', stateExportPreProcessing);\n  useGridRegisterPreProcessor(apiRef, 'restoreState', stateRestorePreProcessing);\n  apiRef.current.unstable_updateControlState({\n    stateId: 'pinnedColumns',\n    propModel: props.pinnedColumns,\n    propOnChange: props.onPinnedColumnsChange,\n    stateSelector: gridPinnedColumnsSelector,\n    changeEvent: GridEvents.pinnedColumnsChange\n  });\n  const checkIfEnabled = React.useCallback(methodName => {\n    if (props.disableColumnPinning) {\n      throw new Error(`MUI: You cannot call \\`apiRef.current.${methodName}\\` when \\`disableColumnPinning\\` is true.`);\n    }\n  }, [props.disableColumnPinning]);\n  const pinColumn = React.useCallback((field, side) => {\n    checkIfEnabled('pinColumn');\n\n    if (apiRef.current.isColumnPinned(field) === side) {\n      return;\n    }\n\n    apiRef.current.setState(state => {\n      const otherSide = side === GridPinnedPosition.right ? GridPinnedPosition.left : GridPinnedPosition.right;\n\n      const newPinnedColumns = _extends({}, state.pinnedColumns, {\n        [side]: [...(state.pinnedColumns[side] || []), field],\n        [otherSide]: (state.pinnedColumns[otherSide] || []).filter(column => column !== field)\n      });\n\n      return _extends({}, state, {\n        pinnedColumns: newPinnedColumns\n      });\n    });\n    apiRef.current.forceUpdate();\n  }, [apiRef, checkIfEnabled]);\n  const unpinColumn = React.useCallback(field => {\n    checkIfEnabled('unpinColumn');\n    apiRef.current.setState(state => {\n      const newPinnedColumns = _extends({}, state.pinnedColumns, {\n        left: (state.pinnedColumns.left || []).filter(column => column !== field),\n        right: (state.pinnedColumns.right || []).filter(column => column !== field)\n      });\n\n      return _extends({}, state, {\n        pinnedColumns: newPinnedColumns\n      });\n    });\n    apiRef.current.forceUpdate();\n  }, [apiRef, checkIfEnabled]);\n  const getPinnedColumns = React.useCallback(() => {\n    checkIfEnabled('getPinnedColumns');\n    return gridPinnedColumnsSelector(apiRef.current.state);\n  }, [apiRef, checkIfEnabled]);\n  const setPinnedColumns = React.useCallback(newPinnedColumns => {\n    checkIfEnabled('setPinnedColumns');\n    apiRef.current.setState(mergeStateWithPinnedColumns(newPinnedColumns));\n    apiRef.current.forceUpdate();\n  }, [apiRef, checkIfEnabled]);\n  const isColumnPinned = React.useCallback(field => {\n    checkIfEnabled('isColumnPinned');\n    const leftPinnedColumns = pinnedColumns.left || [];\n\n    if (leftPinnedColumns.includes(field)) {\n      return GridPinnedPosition.left;\n    }\n\n    const rightPinnedColumns = pinnedColumns.right || [];\n\n    if (rightPinnedColumns.includes(field)) {\n      return GridPinnedPosition.right;\n    }\n\n    return false;\n  }, [pinnedColumns.left, pinnedColumns.right, checkIfEnabled]);\n  const columnPinningApi = {\n    pinColumn,\n    unpinColumn,\n    getPinnedColumns,\n    setPinnedColumns,\n    isColumnPinned\n  };\n  useGridApiMethod(apiRef, columnPinningApi, 'columnPinningApi');\n  React.useEffect(() => {\n    if (props.pinnedColumns) {\n      apiRef.current.setPinnedColumns(props.pinnedColumns);\n    }\n  }, [apiRef, props.pinnedColumns]);\n};","map":{"version":3,"sources":["C:/Users/Admin/Documents/KRS/Application1/client/node_modules/@mui/x-data-grid-pro/hooks/features/columnPinning/useGridColumnPinning.js"],"names":["_extends","React","MuiDivider","useGridSelector","gridVisibleColumnDefinitionsSelector","gridColumnsTotalWidthSelector","gridColumnPositionsSelector","gridVisibleColumnFieldsSelector","gridClasses","GridEvents","useGridApiMethod","useGridApiEventHandler","useGridRegisterPreProcessor","GridColumnPinningMenuItems","GridPinnedPosition","gridPinnedColumnsSelector","filterColumns","jsx","_jsx","Divider","onClick","event","stopPropagation","columnPinningStateInitializer","state","props","_props$initialState","model","disableColumnPinning","pinnedColumns","initialState","_props$initialState2","mergeStateWithPinnedColumns","useGridColumnPinning","apiRef","updateHoveredClassOnSiblingRows","useCallback","_pinnedColumns$left$l","_pinnedColumns$left","_pinnedColumns$right$","_pinnedColumns$right","Array","isArray","left","right","nbLeftPinnedColumns","length","nbRightPinnedColumns","index","currentTarget","dataset","rowindex","rowElements","current","windowRef","querySelectorAll","row","forEach","closest","virtualScroller","type","classList","add","remove","handleMouseEnter","params","handleMouseLeave","rowMouseEnter","rowMouseLeave","calculateScrollLeft","initialValue","visibleColumnFields","leftPinnedColumns","rightPinnedColumns","colIndex","visibleColumns","columnsTotalWidth","columnPositions","clientWidth","scrollLeft","offsetWidth","computedWidth","offsetLeft","leftPinnedColumnsWidth","rightPinnedColumnsWidth","elementBottom","addColumnMenuButtons","column","pinnable","checkIfCanBeReordered","targetIndex","firstRightPinnedColumnIndex","stateExportPreProcessing","prevState","pinnedColumnsToExport","stateRestorePreProcessing","context","newPinnedColumns","stateToRestore","setState","unstable_updateControlState","stateId","propModel","propOnChange","onPinnedColumnsChange","stateSelector","changeEvent","pinnedColumnsChange","checkIfEnabled","methodName","Error","pinColumn","field","side","isColumnPinned","otherSide","filter","forceUpdate","unpinColumn","getPinnedColumns","setPinnedColumns","includes","columnPinningApi","useEffect"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport MuiDivider from '@mui/material/Divider';\nimport { useGridSelector, gridVisibleColumnDefinitionsSelector, gridColumnsTotalWidthSelector, gridColumnPositionsSelector, gridVisibleColumnFieldsSelector, gridClasses, GridEvents, useGridApiMethod, useGridApiEventHandler } from '@mui/x-data-grid';\nimport { useGridRegisterPreProcessor } from '@mui/x-data-grid/internals';\nimport { GridColumnPinningMenuItems } from '../../../components/GridColumnPinningMenuItems';\nimport { GridPinnedPosition } from './gridColumnPinningInterface';\nimport { gridPinnedColumnsSelector } from './gridColumnPinningSelector';\nimport { filterColumns } from '../../../components/DataGridProVirtualScroller';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nconst Divider = () => /*#__PURE__*/_jsx(MuiDivider, {\n  onClick: event => event.stopPropagation()\n});\n\nexport const columnPinningStateInitializer = (state, props) => {\n  var _props$initialState;\n\n  let model;\n\n  if (props.disableColumnPinning) {\n    model = {};\n  } else if (props.pinnedColumns) {\n    model = props.pinnedColumns;\n  } else if ((_props$initialState = props.initialState) != null && _props$initialState.pinnedColumns) {\n    var _props$initialState2;\n\n    model = (_props$initialState2 = props.initialState) == null ? void 0 : _props$initialState2.pinnedColumns;\n  } else {\n    model = {};\n  }\n\n  return _extends({}, state, {\n    pinnedColumns: model\n  });\n};\n\nconst mergeStateWithPinnedColumns = pinnedColumns => state => _extends({}, state, {\n  pinnedColumns\n});\n\nexport const useGridColumnPinning = (apiRef, props) => {\n  const pinnedColumns = useGridSelector(apiRef, gridPinnedColumnsSelector); // Each visible row (not to be confused with a filter result) is composed of a central .MuiDataGrid-row element\n  // and up to two additional .MuiDataGrid-row's, one for the columns pinned to the left and another\n  // for those on the right side. When hovering any of these elements, the :hover styles are applied only to\n  // the row element that was actually hovered, not its additional siblings. To make it look like a contiguous row,\n  // this method adds/removes the .Mui-hovered class to all of the row elements inside one visible row.\n\n  const updateHoveredClassOnSiblingRows = React.useCallback(event => {\n    var _pinnedColumns$left$l, _pinnedColumns$left, _pinnedColumns$right$, _pinnedColumns$right;\n\n    if (props.disableColumnPinning) {\n      return;\n    }\n\n    if (!Array.isArray(pinnedColumns.left) && !Array.isArray(pinnedColumns.right)) {\n      return;\n    }\n\n    const nbLeftPinnedColumns = (_pinnedColumns$left$l = (_pinnedColumns$left = pinnedColumns.left) == null ? void 0 : _pinnedColumns$left.length) != null ? _pinnedColumns$left$l : 0;\n    const nbRightPinnedColumns = (_pinnedColumns$right$ = (_pinnedColumns$right = pinnedColumns.right) == null ? void 0 : _pinnedColumns$right.length) != null ? _pinnedColumns$right$ : 0;\n\n    if (nbLeftPinnedColumns + nbRightPinnedColumns === 0) {\n      return;\n    }\n\n    const index = event.currentTarget.dataset.rowindex;\n    const rowElements = apiRef.current.windowRef.current.querySelectorAll(`.${gridClasses.row}[data-rowindex=\"${index}\"]`);\n    rowElements.forEach(row => {\n      // Ignore rows from other grid inside the hovered row\n      if (row.closest(`.${gridClasses.virtualScroller}`) === apiRef.current.windowRef.current) {\n        if (event.type === 'mouseenter') {\n          row.classList.add('Mui-hovered');\n        } else {\n          row.classList.remove('Mui-hovered');\n        }\n      }\n    });\n  }, [apiRef, pinnedColumns.left, pinnedColumns.right, props.disableColumnPinning]);\n  const handleMouseEnter = React.useCallback((params, event) => {\n    updateHoveredClassOnSiblingRows(event);\n  }, [updateHoveredClassOnSiblingRows]);\n  const handleMouseLeave = React.useCallback((params, event) => {\n    updateHoveredClassOnSiblingRows(event);\n  }, [updateHoveredClassOnSiblingRows]);\n  useGridApiEventHandler(apiRef, GridEvents.rowMouseEnter, handleMouseEnter);\n  useGridApiEventHandler(apiRef, GridEvents.rowMouseLeave, handleMouseLeave);\n  /**\n   * PRE-PROCESSING\n   */\n\n  const calculateScrollLeft = React.useCallback((initialValue, params) => {\n    if (props.disableColumnPinning) {\n      return initialValue;\n    }\n\n    const visibleColumnFields = gridVisibleColumnFieldsSelector(apiRef);\n    const [leftPinnedColumns, rightPinnedColumns] = filterColumns(pinnedColumns, visibleColumnFields);\n\n    if (!params.colIndex || leftPinnedColumns.length === 0 && rightPinnedColumns.length === 0) {\n      return initialValue;\n    }\n\n    const visibleColumns = gridVisibleColumnDefinitionsSelector(apiRef);\n    const columnsTotalWidth = gridColumnsTotalWidthSelector(apiRef);\n    const columnPositions = gridColumnPositionsSelector(apiRef);\n    const clientWidth = apiRef.current.windowRef.current.clientWidth;\n    const scrollLeft = apiRef.current.windowRef.current.scrollLeft;\n    const offsetWidth = visibleColumns[params.colIndex].computedWidth;\n    const offsetLeft = columnPositions[params.colIndex];\n    const leftPinnedColumnsWidth = columnPositions[leftPinnedColumns.length];\n    const rightPinnedColumnsWidth = columnsTotalWidth - columnPositions[columnPositions.length - rightPinnedColumns.length];\n    const elementBottom = offsetLeft + offsetWidth;\n\n    if (elementBottom - (clientWidth - rightPinnedColumnsWidth) > scrollLeft) {\n      const left = elementBottom - (clientWidth - rightPinnedColumnsWidth);\n      return _extends({}, initialValue, {\n        left\n      });\n    }\n\n    if (offsetLeft < scrollLeft + leftPinnedColumnsWidth) {\n      const left = offsetLeft - leftPinnedColumnsWidth;\n      return _extends({}, initialValue, {\n        left\n      });\n    }\n\n    return initialValue;\n  }, [apiRef, pinnedColumns, props.disableColumnPinning]);\n  const addColumnMenuButtons = React.useCallback((initialValue, column) => {\n    if (props.disableColumnPinning) {\n      return initialValue;\n    }\n\n    if (column.pinnable === false) {\n      return initialValue;\n    }\n\n    return [...initialValue, /*#__PURE__*/_jsx(Divider, {}), /*#__PURE__*/_jsx(GridColumnPinningMenuItems, {})];\n  }, [props.disableColumnPinning]);\n  const checkIfCanBeReordered = React.useCallback((initialValue, {\n    targetIndex\n  }) => {\n    const visibleColumnFields = gridVisibleColumnFieldsSelector(apiRef);\n    const [leftPinnedColumns, rightPinnedColumns] = filterColumns(pinnedColumns, visibleColumnFields);\n\n    if (leftPinnedColumns.length === 0 && rightPinnedColumns.length === 0) {\n      return initialValue;\n    }\n\n    if (leftPinnedColumns.length > 0 && targetIndex < leftPinnedColumns.length) {\n      return false;\n    }\n\n    if (rightPinnedColumns.length > 0) {\n      const visibleColumns = gridVisibleColumnDefinitionsSelector(apiRef);\n      const firstRightPinnedColumnIndex = visibleColumns.length - rightPinnedColumns.length;\n      return targetIndex >= firstRightPinnedColumnIndex ? false : initialValue;\n    }\n\n    return initialValue;\n  }, [apiRef, pinnedColumns]);\n  const stateExportPreProcessing = React.useCallback(prevState => {\n    const pinnedColumnsToExport = gridPinnedColumnsSelector(apiRef.current.state);\n\n    if ((!pinnedColumnsToExport.left || pinnedColumnsToExport.left.length === 0) && (!pinnedColumnsToExport.right || pinnedColumnsToExport.right.length === 0)) {\n      return prevState;\n    }\n\n    return _extends({}, prevState, {\n      pinnedColumns: pinnedColumnsToExport\n    });\n  }, [apiRef]);\n  const stateRestorePreProcessing = React.useCallback((params, context) => {\n    const newPinnedColumns = context.stateToRestore.pinnedColumns;\n\n    if (newPinnedColumns != null) {\n      apiRef.current.setState(mergeStateWithPinnedColumns(newPinnedColumns));\n    }\n\n    return params;\n  }, [apiRef]);\n  useGridRegisterPreProcessor(apiRef, 'scrollToIndexes', calculateScrollLeft);\n  useGridRegisterPreProcessor(apiRef, 'columnMenu', addColumnMenuButtons);\n  useGridRegisterPreProcessor(apiRef, 'canBeReordered', checkIfCanBeReordered);\n  useGridRegisterPreProcessor(apiRef, 'exportState', stateExportPreProcessing);\n  useGridRegisterPreProcessor(apiRef, 'restoreState', stateRestorePreProcessing);\n  apiRef.current.unstable_updateControlState({\n    stateId: 'pinnedColumns',\n    propModel: props.pinnedColumns,\n    propOnChange: props.onPinnedColumnsChange,\n    stateSelector: gridPinnedColumnsSelector,\n    changeEvent: GridEvents.pinnedColumnsChange\n  });\n  const checkIfEnabled = React.useCallback(methodName => {\n    if (props.disableColumnPinning) {\n      throw new Error(`MUI: You cannot call \\`apiRef.current.${methodName}\\` when \\`disableColumnPinning\\` is true.`);\n    }\n  }, [props.disableColumnPinning]);\n  const pinColumn = React.useCallback((field, side) => {\n    checkIfEnabled('pinColumn');\n\n    if (apiRef.current.isColumnPinned(field) === side) {\n      return;\n    }\n\n    apiRef.current.setState(state => {\n      const otherSide = side === GridPinnedPosition.right ? GridPinnedPosition.left : GridPinnedPosition.right;\n\n      const newPinnedColumns = _extends({}, state.pinnedColumns, {\n        [side]: [...(state.pinnedColumns[side] || []), field],\n        [otherSide]: (state.pinnedColumns[otherSide] || []).filter(column => column !== field)\n      });\n\n      return _extends({}, state, {\n        pinnedColumns: newPinnedColumns\n      });\n    });\n    apiRef.current.forceUpdate();\n  }, [apiRef, checkIfEnabled]);\n  const unpinColumn = React.useCallback(field => {\n    checkIfEnabled('unpinColumn');\n    apiRef.current.setState(state => {\n      const newPinnedColumns = _extends({}, state.pinnedColumns, {\n        left: (state.pinnedColumns.left || []).filter(column => column !== field),\n        right: (state.pinnedColumns.right || []).filter(column => column !== field)\n      });\n\n      return _extends({}, state, {\n        pinnedColumns: newPinnedColumns\n      });\n    });\n    apiRef.current.forceUpdate();\n  }, [apiRef, checkIfEnabled]);\n  const getPinnedColumns = React.useCallback(() => {\n    checkIfEnabled('getPinnedColumns');\n    return gridPinnedColumnsSelector(apiRef.current.state);\n  }, [apiRef, checkIfEnabled]);\n  const setPinnedColumns = React.useCallback(newPinnedColumns => {\n    checkIfEnabled('setPinnedColumns');\n    apiRef.current.setState(mergeStateWithPinnedColumns(newPinnedColumns));\n    apiRef.current.forceUpdate();\n  }, [apiRef, checkIfEnabled]);\n  const isColumnPinned = React.useCallback(field => {\n    checkIfEnabled('isColumnPinned');\n    const leftPinnedColumns = pinnedColumns.left || [];\n\n    if (leftPinnedColumns.includes(field)) {\n      return GridPinnedPosition.left;\n    }\n\n    const rightPinnedColumns = pinnedColumns.right || [];\n\n    if (rightPinnedColumns.includes(field)) {\n      return GridPinnedPosition.right;\n    }\n\n    return false;\n  }, [pinnedColumns.left, pinnedColumns.right, checkIfEnabled]);\n  const columnPinningApi = {\n    pinColumn,\n    unpinColumn,\n    getPinnedColumns,\n    setPinnedColumns,\n    isColumnPinned\n  };\n  useGridApiMethod(apiRef, columnPinningApi, 'columnPinningApi');\n  React.useEffect(() => {\n    if (props.pinnedColumns) {\n      apiRef.current.setPinnedColumns(props.pinnedColumns);\n    }\n  }, [apiRef, props.pinnedColumns]);\n};"]},"metadata":{},"sourceType":"module"}