{"ast":null,"code":"import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { useLicenseVerifier, Watermark } from '@mui/x-license-pro';\nimport { chainPropTypes } from '@mui/utils';\nimport { GridBody, GridErrorHandler, GridFooterPlaceholder, GridHeaderPlaceholder, GridRoot, GridContextProvider } from '@mui/x-data-grid';\nimport { useDataGridProComponent } from './useDataGridProComponent';\nimport { useDataGridProProps } from './useDataGridProProps';\nimport { DataGridProVirtualScroller } from '../components/DataGridProVirtualScroller';\nimport { DataGridProColumnHeaders } from '../components/DataGridProColumnHeaders';\nimport { getReleaseInfo } from '../utils/releaseInfo';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst releaseInfo = getReleaseInfo();\nconst DataGridProRaw = /*#__PURE__*/React.forwardRef(function DataGridPro(inProps, ref) {\n  const props = useDataGridProProps(inProps);\n  const apiRef = useDataGridProComponent(props.apiRef, props);\n  useLicenseVerifier('x-data-grid-pro', releaseInfo);\n  return /*#__PURE__*/_jsx(GridContextProvider, {\n    apiRef: apiRef,\n    props: props,\n    children: /*#__PURE__*/_jsx(GridRoot, {\n      className: props.className,\n      style: props.style,\n      sx: props.sx,\n      ref: ref,\n      children: /*#__PURE__*/_jsxs(GridErrorHandler, {\n        children: [/*#__PURE__*/_jsx(GridHeaderPlaceholder, {}), /*#__PURE__*/_jsx(GridBody, {\n          ColumnHeadersComponent: DataGridProColumnHeaders,\n          VirtualScrollerComponent: DataGridProVirtualScroller,\n          children: /*#__PURE__*/_jsx(Watermark, {\n            packageName: \"x-data-grid-pro\",\n            releaseInfo: releaseInfo\n          })\n        }), /*#__PURE__*/_jsx(GridFooterPlaceholder, {})]\n      })\n    })\n  });\n});\nexport const DataGridPro = /*#__PURE__*/React.memo(DataGridProRaw);\nDataGridProRaw.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The ref object that allows grid manipulation. Can be instantiated with [[useGridApiRef()]].\n   */\n  apiRef: PropTypes.shape({\n    current: PropTypes.object.isRequired\n  }),\n\n  /**\n   * The label of the grid.\n   */\n  'aria-label': PropTypes.string,\n\n  /**\n   * The id of the element containing a label for the grid.\n   */\n  'aria-labelledby': PropTypes.string,\n\n  /**\n   * If `true`, the grid height is dynamic and follow the number of rows in the grid.\n   * @default false\n   */\n  autoHeight: PropTypes.bool,\n\n  /**\n   * If `true`, the pageSize is calculated according to the container size and the max number of rows to avoid rendering a vertical scroll bar.\n   * @default false\n   */\n  autoPageSize: PropTypes.bool,\n\n  /**\n   * If `true`, the grid get a first column with a checkbox that allows to select rows.\n   * @default false\n   */\n  checkboxSelection: PropTypes.bool,\n\n  /**\n   * If `true`, the \"Select All\" header checkbox selects only the rows on the current page. To be used in combination with `checkboxSelection`.\n   * It only works if the pagination is enabled.\n   * @default false\n   */\n  checkboxSelectionVisibleOnly: chainPropTypes(PropTypes.bool, props => {\n    if (!props.pagination && props.checkboxSelectionVisibleOnly) {\n      return new Error('MUI: The `checkboxSelectionVisibleOnly` prop has no effect when the pagination is not enabled.');\n    }\n\n    return null;\n  }),\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * Number of extra columns to be rendered before/after the visible slice.\n   * @default 3\n   */\n  columnBuffer: PropTypes.number,\n\n  /**\n   * Set of columns of type [[GridColumns]].\n   */\n  columns: PropTypes.arrayOf(PropTypes.object).isRequired,\n\n  /**\n   * Number of rows from the `columnBuffer` that can be visible before a new slice is rendered.\n   * @default 3\n   */\n  columnThreshold: PropTypes.number,\n\n  /**\n   * Extend native column types with your new column types.\n   */\n  columnTypes: PropTypes.object,\n\n  /**\n   * Set the column visibility model of the grid.\n   * If defined, the grid will ignore the `hide` property in [[GridColDef]].\n   */\n  columnVisibilityModel: PropTypes.object,\n\n  /**\n   * Overrideable components.\n   */\n  components: PropTypes.object,\n\n  /**\n   * Overrideable components props dynamically passed to the component at rendering.\n   */\n  componentsProps: PropTypes.object,\n\n  /**\n   * If above 0, the row children will be expanded up to this depth.\n   * If equal to -1, all the row children will be expanded.\n   * @default 0\n   */\n  defaultGroupingExpansionDepth: PropTypes.number,\n\n  /**\n   * Set the density of the grid.\n   * @default \"standard\"\n   */\n  density: PropTypes.oneOf(['comfortable', 'compact', 'standard']),\n\n  /**\n   * The row ids to show the detail panel.\n   */\n  detailPanelExpandedRowIds: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired),\n\n  /**\n   * If `true`, the filtering will only be applied to the top level rows when grouping rows with the `treeData` prop.\n   * @default false\n   */\n  disableChildrenFiltering: PropTypes.bool,\n\n  /**\n   * If `true`, the sorting will only be applied to the top level rows when grouping rows with the `treeData` prop.\n   * @default false\n   */\n  disableChildrenSorting: PropTypes.bool,\n\n  /**\n   * If `true`, column filters are disabled.\n   * @default false\n   */\n  disableColumnFilter: PropTypes.bool,\n\n  /**\n   * If `true`, the column menu is disabled.\n   * @default false\n   */\n  disableColumnMenu: PropTypes.bool,\n\n  /**\n   * If `true`, the column pinning is disabled.\n   * @default false\n   */\n  disableColumnPinning: PropTypes.bool,\n\n  /**\n   * If `true`, reordering columns is disabled.\n   * @default false\n   */\n  disableColumnReorder: PropTypes.bool,\n\n  /**\n   * If `true`, resizing columns is disabled.\n   * @default false\n   */\n  disableColumnResize: PropTypes.bool,\n\n  /**\n   * If `true`, hiding/showing columns is disabled.\n   * @default false\n   */\n  disableColumnSelector: PropTypes.bool,\n\n  /**\n   * If `true`, the density selector is disabled.\n   * @default false\n   */\n  disableDensitySelector: PropTypes.bool,\n\n  /**\n   * If `true`, rows will not be extended to fill the full width of the grid container.\n   * @default false\n   */\n  disableExtendRowFullWidth: PropTypes.bool,\n\n  /**\n   * If `true`, filtering with multiple columns is disabled.\n   * @default false\n   */\n  disableMultipleColumnsFiltering: PropTypes.bool,\n\n  /**\n   * If `true`, sorting with multiple columns is disabled.\n   * @default false\n   */\n  disableMultipleColumnsSorting: PropTypes.bool,\n\n  /**\n   * If `true`, multiple selection using the CTRL or CMD key is disabled.\n   * @default false\n   */\n  disableMultipleSelection: PropTypes.bool,\n\n  /**\n   * If `true`, the row grouping is disabled.\n   * @default false\n   */\n  disableRowGrouping: PropTypes.bool,\n\n  /**\n   * If `true`, the selection on click on a row or cell is disabled.\n   * @default false\n   */\n  disableSelectionOnClick: PropTypes.bool,\n\n  /**\n   * If `true`, the virtualization is disabled.\n   * @default false\n   */\n  disableVirtualization: PropTypes.bool,\n\n  /**\n   * Controls whether to use the cell or row editing.\n   * @default \"cell\"\n   */\n  editMode: PropTypes.oneOf(['cell', 'row']),\n\n  /**\n   * Set the edit rows model of the grid.\n   */\n  editRowsModel: PropTypes.object,\n\n  /**\n   * An error that will turn the grid into its error state and display the error component.\n   */\n  error: PropTypes.any,\n\n  /**\n   * Features under development.\n   * For each feature, if the flag is not explicitly set to `true`, the feature will be fully disabled and any property / method call will not have any effect.\n   */\n  experimentalFeatures: PropTypes.shape({\n    newEditingApi: PropTypes.bool,\n    preventCommitWhileValidating: PropTypes.bool,\n    rowGrouping: PropTypes.bool,\n    warnIfFocusStateIsNotSynced: PropTypes.bool\n  }),\n\n  /**\n   * Filtering can be processed on the server or client-side.\n   * Set it to 'server' if you would like to handle filtering on the server-side.\n   * @default \"client\"\n   */\n  filterMode: chainPropTypes(PropTypes.oneOf(['client', 'server']), props => {\n    if (props.treeData && props.filterMode === 'server') {\n      return new Error('MUI: The `filterMode=\"server\"` prop is not available when the `treeData` is enabled.');\n    }\n\n    return null;\n  }),\n\n  /**\n   * Set the filter model of the grid.\n   */\n  filterModel: PropTypes.shape({\n    items: PropTypes.arrayOf(PropTypes.shape({\n      columnField: PropTypes.string.isRequired,\n      id: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n      operatorValue: PropTypes.string,\n      value: PropTypes.any\n    })).isRequired,\n    linkOperator: PropTypes.oneOf(['and', 'or'])\n  }),\n\n  /**\n   * Function that applies CSS classes dynamically on cells.\n   * @param {GridCellParams} params With all properties from [[GridCellParams]].\n   * @returns {string} The CSS class to apply to the cell.\n   */\n  getCellClassName: PropTypes.func,\n\n  /**\n   * Function that returns the element to render in row detail.\n   * @param {GridRowParams} params With all properties from [[GridRowParams]].\n   * @returns {JSX.Element} The row detail element.\n   */\n  getDetailPanelContent: PropTypes.func,\n\n  /**\n   * Function that returns the height of the row detail panel.\n   * @param {GridRowParams} params With all properties from [[GridRowParams]].\n   * @returns {number} The height in pixels.\n   * @default \"() => 500\"\n   */\n  getDetailPanelHeight: PropTypes.func,\n\n  /**\n   * Function that applies CSS classes dynamically on rows.\n   * @param {GridRowClassNameParams} params With all properties from [[GridRowClassNameParams]].\n   * @returns {string} The CSS class to apply to the row.\n   */\n  getRowClassName: PropTypes.func,\n\n  /**\n   * Function that sets the row height per row.\n   * @param {GridRowHeightParams} params With all properties from [[GridRowHeightParams]].\n   * @returns {GridRowHeightReturnValue} The row height value. If `null` or `undefined` then the default row height is applied.\n   */\n  getRowHeight: PropTypes.func,\n\n  /**\n   * Return the id of a given [[GridRowModel]].\n   */\n  getRowId: PropTypes.func,\n\n  /**\n   * Function that allows to specify the spacing between rows.\n   * @param {GridRowSpacingParams} params With all properties from [[GridRowSpacingParams]].\n   * @returns {GridRowSpacing} The row spacing values.\n   */\n  getRowSpacing: PropTypes.func,\n\n  /**\n   * Determines the path of a row in the tree data.\n   * For instance, a row with the path [\"A\", \"B\"] is the child of the row with the path [\"A\"].\n   * Note that all paths must contain at least one element.\n   * @param {GridRowModel} row The row from which we want the path.\n   * @returns {string[]} The path to the row.\n   */\n  getTreeDataPath: PropTypes.func,\n\n  /**\n   * The grouping column used by the tree data.\n   */\n  groupingColDef: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n\n  /**\n   * Set the height in pixel of the column headers in the grid.\n   * @default 56\n   */\n  headerHeight: PropTypes.number,\n\n  /**\n   * If `true`, the footer component is hidden.\n   * @default false\n   */\n  hideFooter: PropTypes.bool,\n\n  /**\n   * If `true`, the pagination component in the footer is hidden.\n   * @default false\n   */\n  hideFooterPagination: PropTypes.bool,\n\n  /**\n   * If `true`, the row count in the footer is hidden.\n   * It has no effect if the pagination is enabled.\n   * @default false\n   */\n  hideFooterRowCount: chainPropTypes(PropTypes.bool, props => {\n    if (props.pagination && props.hideFooterRowCount) {\n      return new Error('MUI: The `hideFooterRowCount` prop has no effect when the pagination is enabled.');\n    }\n\n    return null;\n  }),\n\n  /**\n   * If `true`, the selected row count in the footer is hidden.\n   * @default false\n   */\n  hideFooterSelectedRowCount: PropTypes.bool,\n\n  /**\n   * The initial state of the DataGridPro.\n   * The data in it will be set in the state on initialization but will not be controlled.\n   * If one of the data in `initialState` is also being controlled, then the control state wins.\n   */\n  initialState: PropTypes.object,\n\n  /**\n   * Callback fired when a cell is rendered, returns true if the cell is editable.\n   * @param {GridCellParams} params With all properties from [[GridCellParams]].\n   * @returns {boolean} A boolean indicating if the cell is editable.\n   */\n  isCellEditable: PropTypes.func,\n\n  /**\n   * Determines if a group should be expanded after its creation.\n   * This prop takes priority over the `defaultGroupingExpansionDepth` prop.\n   * @param {GridRowTreeNodeConfig} node The node of the group to test.\n   * @returns {boolean} A boolean indicating if the group is expanded.\n   */\n  isGroupExpandedByDefault: PropTypes.func,\n\n  /**\n   * Determines if a row can be selected.\n   * @param {GridRowParams} params With all properties from [[GridRowParams]].\n   * @returns {boolean} A boolean indicating if the cell is selectable.\n   */\n  isRowSelectable: PropTypes.func,\n\n  /**\n   * If `true`, a  loading overlay is displayed.\n   */\n  loading: PropTypes.bool,\n\n  /**\n   * Set the locale text of the grid.\n   * You can find all the translation keys supported in [the source](https://github.com/mui/mui-x/blob/HEAD/packages/grid/x-data-grid/src/constants/localeTextConstants.ts) in the GitHub repository.\n   */\n  localeText: PropTypes.object,\n\n  /**\n   * Pass a custom logger in the components that implements the [[Logger]] interface.\n   * @default console\n   */\n  logger: PropTypes.shape({\n    debug: PropTypes.func.isRequired,\n    error: PropTypes.func.isRequired,\n    info: PropTypes.func.isRequired,\n    warn: PropTypes.func.isRequired\n  }),\n\n  /**\n   * Allows to pass the logging level or false to turn off logging.\n   * @default \"debug\"\n   */\n  logLevel: PropTypes.oneOf(['debug', 'error', 'info', 'warn', false]),\n\n  /**\n   * Nonce of the inline styles for [Content Security Policy](https://www.w3.org/TR/2016/REC-CSP2-20161215/#script-src-the-nonce-attribute).\n   */\n  nonce: PropTypes.string,\n\n  /**\n   * Callback fired when any cell is clicked.\n   * @param {GridCellParams} params With all properties from [[GridCellParams]].\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onCellClick: PropTypes.func,\n\n  /**\n   * Callback fired when a double click event comes from a cell element.\n   * @param {GridCellParams} params With all properties from [[GridCellParams]].\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onCellDoubleClick: PropTypes.func,\n\n  /**\n   * Callback fired when the cell changes are committed.\n   * @param {GridCellEditCommitParams} params With all properties from [[GridCellEditCommitParams]].\n   * @param {MuiEvent<MuiBaseEvent>} event The event that caused this prop to be called.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onCellEditCommit: PropTypes.func,\n\n  /**\n   * Callback fired when the cell turns to edit mode.\n   * @param {GridCellParams} params With all properties from [[GridCellParams]].\n   * @param {MuiEvent<React.KeyboardEvent | React.MouseEvent>} event The event that caused this prop to be called.\n   */\n  onCellEditStart: PropTypes.func,\n\n  /**\n   * Callback fired when the cell turns to view mode.\n   * @param {GridCellParams} params With all properties from [[GridCellParams]].\n   * @param {MuiEvent<MuiBaseEvent>} event The event that caused this prop to be called.\n   */\n  onCellEditStop: PropTypes.func,\n\n  /**\n   * Callback fired when a cell loses focus.\n   * @param {GridCellParams} params With all properties from [[GridCellParams]].\n   * @param {MuiEvent<MuiBaseEvent>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onCellFocusOut: PropTypes.func,\n\n  /**\n   * Callback fired when a keydown event comes from a cell element.\n   * @param {GridCellParams} params With all properties from [[GridCellParams]].\n   * @param {MuiEvent<React.KeyboardEvent>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onCellKeyDown: PropTypes.func,\n\n  /**\n   * Callback fired when a click event comes from a column header element.\n   * @param {GridColumnHeaderParams} params With all properties from [[GridColumnHeaderParams]].\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onColumnHeaderClick: PropTypes.func,\n\n  /**\n   * Callback fired when a double click event comes from a column header element.\n   * @param {GridColumnHeaderParams} params With all properties from [[GridColumnHeaderParams]].\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onColumnHeaderDoubleClick: PropTypes.func,\n\n  /**\n   * Callback fired when a mouse enter event comes from a column header element.\n   * @param {GridColumnHeaderParams} params With all properties from [[GridColumnHeaderParams]].\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onColumnHeaderEnter: PropTypes.func,\n\n  /**\n   * Callback fired when a mouse leave event comes from a column header element.\n   * @param {GridColumnHeaderParams} params With all properties from [[GridColumnHeaderParams]].\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onColumnHeaderLeave: PropTypes.func,\n\n  /**\n   * Callback fired when a mouseout event comes from a column header element.\n   * @param {GridColumnHeaderParams} params With all properties from [[GridColumnHeaderParams]].\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onColumnHeaderOut: PropTypes.func,\n\n  /**\n   * Callback fired when a mouseover event comes from a column header element.\n   * @param {GridColumnHeaderParams} params With all properties from [[GridColumnHeaderParams]].\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onColumnHeaderOver: PropTypes.func,\n\n  /**\n   * Callback fired when a column is reordered.\n   * @param {GridColumnOrderChangeParams} params With all properties from [[GridColumnOrderChangeParams]].\n   * @param {MuiEvent<{}>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onColumnOrderChange: PropTypes.func,\n\n  /**\n   * Callback fired while a column is being resized.\n   * @param {GridColumnResizeParams} params With all properties from [[GridColumnResizeParams]].\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onColumnResize: PropTypes.func,\n\n  /**\n   * Callback fired when a column visibility changes.\n   * Only works when no `columnVisibilityModel` is provided and if we change the visibility of a single column at a time.\n   * @param {GridColumnVisibilityChangeParams} params With all properties from [[GridColumnVisibilityChangeParams]].\n   * @param {MuiEvent<{}>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   * @deprecated Use `onColumnVisibilityModelChange` instead.\n   */\n  onColumnVisibilityChange: PropTypes.func,\n\n  /**\n   * Callback fired when the column visibility model changes.\n   * @param {GridColumnVisibilityModel} model The new model.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onColumnVisibilityModelChange: PropTypes.func,\n\n  /**\n   * Callback fired when the width of a column is changed.\n   * @param {GridColumnResizeParams} params With all properties from [[GridColumnResizeParams]].\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onColumnWidthChange: PropTypes.func,\n\n  /**\n   * Callback fired when the detail panel of a row is opened or closed.\n   * @param {GridRowId[]} ids The ids of the rows which have the detail panel open.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onDetailPanelExpandedRowIdsChange: PropTypes.func,\n\n  /**\n   * Callback fired when the edit cell value changes.\n   * @param {GridEditCellPropsParams} params With all properties from [[GridEditCellPropsParams]].\n   * @param {MuiEvent<React.SyntheticEvent>} event The event that caused this prop to be called.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   * @deprecated use `preProcessEditCellProps` from the [`GridColDef`](/api/data-grid/grid-col-def/)\n   */\n  onEditCellPropsChange: PropTypes.func,\n\n  /**\n   * Callback fired when the `editRowsModel` changes.\n   * @param {GridEditRowsModel} editRowsModel With all properties from [[GridEditRowsModel]].\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onEditRowsModelChange: PropTypes.func,\n\n  /**\n   * Callback fired when an exception is thrown in the grid.\n   * @param {any} args The arguments passed to the `showError` call.\n   * @param {MuiEvent<{}>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onError: PropTypes.func,\n\n  /**\n   * Callback fired when the Filter model changes before the filters are applied.\n   * @param {GridFilterModel} model With all properties from [[GridFilterModel]].\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onFilterModelChange: PropTypes.func,\n\n  /**\n   * Callback fired when the current page has changed.\n   * @param {number} page Index of the page displayed on the Grid.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onPageChange: PropTypes.func,\n\n  /**\n   * Callback fired when the page size has changed.\n   * @param {number} pageSize Size of the page displayed on the Grid.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onPageSizeChange: PropTypes.func,\n\n  /**\n   * Callback fired when the pinned columns have changed.\n   * @param {GridPinnedColumns} pinnedColumns The changed pinned columns.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onPinnedColumnsChange: PropTypes.func,\n\n  /**\n   * Callback fired when the grid is resized.\n   * @param {ElementSize} containerSize With all properties from [[ElementSize]].\n   * @param {MuiEvent<{}>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onResize: PropTypes.func,\n\n  /**\n   * Callback fired when a row is clicked.\n   * Not called if the target clicked is an interactive element added by the built-in columns.\n   * @param {GridRowParams} params With all properties from [[GridRowParams]].\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onRowClick: PropTypes.func,\n\n  /**\n   * Callback fired when a double click event comes from a row container element.\n   * @param {GridRowParams} params With all properties from [[RowParams]].\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onRowDoubleClick: PropTypes.func,\n\n  /**\n   * Callback fired when the row changes are committed.\n   * @param {GridRowId} id The row id.\n   * @param {MuiEvent<MuiBaseEvent>} event The event that caused this prop to be called.\n   */\n  onRowEditCommit: PropTypes.func,\n\n  /**\n   * Callback fired when the row turns to edit mode.\n   * @param {GridRowParams} params With all properties from [[GridRowParams]].\n   * @param {MuiEvent<React.KeyboardEvent | React.MouseEvent>} event The event that caused this prop to be called.\n   */\n  onRowEditStart: PropTypes.func,\n\n  /**\n   * Callback fired when the row turns to view mode.\n   * @param {GridRowParams} params With all properties from [[GridRowParams]].\n   * @param {MuiEvent<MuiBaseEvent>} event The event that caused this prop to be called.\n   */\n  onRowEditStop: PropTypes.func,\n\n  /**\n   * Callback fired when the row grouping model changes.\n   * @param {GridRowGroupingModel} model Columns used as grouping criteria.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onRowGroupingModelChange: PropTypes.func,\n\n  /**\n   * Callback fired when scrolling to the bottom of the grid viewport.\n   * @param {GridRowScrollEndParams} params With all properties from [[GridRowScrollEndParams]].\n   * @param {MuiEvent<{}>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onRowsScrollEnd: PropTypes.func,\n\n  /**\n   * Callback fired when the selection state of one or multiple rows changes.\n   * @param {GridSelectionModel} selectionModel With all the row ids [[GridSelectionModel]].\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onSelectionModelChange: PropTypes.func,\n\n  /**\n   * Callback fired when the sort model changes before a column is sorted.\n   * @param {GridSortModel} model With all properties from [[GridSortModel]].\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onSortModelChange: PropTypes.func,\n\n  /**\n   * Callback fired when the state of the grid is updated.\n   * @param {GridState} state The new state.\n   * @param {MuiEvent<{}>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   * @internal\n   */\n  onStateChange: PropTypes.func,\n\n  /**\n   * The zero-based index of the current page.\n   * @default 0\n   */\n  page: PropTypes.number,\n\n  /**\n   * Set the number of rows in one page.\n   * If some of the rows have children (for instance in the tree data), this number represents the amount of top level rows wanted on each page.\n   * @default 100\n   */\n  pageSize: PropTypes.number,\n\n  /**\n   * If `true`, pagination is enabled.\n   * @default false\n   */\n  pagination: PropTypes.bool,\n\n  /**\n   * Pagination can be processed on the server or client-side.\n   * Set it to 'client' if you would like to handle the pagination on the client-side.\n   * Set it to 'server' if you would like to handle the pagination on the server-side.\n   * @default \"client\"\n   */\n  paginationMode: PropTypes.oneOf(['client', 'server']),\n\n  /**\n   * The column fields to display pinned to left or right.\n   */\n  pinnedColumns: PropTypes.shape({\n    left: PropTypes.arrayOf(PropTypes.string),\n    right: PropTypes.arrayOf(PropTypes.string)\n  }),\n\n  /**\n   * Callback called before updating a row with new values in the row and cell editing.\n   * Only applied if `props.experimentalFeatures.newEditingApi: true`.\n   * @param {GridRowModel} newRow Row object with the new values.\n   * @param {GridRowModel} oldRow Row object with the old values.\n   * @returns {Promise<GridRowModel> | GridRowModel} The final values to update the row.\n   */\n  processRowUpdate: PropTypes.func,\n\n  /**\n   * Number of extra rows to be rendered before/after the visible slice.\n   * @default 3\n   */\n  rowBuffer: PropTypes.number,\n\n  /**\n   * Set the total number of rows, if it is different from the length of the value `rows` prop.\n   * If some rows have children (for instance in the tree data), this number represents the amount of top level rows.\n   */\n  rowCount: PropTypes.number,\n\n  /**\n   * If `single`, all column we are grouping by will be represented in the same grouping the same column.\n   * If `multiple`, each column we are grouping by will be represented in its own column.\n   * @default 'single'\n   */\n  rowGroupingColumnMode: PropTypes.oneOf(['multiple', 'single']),\n\n  /**\n   * Set the row grouping model of the grid.\n   */\n  rowGroupingModel: PropTypes.arrayOf(PropTypes.string),\n\n  /**\n   * Set the height in pixel of a row in the grid.\n   * @default 52\n   */\n  rowHeight: PropTypes.number,\n\n  /**\n   * Set of rows of type [[GridRowsProp]].\n   */\n  rows: PropTypes.arrayOf(PropTypes.object).isRequired,\n\n  /**\n   * Sets the type of space between rows added by `getRowSpacing`.\n   * @default \"margin\"\n   */\n  rowSpacingType: PropTypes.oneOf(['border', 'margin']),\n\n  /**\n   * Select the pageSize dynamically using the component UI.\n   * @default [25, 50, 100]\n   */\n  rowsPerPageOptions: PropTypes.arrayOf(PropTypes.number),\n\n  /**\n   * Number of rows from the `rowBuffer` that can be visible before a new slice is rendered.\n   * @default 3\n   */\n  rowThreshold: PropTypes.number,\n\n  /**\n   * Override the height/width of the grid inner scrollbar.\n   */\n  scrollbarSize: PropTypes.number,\n\n  /**\n   * Set the area in `px` at the bottom of the grid viewport where onRowsScrollEnd is called.\n   * @default 80\n   */\n  scrollEndThreshold: PropTypes.number,\n\n  /**\n   * Set the selection model of the grid.\n   */\n  selectionModel: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired), PropTypes.number, PropTypes.string]),\n\n  /**\n   * If `true`, the right border of the cells are displayed.\n   * @default false\n   */\n  showCellRightBorder: PropTypes.bool,\n\n  /**\n   * If `true`, the right border of the column headers are displayed.\n   * @default false\n   */\n  showColumnRightBorder: PropTypes.bool,\n\n  /**\n   * Sorting can be processed on the server or client-side.\n   * Set it to 'client' if you would like to handle sorting on the client-side.\n   * Set it to 'server' if you would like to handle sorting on the server-side.\n   * @default \"client\"\n   */\n  sortingMode: PropTypes.oneOf(['client', 'server']),\n\n  /**\n   * The order of the sorting sequence.\n   * @default ['asc', 'desc', null]\n   */\n  sortingOrder: PropTypes.arrayOf(PropTypes.oneOf(['asc', 'desc'])),\n\n  /**\n   * Set the sort model of the grid.\n   */\n  sortModel: PropTypes.arrayOf(PropTypes.shape({\n    field: PropTypes.string.isRequired,\n    sort: PropTypes.oneOf(['asc', 'desc'])\n  })),\n\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n\n  /**\n   * If positive, the Grid will throttle updates coming from `apiRef.current.updateRows` and `apiRef.current.setRows`.\n   * It can be useful if you have a high update rate but do not want to do heavy work like filtering / sorting or rendering on each  individual update.\n   * @default 0\n   */\n  throttleRowsMs: PropTypes.number,\n\n  /**\n   * If `true`, the rows will be gathered in a tree structure according to the `getTreeDataPath` prop.\n   * @default false\n   */\n  treeData: PropTypes.bool\n};","map":{"version":3,"sources":["C:/Users/Admin/Documents/KRS/Application1/client/node_modules/@mui/x-data-grid-pro/DataGridPro/DataGridPro.js"],"names":["React","PropTypes","useLicenseVerifier","Watermark","chainPropTypes","GridBody","GridErrorHandler","GridFooterPlaceholder","GridHeaderPlaceholder","GridRoot","GridContextProvider","useDataGridProComponent","useDataGridProProps","DataGridProVirtualScroller","DataGridProColumnHeaders","getReleaseInfo","jsx","_jsx","jsxs","_jsxs","releaseInfo","DataGridProRaw","forwardRef","DataGridPro","inProps","ref","props","apiRef","children","className","style","sx","ColumnHeadersComponent","VirtualScrollerComponent","packageName","memo","propTypes","shape","current","object","isRequired","string","autoHeight","bool","autoPageSize","checkboxSelection","checkboxSelectionVisibleOnly","pagination","Error","classes","columnBuffer","number","columns","arrayOf","columnThreshold","columnTypes","columnVisibilityModel","components","componentsProps","defaultGroupingExpansionDepth","density","oneOf","detailPanelExpandedRowIds","oneOfType","disableChildrenFiltering","disableChildrenSorting","disableColumnFilter","disableColumnMenu","disableColumnPinning","disableColumnReorder","disableColumnResize","disableColumnSelector","disableDensitySelector","disableExtendRowFullWidth","disableMultipleColumnsFiltering","disableMultipleColumnsSorting","disableMultipleSelection","disableRowGrouping","disableSelectionOnClick","disableVirtualization","editMode","editRowsModel","error","any","experimentalFeatures","newEditingApi","preventCommitWhileValidating","rowGrouping","warnIfFocusStateIsNotSynced","filterMode","treeData","filterModel","items","columnField","id","operatorValue","value","linkOperator","getCellClassName","func","getDetailPanelContent","getDetailPanelHeight","getRowClassName","getRowHeight","getRowId","getRowSpacing","getTreeDataPath","groupingColDef","headerHeight","hideFooter","hideFooterPagination","hideFooterRowCount","hideFooterSelectedRowCount","initialState","isCellEditable","isGroupExpandedByDefault","isRowSelectable","loading","localeText","logger","debug","info","warn","logLevel","nonce","onCellClick","onCellDoubleClick","onCellEditCommit","onCellEditStart","onCellEditStop","onCellFocusOut","onCellKeyDown","onColumnHeaderClick","onColumnHeaderDoubleClick","onColumnHeaderEnter","onColumnHeaderLeave","onColumnHeaderOut","onColumnHeaderOver","onColumnOrderChange","onColumnResize","onColumnVisibilityChange","onColumnVisibilityModelChange","onColumnWidthChange","onDetailPanelExpandedRowIdsChange","onEditCellPropsChange","onEditRowsModelChange","onError","onFilterModelChange","onPageChange","onPageSizeChange","onPinnedColumnsChange","onResize","onRowClick","onRowDoubleClick","onRowEditCommit","onRowEditStart","onRowEditStop","onRowGroupingModelChange","onRowsScrollEnd","onSelectionModelChange","onSortModelChange","onStateChange","page","pageSize","paginationMode","pinnedColumns","left","right","processRowUpdate","rowBuffer","rowCount","rowGroupingColumnMode","rowGroupingModel","rowHeight","rows","rowSpacingType","rowsPerPageOptions","rowThreshold","scrollbarSize","scrollEndThreshold","selectionModel","showCellRightBorder","showColumnRightBorder","sortingMode","sortingOrder","sortModel","field","sort","throttleRowsMs"],"mappings":"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CA;AACA;AACA;AACA;AACEmC,EAAAA,mBAAmB,EAAErI,SAAS,CAACkG,IArfN;;AAufzB;AACF;AACA;AACA;AACA;AACA;AACEoC,EAAAA,mBAAmB,EAAEtI,SAAS,CAACkG,IA7fN;;AA+fzB;AACF;AACA;AACA;AACA;AACA;AACEqC,EAAAA,iBAAiB,EAAEvI,SAAS,CAACkG,IArgBJ;;AAugBzB;AACF;AACA;AACA;AACA;AACA;AACEsC,EAAAA,kBAAkB,EAAExI,SAAS,CAACkG,IA7gBL;;AA+gBzB;AACF;AACA;AACA;AACA;AACA;AACEuC,EAAAA,mBAAmB,EAAEzI,SAAS,CAACkG,IArhBN;;AAuhBzB;AACF;AACA;AACA;AACA;AACA;AACEwC,EAAAA,cAAc,EAAE1I,SAAS,CAACkG,IA7hBD;;AA+hBzB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACEyC,EAAAA,wBAAwB,EAAE3I,SAAS,CAACkG,IAviBX;;AAyiBzB;AACF;AACA;AACA;AACA;AACE0C,EAAAA,6BAA6B,EAAE5I,SAAS,CAACkG,IA9iBhB;;AAgjBzB;AACF;AACA;AACA;AACA;AACA;AACE2C,EAAAA,mBAAmB,EAAE7I,SAAS,CAACkG,IAtjBN;;AAwjBzB;AACF;AACA;AACA;AACA;AACE4C,EAAAA,iCAAiC,EAAE9I,SAAS,CAACkG,IA7jBpB;;AA+jBzB;AACF;AACA;AACA;AACA;AACA;AACA;AACE6C,EAAAA,qBAAqB,EAAE/I,SAAS,CAACkG,IAtkBR;;AAwkBzB;AACF;AACA;AACA;AACA;AACE8C,EAAAA,qBAAqB,EAAEhJ,SAAS,CAACkG,IA7kBR;;AA+kBzB;AACF;AACA;AACA;AACA;AACA;AACE+C,EAAAA,OAAO,EAAEjJ,SAAS,CAACkG,IArlBM;;AAulBzB;AACF;AACA;AACA;AACA;AACEgD,EAAAA,mBAAmB,EAAElJ,SAAS,CAACkG,IA5lBN;;AA8lBzB;AACF;AACA;AACA;AACA;AACEiD,EAAAA,YAAY,EAAEnJ,SAAS,CAACkG,IAnmBC;;AAqmBzB;AACF;AACA;AACA;AACA;AACEk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","sourcesContent":["import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { useLicenseVerifier, Watermark } from '@mui/x-license-pro';\nimport { chainPropTypes } from '@mui/utils';\nimport { GridBody, GridErrorHandler, GridFooterPlaceholder, GridHeaderPlaceholder, GridRoot, GridContextProvider } from '@mui/x-data-grid';\nimport { useDataGridProComponent } from './useDataGridProComponent';\nimport { useDataGridProProps } from './useDataGridProProps';\nimport { DataGridProVirtualScroller } from '../components/DataGridProVirtualScroller';\nimport { DataGridProColumnHeaders } from '../components/DataGridProColumnHeaders';\nimport { getReleaseInfo } from '../utils/releaseInfo';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst releaseInfo = getReleaseInfo();\nconst DataGridProRaw = /*#__PURE__*/React.forwardRef(function DataGridPro(inProps, ref) {\n  const props = useDataGridProProps(inProps);\n  const apiRef = useDataGridProComponent(props.apiRef, props);\n  useLicenseVerifier('x-data-grid-pro', releaseInfo);\n  return /*#__PURE__*/_jsx(GridContextProvider, {\n    apiRef: apiRef,\n    props: props,\n    children: /*#__PURE__*/_jsx(GridRoot, {\n      className: props.className,\n      style: props.style,\n      sx: props.sx,\n      ref: ref,\n      children: /*#__PURE__*/_jsxs(GridErrorHandler, {\n        children: [/*#__PURE__*/_jsx(GridHeaderPlaceholder, {}), /*#__PURE__*/_jsx(GridBody, {\n          ColumnHeadersComponent: DataGridProColumnHeaders,\n          VirtualScrollerComponent: DataGridProVirtualScroller,\n          children: /*#__PURE__*/_jsx(Watermark, {\n            packageName: \"x-data-grid-pro\",\n            releaseInfo: releaseInfo\n          })\n        }), /*#__PURE__*/_jsx(GridFooterPlaceholder, {})]\n      })\n    })\n  });\n});\nexport const DataGridPro = /*#__PURE__*/React.memo(DataGridProRaw);\nDataGridProRaw.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The ref object that allows grid manipulation. Can be instantiated with [[useGridApiRef()]].\n   */\n  apiRef: PropTypes.shape({\n    current: PropTypes.object.isRequired\n  }),\n\n  /**\n   * The label of the grid.\n   */\n  'aria-label': PropTypes.string,\n\n  /**\n   * The id of the element containing a label for the grid.\n   */\n  'aria-labelledby': PropTypes.string,\n\n  /**\n   * If `true`, the grid height is dynamic and follow the number of rows in the grid.\n   * @default false\n   */\n  autoHeight: PropTypes.bool,\n\n  /**\n   * If `true`, the pageSize is calculated according to the container size and the max number of rows to avoid rendering a vertical scroll bar.\n   * @default false\n   */\n  autoPageSize: PropTypes.bool,\n\n  /**\n   * If `true`, the grid get a first column with a checkbox that allows to select rows.\n   * @default false\n   */\n  checkboxSelection: PropTypes.bool,\n\n  /**\n   * If `true`, the \"Select All\" header checkbox selects only the rows on the current page. To be used in combination with `checkboxSelection`.\n   * It only works if the pagination is enabled.\n   * @default false\n   */\n  checkboxSelectionVisibleOnly: chainPropTypes(PropTypes.bool, props => {\n    if (!props.pagination && props.checkboxSelectionVisibleOnly) {\n      return new Error('MUI: The `checkboxSelectionVisibleOnly` prop has no effect when the pagination is not enabled.');\n    }\n\n    return null;\n  }),\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * Number of extra columns to be rendered before/after the visible slice.\n   * @default 3\n   */\n  columnBuffer: PropTypes.number,\n\n  /**\n   * Set of columns of type [[GridColumns]].\n   */\n  columns: PropTypes.arrayOf(PropTypes.object).isRequired,\n\n  /**\n   * Number of rows from the `columnBuffer` that can be visible before a new slice is rendered.\n   * @default 3\n   */\n  columnThreshold: PropTypes.number,\n\n  /**\n   * Extend native column types with your new column types.\n   */\n  columnTypes: PropTypes.object,\n\n  /**\n   * Set the column visibility model of the grid.\n   * If defined, the grid will ignore the `hide` property in [[GridColDef]].\n   */\n  columnVisibilityModel: PropTypes.object,\n\n  /**\n   * Overrideable components.\n   */\n  components: PropTypes.object,\n\n  /**\n   * Overrideable components props dynamically passed to the component at rendering.\n   */\n  componentsProps: PropTypes.object,\n\n  /**\n   * If above 0, the row children will be expanded up to this depth.\n   * If equal to -1, all the row children will be expanded.\n   * @default 0\n   */\n  defaultGroupingExpansionDepth: PropTypes.number,\n\n  /**\n   * Set the density of the grid.\n   * @default \"standard\"\n   */\n  density: PropTypes.oneOf(['comfortable', 'compact', 'standard']),\n\n  /**\n   * The row ids to show the detail panel.\n   */\n  detailPanelExpandedRowIds: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired),\n\n  /**\n   * If `true`, the filtering will only be applied to the top level rows when grouping rows with the `treeData` prop.\n   * @default false\n   */\n  disableChildrenFiltering: PropTypes.bool,\n\n  /**\n   * If `true`, the sorting will only be applied to the top level rows when grouping rows with the `treeData` prop.\n   * @default false\n   */\n  disableChildrenSorting: PropTypes.bool,\n\n  /**\n   * If `true`, column filters are disabled.\n   * @default false\n   */\n  disableColumnFilter: PropTypes.bool,\n\n  /**\n   * If `true`, the column menu is disabled.\n   * @default false\n   */\n  disableColumnMenu: PropTypes.bool,\n\n  /**\n   * If `true`, the column pinning is disabled.\n   * @default false\n   */\n  disableColumnPinning: PropTypes.bool,\n\n  /**\n   * If `true`, reordering columns is disabled.\n   * @default false\n   */\n  disableColumnReorder: PropTypes.bool,\n\n  /**\n   * If `true`, resizing columns is disabled.\n   * @default false\n   */\n  disableColumnResize: PropTypes.bool,\n\n  /**\n   * If `true`, hiding/showing columns is disabled.\n   * @default false\n   */\n  disableColumnSelector: PropTypes.bool,\n\n  /**\n   * If `true`, the density selector is disabled.\n   * @default false\n   */\n  disableDensitySelector: PropTypes.bool,\n\n  /**\n   * If `true`, rows will not be extended to fill the full width of the grid container.\n   * @default false\n   */\n  disableExtendRowFullWidth: PropTypes.bool,\n\n  /**\n   * If `true`, filtering with multiple columns is disabled.\n   * @default false\n   */\n  disableMultipleColumnsFiltering: PropTypes.bool,\n\n  /**\n   * If `true`, sorting with multiple columns is disabled.\n   * @default false\n   */\n  disableMultipleColumnsSorting: PropTypes.bool,\n\n  /**\n   * If `true`, multiple selection using the CTRL or CMD key is disabled.\n   * @default false\n   */\n  disableMultipleSelection: PropTypes.bool,\n\n  /**\n   * If `true`, the row grouping is disabled.\n   * @default false\n   */\n  disableRowGrouping: PropTypes.bool,\n\n  /**\n   * If `true`, the selection on click on a row or cell is disabled.\n   * @default false\n   */\n  disableSelectionOnClick: PropTypes.bool,\n\n  /**\n   * If `true`, the virtualization is disabled.\n   * @default false\n   */\n  disableVirtualization: PropTypes.bool,\n\n  /**\n   * Controls whether to use the cell or row editing.\n   * @default \"cell\"\n   */\n  editMode: PropTypes.oneOf(['cell', 'row']),\n\n  /**\n   * Set the edit rows model of the grid.\n   */\n  editRowsModel: PropTypes.object,\n\n  /**\n   * An error that will turn the grid into its error state and display the error component.\n   */\n  error: PropTypes.any,\n\n  /**\n   * Features under development.\n   * For each feature, if the flag is not explicitly set to `true`, the feature will be fully disabled and any property / method call will not have any effect.\n   */\n  experimentalFeatures: PropTypes.shape({\n    newEditingApi: PropTypes.bool,\n    preventCommitWhileValidating: PropTypes.bool,\n    rowGrouping: PropTypes.bool,\n    warnIfFocusStateIsNotSynced: PropTypes.bool\n  }),\n\n  /**\n   * Filtering can be processed on the server or client-side.\n   * Set it to 'server' if you would like to handle filtering on the server-side.\n   * @default \"client\"\n   */\n  filterMode: chainPropTypes(PropTypes.oneOf(['client', 'server']), props => {\n    if (props.treeData && props.filterMode === 'server') {\n      return new Error('MUI: The `filterMode=\"server\"` prop is not available when the `treeData` is enabled.');\n    }\n\n    return null;\n  }),\n\n  /**\n   * Set the filter model of the grid.\n   */\n  filterModel: PropTypes.shape({\n    items: PropTypes.arrayOf(PropTypes.shape({\n      columnField: PropTypes.string.isRequired,\n      id: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n      operatorValue: PropTypes.string,\n      value: PropTypes.any\n    })).isRequired,\n    linkOperator: PropTypes.oneOf(['and', 'or'])\n  }),\n\n  /**\n   * Function that applies CSS classes dynamically on cells.\n   * @param {GridCellParams} params With all properties from [[GridCellParams]].\n   * @returns {string} The CSS class to apply to the cell.\n   */\n  getCellClassName: PropTypes.func,\n\n  /**\n   * Function that returns the element to render in row detail.\n   * @param {GridRowParams} params With all properties from [[GridRowParams]].\n   * @returns {JSX.Element} The row detail element.\n   */\n  getDetailPanelContent: PropTypes.func,\n\n  /**\n   * Function that returns the height of the row detail panel.\n   * @param {GridRowParams} params With all properties from [[GridRowParams]].\n   * @returns {number} The height in pixels.\n   * @default \"() => 500\"\n   */\n  getDetailPanelHeight: PropTypes.func,\n\n  /**\n   * Function that applies CSS classes dynamically on rows.\n   * @param {GridRowClassNameParams} params With all properties from [[GridRowClassNameParams]].\n   * @returns {string} The CSS class to apply to the row.\n   */\n  getRowClassName: PropTypes.func,\n\n  /**\n   * Function that sets the row height per row.\n   * @param {GridRowHeightParams} params With all properties from [[GridRowHeightParams]].\n   * @returns {GridRowHeightReturnValue} The row height value. If `null` or `undefined` then the default row height is applied.\n   */\n  getRowHeight: PropTypes.func,\n\n  /**\n   * Return the id of a given [[GridRowModel]].\n   */\n  getRowId: PropTypes.func,\n\n  /**\n   * Function that allows to specify the spacing between rows.\n   * @param {GridRowSpacingParams} params With all properties from [[GridRowSpacingParams]].\n   * @returns {GridRowSpacing} The row spacing values.\n   */\n  getRowSpacing: PropTypes.func,\n\n  /**\n   * Determines the path of a row in the tree data.\n   * For instance, a row with the path [\"A\", \"B\"] is the child of the row with the path [\"A\"].\n   * Note that all paths must contain at least one element.\n   * @param {GridRowModel} row The row from which we want the path.\n   * @returns {string[]} The path to the row.\n   */\n  getTreeDataPath: PropTypes.func,\n\n  /**\n   * The grouping column used by the tree data.\n   */\n  groupingColDef: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n\n  /**\n   * Set the height in pixel of the column headers in the grid.\n   * @default 56\n   */\n  headerHeight: PropTypes.number,\n\n  /**\n   * If `true`, the footer component is hidden.\n   * @default false\n   */\n  hideFooter: PropTypes.bool,\n\n  /**\n   * If `true`, the pagination component in the footer is hidden.\n   * @default false\n   */\n  hideFooterPagination: PropTypes.bool,\n\n  /**\n   * If `true`, the row count in the footer is hidden.\n   * It has no effect if the pagination is enabled.\n   * @default false\n   */\n  hideFooterRowCount: chainPropTypes(PropTypes.bool, props => {\n    if (props.pagination && props.hideFooterRowCount) {\n      return new Error('MUI: The `hideFooterRowCount` prop has no effect when the pagination is enabled.');\n    }\n\n    return null;\n  }),\n\n  /**\n   * If `true`, the selected row count in the footer is hidden.\n   * @default false\n   */\n  hideFooterSelectedRowCount: PropTypes.bool,\n\n  /**\n   * The initial state of the DataGridPro.\n   * The data in it will be set in the state on initialization but will not be controlled.\n   * If one of the data in `initialState` is also being controlled, then the control state wins.\n   */\n  initialState: PropTypes.object,\n\n  /**\n   * Callback fired when a cell is rendered, returns true if the cell is editable.\n   * @param {GridCellParams} params With all properties from [[GridCellParams]].\n   * @returns {boolean} A boolean indicating if the cell is editable.\n   */\n  isCellEditable: PropTypes.func,\n\n  /**\n   * Determines if a group should be expanded after its creation.\n   * This prop takes priority over the `defaultGroupingExpansionDepth` prop.\n   * @param {GridRowTreeNodeConfig} node The node of the group to test.\n   * @returns {boolean} A boolean indicating if the group is expanded.\n   */\n  isGroupExpandedByDefault: PropTypes.func,\n\n  /**\n   * Determines if a row can be selected.\n   * @param {GridRowParams} params With all properties from [[GridRowParams]].\n   * @returns {boolean} A boolean indicating if the cell is selectable.\n   */\n  isRowSelectable: PropTypes.func,\n\n  /**\n   * If `true`, a  loading overlay is displayed.\n   */\n  loading: PropTypes.bool,\n\n  /**\n   * Set the locale text of the grid.\n   * You can find all the translation keys supported in [the source](https://github.com/mui/mui-x/blob/HEAD/packages/grid/x-data-grid/src/constants/localeTextConstants.ts) in the GitHub repository.\n   */\n  localeText: PropTypes.object,\n\n  /**\n   * Pass a custom logger in the components that implements the [[Logger]] interface.\n   * @default console\n   */\n  logger: PropTypes.shape({\n    debug: PropTypes.func.isRequired,\n    error: PropTypes.func.isRequired,\n    info: PropTypes.func.isRequired,\n    warn: PropTypes.func.isRequired\n  }),\n\n  /**\n   * Allows to pass the logging level or false to turn off logging.\n   * @default \"debug\"\n   */\n  logLevel: PropTypes.oneOf(['debug', 'error', 'info', 'warn', false]),\n\n  /**\n   * Nonce of the inline styles for [Content Security Policy](https://www.w3.org/TR/2016/REC-CSP2-20161215/#script-src-the-nonce-attribute).\n   */\n  nonce: PropTypes.string,\n\n  /**\n   * Callback fired when any cell is clicked.\n   * @param {GridCellParams} params With all properties from [[GridCellParams]].\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onCellClick: PropTypes.func,\n\n  /**\n   * Callback fired when a double click event comes from a cell element.\n   * @param {GridCellParams} params With all properties from [[GridCellParams]].\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onCellDoubleClick: PropTypes.func,\n\n  /**\n   * Callback fired when the cell changes are committed.\n   * @param {GridCellEditCommitParams} params With all properties from [[GridCellEditCommitParams]].\n   * @param {MuiEvent<MuiBaseEvent>} event The event that caused this prop to be called.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onCellEditCommit: PropTypes.func,\n\n  /**\n   * Callback fired when the cell turns to edit mode.\n   * @param {GridCellParams} params With all properties from [[GridCellParams]].\n   * @param {MuiEvent<React.KeyboardEvent | React.MouseEvent>} event The event that caused this prop to be called.\n   */\n  onCellEditStart: PropTypes.func,\n\n  /**\n   * Callback fired when the cell turns to view mode.\n   * @param {GridCellParams} params With all properties from [[GridCellParams]].\n   * @param {MuiEvent<MuiBaseEvent>} event The event that caused this prop to be called.\n   */\n  onCellEditStop: PropTypes.func,\n\n  /**\n   * Callback fired when a cell loses focus.\n   * @param {GridCellParams} params With all properties from [[GridCellParams]].\n   * @param {MuiEvent<MuiBaseEvent>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onCellFocusOut: PropTypes.func,\n\n  /**\n   * Callback fired when a keydown event comes from a cell element.\n   * @param {GridCellParams} params With all properties from [[GridCellParams]].\n   * @param {MuiEvent<React.KeyboardEvent>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onCellKeyDown: PropTypes.func,\n\n  /**\n   * Callback fired when a click event comes from a column header element.\n   * @param {GridColumnHeaderParams} params With all properties from [[GridColumnHeaderParams]].\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onColumnHeaderClick: PropTypes.func,\n\n  /**\n   * Callback fired when a double click event comes from a column header element.\n   * @param {GridColumnHeaderParams} params With all properties from [[GridColumnHeaderParams]].\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onColumnHeaderDoubleClick: PropTypes.func,\n\n  /**\n   * Callback fired when a mouse enter event comes from a column header element.\n   * @param {GridColumnHeaderParams} params With all properties from [[GridColumnHeaderParams]].\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onColumnHeaderEnter: PropTypes.func,\n\n  /**\n   * Callback fired when a mouse leave event comes from a column header element.\n   * @param {GridColumnHeaderParams} params With all properties from [[GridColumnHeaderParams]].\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onColumnHeaderLeave: PropTypes.func,\n\n  /**\n   * Callback fired when a mouseout event comes from a column header element.\n   * @param {GridColumnHeaderParams} params With all properties from [[GridColumnHeaderParams]].\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onColumnHeaderOut: PropTypes.func,\n\n  /**\n   * Callback fired when a mouseover event comes from a column header element.\n   * @param {GridColumnHeaderParams} params With all properties from [[GridColumnHeaderParams]].\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onColumnHeaderOver: PropTypes.func,\n\n  /**\n   * Callback fired when a column is reordered.\n   * @param {GridColumnOrderChangeParams} params With all properties from [[GridColumnOrderChangeParams]].\n   * @param {MuiEvent<{}>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onColumnOrderChange: PropTypes.func,\n\n  /**\n   * Callback fired while a column is being resized.\n   * @param {GridColumnResizeParams} params With all properties from [[GridColumnResizeParams]].\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onColumnResize: PropTypes.func,\n\n  /**\n   * Callback fired when a column visibility changes.\n   * Only works when no `columnVisibilityModel` is provided and if we change the visibility of a single column at a time.\n   * @param {GridColumnVisibilityChangeParams} params With all properties from [[GridColumnVisibilityChangeParams]].\n   * @param {MuiEvent<{}>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   * @deprecated Use `onColumnVisibilityModelChange` instead.\n   */\n  onColumnVisibilityChange: PropTypes.func,\n\n  /**\n   * Callback fired when the column visibility model changes.\n   * @param {GridColumnVisibilityModel} model The new model.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onColumnVisibilityModelChange: PropTypes.func,\n\n  /**\n   * Callback fired when the width of a column is changed.\n   * @param {GridColumnResizeParams} params With all properties from [[GridColumnResizeParams]].\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onColumnWidthChange: PropTypes.func,\n\n  /**\n   * Callback fired when the detail panel of a row is opened or closed.\n   * @param {GridRowId[]} ids The ids of the rows which have the detail panel open.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onDetailPanelExpandedRowIdsChange: PropTypes.func,\n\n  /**\n   * Callback fired when the edit cell value changes.\n   * @param {GridEditCellPropsParams} params With all properties from [[GridEditCellPropsParams]].\n   * @param {MuiEvent<React.SyntheticEvent>} event The event that caused this prop to be called.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   * @deprecated use `preProcessEditCellProps` from the [`GridColDef`](/api/data-grid/grid-col-def/)\n   */\n  onEditCellPropsChange: PropTypes.func,\n\n  /**\n   * Callback fired when the `editRowsModel` changes.\n   * @param {GridEditRowsModel} editRowsModel With all properties from [[GridEditRowsModel]].\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onEditRowsModelChange: PropTypes.func,\n\n  /**\n   * Callback fired when an exception is thrown in the grid.\n   * @param {any} args The arguments passed to the `showError` call.\n   * @param {MuiEvent<{}>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onError: PropTypes.func,\n\n  /**\n   * Callback fired when the Filter model changes before the filters are applied.\n   * @param {GridFilterModel} model With all properties from [[GridFilterModel]].\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onFilterModelChange: PropTypes.func,\n\n  /**\n   * Callback fired when the current page has changed.\n   * @param {number} page Index of the page displayed on the Grid.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onPageChange: PropTypes.func,\n\n  /**\n   * Callback fired when the page size has changed.\n   * @param {number} pageSize Size of the page displayed on the Grid.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onPageSizeChange: PropTypes.func,\n\n  /**\n   * Callback fired when the pinned columns have changed.\n   * @param {GridPinnedColumns} pinnedColumns The changed pinned columns.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onPinnedColumnsChange: PropTypes.func,\n\n  /**\n   * Callback fired when the grid is resized.\n   * @param {ElementSize} containerSize With all properties from [[ElementSize]].\n   * @param {MuiEvent<{}>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onResize: PropTypes.func,\n\n  /**\n   * Callback fired when a row is clicked.\n   * Not called if the target clicked is an interactive element added by the built-in columns.\n   * @param {GridRowParams} params With all properties from [[GridRowParams]].\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onRowClick: PropTypes.func,\n\n  /**\n   * Callback fired when a double click event comes from a row container element.\n   * @param {GridRowParams} params With all properties from [[RowParams]].\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onRowDoubleClick: PropTypes.func,\n\n  /**\n   * Callback fired when the row changes are committed.\n   * @param {GridRowId} id The row id.\n   * @param {MuiEvent<MuiBaseEvent>} event The event that caused this prop to be called.\n   */\n  onRowEditCommit: PropTypes.func,\n\n  /**\n   * Callback fired when the row turns to edit mode.\n   * @param {GridRowParams} params With all properties from [[GridRowParams]].\n   * @param {MuiEvent<React.KeyboardEvent | React.MouseEvent>} event The event that caused this prop to be called.\n   */\n  onRowEditStart: PropTypes.func,\n\n  /**\n   * Callback fired when the row turns to view mode.\n   * @param {GridRowParams} params With all properties from [[GridRowParams]].\n   * @param {MuiEvent<MuiBaseEvent>} event The event that caused this prop to be called.\n   */\n  onRowEditStop: PropTypes.func,\n\n  /**\n   * Callback fired when the row grouping model changes.\n   * @param {GridRowGroupingModel} model Columns used as grouping criteria.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onRowGroupingModelChange: PropTypes.func,\n\n  /**\n   * Callback fired when scrolling to the bottom of the grid viewport.\n   * @param {GridRowScrollEndParams} params With all properties from [[GridRowScrollEndParams]].\n   * @param {MuiEvent<{}>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onRowsScrollEnd: PropTypes.func,\n\n  /**\n   * Callback fired when the selection state of one or multiple rows changes.\n   * @param {GridSelectionModel} selectionModel With all the row ids [[GridSelectionModel]].\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onSelectionModelChange: PropTypes.func,\n\n  /**\n   * Callback fired when the sort model changes before a column is sorted.\n   * @param {GridSortModel} model With all properties from [[GridSortModel]].\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onSortModelChange: PropTypes.func,\n\n  /**\n   * Callback fired when the state of the grid is updated.\n   * @param {GridState} state The new state.\n   * @param {MuiEvent<{}>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   * @internal\n   */\n  onStateChange: PropTypes.func,\n\n  /**\n   * The zero-based index of the current page.\n   * @default 0\n   */\n  page: PropTypes.number,\n\n  /**\n   * Set the number of rows in one page.\n   * If some of the rows have children (for instance in the tree data), this number represents the amount of top level rows wanted on each page.\n   * @default 100\n   */\n  pageSize: PropTypes.number,\n\n  /**\n   * If `true`, pagination is enabled.\n   * @default false\n   */\n  pagination: PropTypes.bool,\n\n  /**\n   * Pagination can be processed on the server or client-side.\n   * Set it to 'client' if you would like to handle the pagination on the client-side.\n   * Set it to 'server' if you would like to handle the pagination on the server-side.\n   * @default \"client\"\n   */\n  paginationMode: PropTypes.oneOf(['client', 'server']),\n\n  /**\n   * The column fields to display pinned to left or right.\n   */\n  pinnedColumns: PropTypes.shape({\n    left: PropTypes.arrayOf(PropTypes.string),\n    right: PropTypes.arrayOf(PropTypes.string)\n  }),\n\n  /**\n   * Callback called before updating a row with new values in the row and cell editing.\n   * Only applied if `props.experimentalFeatures.newEditingApi: true`.\n   * @param {GridRowModel} newRow Row object with the new values.\n   * @param {GridRowModel} oldRow Row object with the old values.\n   * @returns {Promise<GridRowModel> | GridRowModel} The final values to update the row.\n   */\n  processRowUpdate: PropTypes.func,\n\n  /**\n   * Number of extra rows to be rendered before/after the visible slice.\n   * @default 3\n   */\n  rowBuffer: PropTypes.number,\n\n  /**\n   * Set the total number of rows, if it is different from the length of the value `rows` prop.\n   * If some rows have children (for instance in the tree data), this number represents the amount of top level rows.\n   */\n  rowCount: PropTypes.number,\n\n  /**\n   * If `single`, all column we are grouping by will be represented in the same grouping the same column.\n   * If `multiple`, each column we are grouping by will be represented in its own column.\n   * @default 'single'\n   */\n  rowGroupingColumnMode: PropTypes.oneOf(['multiple', 'single']),\n\n  /**\n   * Set the row grouping model of the grid.\n   */\n  rowGroupingModel: PropTypes.arrayOf(PropTypes.string),\n\n  /**\n   * Set the height in pixel of a row in the grid.\n   * @default 52\n   */\n  rowHeight: PropTypes.number,\n\n  /**\n   * Set of rows of type [[GridRowsProp]].\n   */\n  rows: PropTypes.arrayOf(PropTypes.object).isRequired,\n\n  /**\n   * Sets the type of space between rows added by `getRowSpacing`.\n   * @default \"margin\"\n   */\n  rowSpacingType: PropTypes.oneOf(['border', 'margin']),\n\n  /**\n   * Select the pageSize dynamically using the component UI.\n   * @default [25, 50, 100]\n   */\n  rowsPerPageOptions: PropTypes.arrayOf(PropTypes.number),\n\n  /**\n   * Number of rows from the `rowBuffer` that can be visible before a new slice is rendered.\n   * @default 3\n   */\n  rowThreshold: PropTypes.number,\n\n  /**\n   * Override the height/width of the grid inner scrollbar.\n   */\n  scrollbarSize: PropTypes.number,\n\n  /**\n   * Set the area in `px` at the bottom of the grid viewport where onRowsScrollEnd is called.\n   * @default 80\n   */\n  scrollEndThreshold: PropTypes.number,\n\n  /**\n   * Set the selection model of the grid.\n   */\n  selectionModel: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired), PropTypes.number, PropTypes.string]),\n\n  /**\n   * If `true`, the right border of the cells are displayed.\n   * @default false\n   */\n  showCellRightBorder: PropTypes.bool,\n\n  /**\n   * If `true`, the right border of the column headers are displayed.\n   * @default false\n   */\n  showColumnRightBorder: PropTypes.bool,\n\n  /**\n   * Sorting can be processed on the server or client-side.\n   * Set it to 'client' if you would like to handle sorting on the client-side.\n   * Set it to 'server' if you would like to handle sorting on the server-side.\n   * @default \"client\"\n   */\n  sortingMode: PropTypes.oneOf(['client', 'server']),\n\n  /**\n   * The order of the sorting sequence.\n   * @default ['asc', 'desc', null]\n   */\n  sortingOrder: PropTypes.arrayOf(PropTypes.oneOf(['asc', 'desc'])),\n\n  /**\n   * Set the sort model of the grid.\n   */\n  sortModel: PropTypes.arrayOf(PropTypes.shape({\n    field: PropTypes.string.isRequired,\n    sort: PropTypes.oneOf(['asc', 'desc'])\n  })),\n\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n\n  /**\n   * If positive, the Grid will throttle updates coming from `apiRef.current.updateRows` and `apiRef.current.setRows`.\n   * It can be useful if you have a high update rate but do not want to do heavy work like filtering / sorting or rendering on each  individual update.\n   * @default 0\n   */\n  throttleRowsMs: PropTypes.number,\n\n  /**\n   * If `true`, the rows will be gathered in a tree structure according to the `getTreeDataPath` prop.\n   * @default false\n   */\n  treeData: PropTypes.bool\n};"]},"metadata":{},"sourceType":"module"}